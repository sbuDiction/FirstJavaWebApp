'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var ReactDOM = _interopDefault(require('react-dom'));

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b = "function" === typeof Symbol && Symbol["for"],
    c = b ? Symbol["for"]("react.element") : 60103,
    d = b ? Symbol["for"]("react.portal") : 60106,
    e = b ? Symbol["for"]("react.fragment") : 60107,
    f = b ? Symbol["for"]("react.strict_mode") : 60108,
    g = b ? Symbol["for"]("react.profiler") : 60114,
    h = b ? Symbol["for"]("react.provider") : 60109,
    k = b ? Symbol["for"]("react.context") : 60110,
    l = b ? Symbol["for"]("react.async_mode") : 60111,
    m = b ? Symbol["for"]("react.concurrent_mode") : 60111,
    n = b ? Symbol["for"]("react.forward_ref") : 60112,
    p = b ? Symbol["for"]("react.suspense") : 60113,
    q = b ? Symbol["for"]("react.suspense_list") : 60120,
    r = b ? Symbol["for"]("react.memo") : 60115,
    t = b ? Symbol["for"]("react.lazy") : 60116,
    v = b ? Symbol["for"]("react.block") : 60121,
    w = b ? Symbol["for"]("react.fundamental") : 60117,
    x = b ? Symbol["for"]("react.responder") : 60118,
    y = b ? Symbol["for"]("react.scope") : 60119;

function z(a) {
  if ("object" === _typeof(a) && null !== a) {
    var u = a.$$typeof;

    switch (u) {
      case c:
        switch (a = a.type, a) {
          case l:
          case m:
          case e:
          case g:
          case f:
          case p:
            return a;

          default:
            switch (a = a && a.$$typeof, a) {
              case k:
              case n:
              case t:
              case r:
              case h:
                return a;

              default:
                return u;
            }

        }

      case d:
        return u;
    }
  }
}

function A(a) {
  return z(a) === m;
}

var AsyncMode = l;
var ConcurrentMode = m;
var ContextConsumer = k;
var ContextProvider = h;
var Element = c;
var ForwardRef = n;
var Fragment = e;
var Lazy = t;
var Memo = r;
var Portal = d;
var Profiler = g;
var StrictMode = f;
var Suspense = p;

var isAsyncMode = function isAsyncMode(a) {
  return A(a) || z(a) === l;
};

var isConcurrentMode = A;

var isContextConsumer = function isContextConsumer(a) {
  return z(a) === k;
};

var isContextProvider = function isContextProvider(a) {
  return z(a) === h;
};

var isElement = function isElement(a) {
  return "object" === _typeof(a) && null !== a && a.$$typeof === c;
};

var isForwardRef = function isForwardRef(a) {
  return z(a) === n;
};

var isFragment = function isFragment(a) {
  return z(a) === e;
};

var isLazy = function isLazy(a) {
  return z(a) === t;
};

var isMemo = function isMemo(a) {
  return z(a) === r;
};

var isPortal = function isPortal(a) {
  return z(a) === d;
};

var isProfiler = function isProfiler(a) {
  return z(a) === g;
};

var isStrictMode = function isStrictMode(a) {
  return z(a) === f;
};

var isSuspense = function isSuspense(a) {
  return z(a) === p;
};

var isValidElementType = function isValidElementType(a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === _typeof(a) && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
};

var typeOf = z;
var reactIs_production_min = {
  AsyncMode: AsyncMode,
  ConcurrentMode: ConcurrentMode,
  ContextConsumer: ContextConsumer,
  ContextProvider: ContextProvider,
  Element: Element,
  ForwardRef: ForwardRef,
  Fragment: Fragment,
  Lazy: Lazy,
  Memo: Memo,
  Portal: Portal,
  Profiler: Profiler,
  StrictMode: StrictMode,
  Suspense: Suspense,
  isAsyncMode: isAsyncMode,
  isConcurrentMode: isConcurrentMode,
  isContextConsumer: isContextConsumer,
  isContextProvider: isContextProvider,
  isElement: isElement,
  isForwardRef: isForwardRef,
  isFragment: isFragment,
  isLazy: isLazy,
  isMemo: isMemo,
  isPortal: isPortal,
  isProfiler: isProfiler,
  isStrictMode: isStrictMode,
  isSuspense: isSuspense,
  isValidElementType: isValidElementType,
  typeOf: typeOf
};

var reactIs_development = createCommonjsModule(function (module, exports) {

  if (process.env.NODE_ENV !== "production") {
    (function () {
      // nor polyfill, then a plain number is used for performance.

      var hasSymbol = typeof Symbol === 'function' && Symbol["for"];
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol["for"]('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol["for"]('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol["for"]('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol["for"]('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol["for"]('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol["for"]('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
      // (unstable) APIs that have been removed. Can we remove the symbols?

      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol["for"]('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol["for"]('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol["for"]('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol["for"]('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol["for"]('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol["for"]('react.lazy') : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol["for"]('react.block') : 0xead9;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol["for"]('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol["for"]('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol["for"]('react.scope') : 0xead7;

      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || _typeof(type) === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }

      function typeOf(object) {
        if (_typeof(object) === 'object' && object !== null) {
          var $$typeof = object.$$typeof;

          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;

              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;

                default:
                  var $$typeofType = type && type.$$typeof;

                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;

                    default:
                      return $$typeof;
                  }

              }

            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }

        return undefined;
      } // AsyncMode is deprecated along with isAsyncMode


      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }

      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }

      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }

      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }

      function isElement(object) {
        return _typeof(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }

      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }

      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }

      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }

      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }

      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }

      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }

      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }

      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }

      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType;
      exports.typeOf = typeOf;
    })();
  }
});
var reactIs_development_1 = reactIs_development.AsyncMode;
var reactIs_development_2 = reactIs_development.ConcurrentMode;
var reactIs_development_3 = reactIs_development.ContextConsumer;
var reactIs_development_4 = reactIs_development.ContextProvider;
var reactIs_development_5 = reactIs_development.Element;
var reactIs_development_6 = reactIs_development.ForwardRef;
var reactIs_development_7 = reactIs_development.Fragment;
var reactIs_development_8 = reactIs_development.Lazy;
var reactIs_development_9 = reactIs_development.Memo;
var reactIs_development_10 = reactIs_development.Portal;
var reactIs_development_11 = reactIs_development.Profiler;
var reactIs_development_12 = reactIs_development.StrictMode;
var reactIs_development_13 = reactIs_development.Suspense;
var reactIs_development_14 = reactIs_development.isAsyncMode;
var reactIs_development_15 = reactIs_development.isConcurrentMode;
var reactIs_development_16 = reactIs_development.isContextConsumer;
var reactIs_development_17 = reactIs_development.isContextProvider;
var reactIs_development_18 = reactIs_development.isElement;
var reactIs_development_19 = reactIs_development.isForwardRef;
var reactIs_development_20 = reactIs_development.isFragment;
var reactIs_development_21 = reactIs_development.isLazy;
var reactIs_development_22 = reactIs_development.isMemo;
var reactIs_development_23 = reactIs_development.isPortal;
var reactIs_development_24 = reactIs_development.isProfiler;
var reactIs_development_25 = reactIs_development.isStrictMode;
var reactIs_development_26 = reactIs_development.isSuspense;
var reactIs_development_27 = reactIs_development.isValidElementType;
var reactIs_development_28 = reactIs_development.typeOf;

var reactIs = createCommonjsModule(function (module) {

  if (process.env.NODE_ENV === 'production') {
    module.exports = reactIs_production_min;
  } else {
    module.exports = reactIs_development;
  }
});

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var printWarning = function printWarning() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function printWarning(text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */


function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof(typeSpecs[typeSpecName]) + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }

        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + _typeof(error) + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }

        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */


checkPropTypes.resetWarningCache = function () {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};

var checkPropTypes_1 = checkPropTypes;

var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);

var printWarning$1 = function printWarning() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning$1 = function printWarning(text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

var factoryWithTypeCheckers = function factoryWithTypeCheckers(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */


  var ANONYMOUS = '<<anonymous>>'; // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };
  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

  /*eslint-disable no-self-compare*/

  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */


  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  } // Make `instanceof Error` still work for returned errors.


  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }

    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;

          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning$1('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }

      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }

          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }

        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }

      var propValue = props[propName];

      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }

      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);

        if (error instanceof Error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning$1('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
        }
      }

      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);

        if (type === 'symbol') {
          return String(value);
        }

        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }

      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }

      for (var key in propValue) {
        if (has$1(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);

          if (error instanceof Error) {
            return error;
          }
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];

      if (typeof checker !== 'function') {
        printWarning$1('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }

      for (var key in shapeTypes) {
        var checker = shapeTypes[key];

        if (!checker) {
          continue;
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      } // We need to check all keys in case some are required but missing from
      // props.


      var allKeys = objectAssign({}, props[propName], shapeTypes);

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (_typeof(propValue)) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;

      case 'boolean':
        return !propValue;

      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }

        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);

        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;

          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;

              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;

      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    } // falsy value can't be a Symbol


    if (!propValue) {
      return false;
    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    } // Fallback for non-spec compliant Symbols which are polyfilled.


    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  } // Equivalent of `typeof` but with special handling for array and regexp.


  function getPropType(propValue) {
    var propType = _typeof(propValue);

    if (Array.isArray(propValue)) {
      return 'array';
    }

    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }

    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }

    return propType;
  } // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.


  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }

    var propType = getPropType(propValue);

    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }

    return propType;
  } // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"


  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);

    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;

      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;

      default:
        return type;
    }
  } // Returns class name of the object, if any.


  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }

    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

function emptyFunction() {}

function emptyFunctionWithReset() {}

emptyFunctionWithReset.resetWarningCache = emptyFunction;

var factoryWithThrowingShims = function factoryWithThrowingShims() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }

    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  }
  shim.isRequired = shim;

  function getShim() {
    return shim;
  }
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  if (process.env.NODE_ENV !== 'production') {
    var ReactIs = reactIs; // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod

    var throwOnDirectAccess = true;
    module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  } else {
    // By explicitly using `prop-types` you are opting into new production behavior.
    // http://fb.me/prop-types-in-prod
    module.exports = factoryWithThrowingShims();
  }
});

var classnames = createCommonjsModule(function (module) {
  /*!
    Copyright (c) 2017 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */

  /* global define */
  (function () {

    var hasOwn = {}.hasOwnProperty;

    function classNames() {
      var classes = [];

      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!arg) continue;

        var argType = _typeof(arg);

        if (argType === 'string' || argType === 'number') {
          classes.push(arg);
        } else if (Array.isArray(arg) && arg.length) {
          var inner = classNames.apply(null, arg);

          if (inner) {
            classes.push(inner);
          }
        } else if (argType === 'object') {
          for (var key in arg) {
            if (hasOwn.call(arg, key) && arg[key]) {
              classes.push(key);
            }
          }
        }
      }

      return classes.join(' ');
    }

    if ( module.exports) {
      classNames["default"] = classNames;
      module.exports = classNames;
    } else {
      window.classNames = classNames;
    }
  })();
});

function SprkIcon(_ref) {
  var additionalClasses = _ref.additionalClasses,
      children = _ref.children,
      iconName = _ref.iconName,
      idString = _ref.idString,
      viewBox = _ref.viewBox,
      rest = _objectWithoutProperties(_ref, ["additionalClasses", "children", "iconName", "idString", "viewBox"]);

  return /*#__PURE__*/React__default.createElement("svg", _extends({
    className: classnames('sprk-c-Icon', additionalClasses),
    viewBox: viewBox,
    "data-id": idString
  }, rest), /*#__PURE__*/React__default.createElement("use", {
    xlinkHref: "#".concat(iconName)
  }));
}

SprkIcon.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /** Incoming children. */
  children: propTypes.node,

  /** The id of the symbol to use for the icon. */
  iconName: propTypes.string.isRequired,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /** The viewbox of the svg containing the symbol. */
  viewBox: propTypes.string
};
SprkIcon.defaultProps = {
  additionalClasses: '',
  children: [],
  idString: '',
  viewBox: '0 0 64 64'
};

var SprkAlert = function SprkAlert(props) {
  var message = props.message,
      variant = props.variant,
      additionalClasses = props.additionalClasses,
      isDismissible = props.isDismissible,
      idString = props.idString,
      onDismiss = props.onDismiss,
      analyticsString = props.analyticsString,
      isVisible = props.isVisible,
      iconNameSuccess = props.iconNameSuccess,
      iconNameInfo = props.iconNameInfo,
      iconNameFail = props.iconNameFail,
      iconNameDismiss = props.iconNameDismiss,
      other = _objectWithoutProperties(props, ["message", "variant", "additionalClasses", "isDismissible", "idString", "onDismiss", "analyticsString", "isVisible", "iconNameSuccess", "iconNameInfo", "iconNameFail", "iconNameDismiss"]);

  if (!isVisible) return null;
  var icon;
  var classNames = classnames('sprk-c-Alert', additionalClasses, {
    'sprk-c-Alert--info': variant === 'info',
    'sprk-c-Alert--success': variant === 'success',
    'sprk-c-Alert--fail': variant === 'fail'
  });

  switch (variant) {
    case 'success':
      icon = iconNameSuccess;
      break;

    case 'info':
      icon = iconNameInfo;
      break;

    case 'fail':
      icon = iconNameFail;
      break;
  }

  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classNames,
    role: "alert",
    "data-id": idString
  }, other), /*#__PURE__*/React__default.createElement("div", {
    className: "sprk-c-Alert__content"
  }, variant && /*#__PURE__*/React__default.createElement(SprkIcon, {
    iconName: icon,
    additionalClasses: "sprk-c-Alert__icon sprk-c-Icon--l sprk-c-Icon--stroke-current-color",
    "aria-hidden": "true"
  }), /*#__PURE__*/React__default.createElement("p", {
    className: "sprk-c-Alert__text"
  }, message)), isDismissible && /*#__PURE__*/React__default.createElement("button", {
    className: "sprk-c-Alert__icon sprk-c-Alert__icon--dismiss",
    type: "button",
    title: "Dismiss",
    onClick: onDismiss,
    "data-analytics": analyticsString
  }, /*#__PURE__*/React__default.createElement(SprkIcon, {
    iconName: iconNameDismiss,
    additionalClasses: "sprk-c-Icon--stroke-current-color",
    "aria-hidden": "true"
  })));
};

SprkAlert.propTypes = {
  /**
   * Determines whether to render the Alert.
   */
  isVisible: propTypes.bool,

  /**
   * The text of the Alert message.
   * Will be rendered inside a paragraph tag.
   */
  message: propTypes.string.isRequired,

  /**
   * The type of Alert variant to render.
   * 	Can be `info`, `fail`, or `success`.
   */
  variant: propTypes.oneOf(['info', 'success', 'fail']),

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * If `false`, the dismiss button will not be rendered and
   * the Alert will not dismissible.
   * If `true`, the dismiss button will be rendered and
   * the Alert will be dismissible.
   */
  isDismissible: propTypes.bool,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Function that is called when dismiss button is clicked.
   */
  onDismiss: propTypes.func,

  /** The icon name for the fail Alert. */
  iconNameFail: propTypes.string,

  /** The icon name for the dismiss button. */
  iconNameDismiss: propTypes.string,

  /** The icon name for the info Alert. */
  iconNameInfo: propTypes.string,

  /** The icon name for the success Alert. */
  iconNameSuccess: propTypes.string
};
SprkAlert.defaultProps = {
  iconNameFail: 'exclamation',
  iconNameDismiss: 'close',
  iconNameInfo: 'bell',
  iconNameSuccess: 'check-mark',
  isVisible: false,
  isDismissible: true
};

function SprkSpinner(_ref) {
  var size = _ref.size,
      lightness = _ref.lightness,
      additionalClasses = _ref.additionalClasses,
      rest = _objectWithoutProperties(_ref, ["size", "lightness", "additionalClasses"]);

  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classnames('sprk-c-Spinner', 'sprk-c-Spinner--circle', {
      'sprk-c-Spinner--large': size === 'large'
    }, {
      'sprk-c-Spinner--dark': lightness === 'dark'
    }, additionalClasses)
  }, rest));
}

SprkSpinner.propTypes = {
  /**
   * Determines size of spinner.
   */
  size: propTypes.oneOf(['small', 'large']),

  /**
   * Determines shade of spinner.
   */
  lightness: propTypes.oneOf(['light', 'dark']),

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string
};
SprkSpinner.defaultProps = {
  size: 'small',
  lightness: 'light'
};

var SprkButton = function SprkButton(_ref) {
  var additionalClasses = _ref.additionalClasses,
      analyticsString = _ref.analyticsString,
      children = _ref.children,
      disabled = _ref.disabled,
      element = _ref.element,
      idString = _ref.idString,
      loading = _ref.loading,
      variant = _ref.variant,
      href = _ref.href,
      spinningAriaLabel = _ref.spinningAriaLabel,
      rest = _objectWithoutProperties(_ref, ["additionalClasses", "analyticsString", "children", "disabled", "element", "idString", "loading", "variant", "href", "spinningAriaLabel"]);

  var TagName;

  if (href && !element) {
    TagName = 'a';
  } else if (element) {
    TagName = element;
  } else {
    TagName = 'button';
  }

  return /*#__PURE__*/React__default.createElement(TagName, _extends({
    className: classnames('sprk-c-Button', {
      'sprk-c-Button--secondary': variant === 'secondary'
    }, {
      'sprk-c-Button--tertiary': variant === 'tertiary'
    }, {
      'sprk-is-Disabled': disabled
    }, additionalClasses),
    role: element !== 'button' ? 'button' : undefined,
    "data-id": idString,
    "data-analytics": analyticsString,
    disabled: TagName !== 'a' ? disabled : undefined,
    href: TagName !== 'button' ? href : undefined
  }, rest, loading && {
    'aria-label': spinningAriaLabel
  }), loading && /*#__PURE__*/React__default.createElement(SprkSpinner, {
    lightness: variant === 'secondary' ? 'dark' : undefined
  }) || children);
};

SprkButton.propTypes = {
  /**
   * A space-separated string of classes to
   * add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute
   * serving as a unique selector for outside
   * libraries to capture data.
   */
  analyticsString: propTypes.string,

  /** Content to render inside of the SprkButton */
  children: propTypes.node,

  /**
   * Applies disabled style and the
   * disabled attribute to the element.
   */
  disabled: propTypes.bool,

  /**
   * Determines what element is rendered.
   * If an href is provided and an element is not,
   * an anchor tag will be rendered.
   * If no href or element is provided,
   * it will default to a button.
   */
  element: propTypes.oneOfType([propTypes.string, propTypes.node, propTypes.func]),

  /**
   * Assigned to the `data-id` attribute serving as a
   * unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Will cause a spinner to be
   * rendered in place of the button content.
   */
  loading: propTypes.bool,

  /**
   * Optional string value that is
   * set for the aria-label when `loading` is `true`.
   */
  spinningAriaLabel: propTypes.string,

  /**
   *  Determines the coresponding button style.
   */
  variant: propTypes.oneOf(['primary', 'secondary', 'tertiary']),

  /**
   * If an href is provided and no element is provided,
   * an anchor tag will be rendered.
   * The actual value is what is applied to the href attribute.
   */
  href: propTypes.string
};
SprkButton.defaultProps = {
  disabled: false,
  variant: 'primary',
  loading: false,
  spinningAriaLabel: 'Loading'
};

var tinyDatePicker = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
     module.exports = factory() ;
  })(commonjsGlobal, function () {
    /**
     * @file A generic set of mutation-free date functions.
     */

    /**
     * now returns the current date without any time values
     *
     * @returns {Date}
     */

    function now() {
      var dt = new Date();
      dt.setHours(0, 0, 0, 0);
      return dt;
    }
    /**
     * dateEq compares two dates
     *
     * @param {Date} date1 the first date
     * @param {Date} date2 the second date
     * @returns {boolean}
     */


    function datesEq(date1, date2) {
      return (date1 && date1.toDateString()) === (date2 && date2.toDateString());
    }
    /**
     * shiftDay shifts the specified date by n days
     *
     * @param {Date} dt
     * @param {number} n
     * @returns {Date}
     */


    function shiftDay(dt, n) {
      dt = new Date(dt);
      dt.setDate(dt.getDate() + n);
      return dt;
    }
    /**
     * shiftMonth shifts the specified date by a specified number of months
     *
     * @param {Date} dt
     * @param {number} n
     * @param {boolean} wrap optional, if true, does not change year
     *                       value, defaults to false
     * @returns {Date}
     */


    function shiftMonth(dt, n, wrap) {
      dt = new Date(dt);
      var dayOfMonth = dt.getDate();
      var month = dt.getMonth() + n;
      dt.setDate(1);
      dt.setMonth(wrap ? (12 + month) % 12 : month);
      dt.setDate(dayOfMonth); // If dayOfMonth = 31, but the target month only has 30 or 29 or whatever...
      // head back to the max of the target month

      if (dt.getDate() < dayOfMonth) {
        dt.setDate(0);
      }

      return dt;
    }
    /**
     * shiftYear shifts the specified date by n years
     *
     * @param {Date} dt
     * @param {number} n
     * @returns {Date}
     */


    function shiftYear(dt, n) {
      dt = new Date(dt);
      dt.setFullYear(dt.getFullYear() + n);
      return dt;
    }
    /**
     * setYear changes the specified date to the specified year
     *
     * @param {Date} dt
     * @param {number} year
     */


    function setYear(dt, year) {
      dt = new Date(dt);
      dt.setFullYear(year);
      return dt;
    }
    /**
     * setMonth changes the specified date to the specified month
     *
     * @param {Date} dt
     * @param {number} month
     */


    function setMonth(dt, month) {
      return shiftMonth(dt, month - dt.getMonth());
    }
    /**
     * dateOrParse creates a function which, given a date or string, returns a date
     *
     * @param {function} parse the function used to parse strings
     * @returns {function}
     */


    function dateOrParse(parse) {
      return function (dt) {
        return dropTime(typeof dt === 'string' ? parse(dt) : dt);
      };
    }
    /**
     * constrainDate returns dt or min/max depending on whether dt is out of bounds (inclusive)
     *
     * @export
     * @param {Date} dt
     * @param {Date} min
     * @param {Date} max
     * @returns {Date}
     */


    function constrainDate(dt, min, max) {
      return dt < min ? min : dt > max ? max : dt;
    }

    function dropTime(dt) {
      dt = new Date(dt);
      dt.setHours(0, 0, 0, 0);
      return dt;
    }
    /**
     * @file Utility functions for function manipulation.
     */

    /**
     * bufferFn buffers calls to fn so they only happen every ms milliseconds
     *
     * @param {number} ms number of milliseconds
     * @param {function} fn the function to be buffered
     * @returns {function}
     */


    function bufferFn(ms, fn) {
      var timeout = undefined;
      return function () {
        clearTimeout(timeout);
        timeout = setTimeout(fn, ms);
      };
    }
    /**
     * noop is a function which does nothing at all.
     */


    function noop() {}
    /**
     * copy properties from object o2 to object o1.
     *
     * @params {Object} o1
     * @params {Object} o2
     * @returns {Object}
     */


    function cp() {
      var args = arguments;
      var o1 = args[0];

      for (var i = 1; i < args.length; ++i) {
        var o2 = args[i] || {};

        for (var key in o2) {
          o1[key] = o2[key];
        }
      }

      return o1;
    }
    /**
     * @file Responsible for sanitizing and creating date picker options.
     */


    var english = {
      days: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      today: 'Today',
      clear: 'Clear',
      close: 'Close'
    };
    /**
     * DatePickerOptions constructs a new date picker options object, overriding
     * default values with any values specified in opts.
     *
     * @param {DatePickerOptions} opts
     * @returns {DatePickerOptions}
     */

    function DatePickerOptions(opts) {
      opts = opts || {};
      opts = cp(defaults(), opts);
      var parse = dateOrParse(opts.parse);
      opts.lang = cp(english, opts.lang);
      opts.parse = parse;
      opts.inRange = makeInRangeFn(opts);
      opts.min = parse(opts.min || shiftYear(now(), -100));
      opts.max = parse(opts.max || shiftYear(now(), 100));
      opts.hilightedDate = opts.parse(opts.hilightedDate);
      return opts;
    }

    function defaults() {
      return {
        lang: english,
        // Possible values: dp-modal, dp-below, dp-permanent
        mode: 'dp-modal',
        // The date to hilight initially if the date picker has no
        // initial value.
        hilightedDate: now(),
        format: function format(dt) {
          return dt.getMonth() + 1 + '/' + dt.getDate() + '/' + dt.getFullYear();
        },
        parse: function parse(str) {
          var date = new Date(str);
          return isNaN(date) ? now() : date;
        },
        dateClass: function dateClass() {},
        inRange: function inRange() {
          return true;
        },
        appendTo: document.body
      };
    }

    function makeInRangeFn(opts) {
      var inRange = opts.inRange; // Cache this version, and return a variant

      return function (dt, dp) {
        return inRange(dt, dp) && opts.min <= dt && opts.max >= dt;
      };
    }
    /**
     * @file Helper functions for dealing with dom elements.
     */


    var Key = {
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      enter: 13,
      esc: 27
    };
    /**
     * on attaches an event handler to the specified element, and returns an
     * off function which can be used to remove the handler.
     *
     * @param {string} evt the name of the event to handle
     * @param {HTMLElement} el the element to attach to
     * @param {function} handler the event handler
     * @returns {function} the off function
     */

    function on(evt, el, handler) {
      el.addEventListener(evt, handler, true);
      return function () {
        el.removeEventListener(evt, handler, true);
      };
    }

    var CustomEvent = shimCustomEvent();

    function shimCustomEvent() {
      if (typeof window === 'undefined') {
        return;
      }

      var CustomEvent = window.CustomEvent;

      if (typeof CustomEvent !== 'function') {
        CustomEvent = function CustomEvent(event, params) {
          params = params || {
            bubbles: false,
            cancelable: false,
            detail: undefined
          };
          var evt = document.createEvent('CustomEvent');
          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
          return evt;
        };

        CustomEvent.prototype = window.Event.prototype;
      }

      return CustomEvent;
    }
    /**
     * @file Manages the calendar / day-picker view.
     */


    var dayPicker = {
      onKeyDown: keyDown,
      onClick: {
        'dp-day': selectDay,
        'dp-next': gotoNextMonth,
        'dp-prev': gotoPrevMonth,
        'dp-today': selectToday,
        'dp-clear': clear,
        'dp-close': close,
        'dp-cal-month': showMonthPicker,
        'dp-cal-year': showYearPicker
      },
      render: render
    };
    /**
     * view renders the calendar (day picker) as an HTML string.
     *
     * @param {DatePickerContext} context the date picker being rendered
     * @returns {string}
     */

    function render(dp) {
      var opts = dp.opts;
      var lang = opts.lang;
      var state = dp.state;
      var dayNames = lang.days;
      var dayOffset = opts.dayOffset || 0;
      var selectedDate = state.selectedDate;
      var hilightedDate = state.hilightedDate;
      var hilightedMonth = hilightedDate.getMonth();
      var today = now().getTime();
      return '<div class="dp-cal">' + '<header class="dp-cal-header">' + '<button tabindex="-1" type="button" class="dp-prev">Prev</button>' + '<button tabindex="-1" type="button" class="dp-cal-month">' + lang.months[hilightedMonth] + '</button>' + '<button tabindex="-1" type="button" class="dp-cal-year">' + hilightedDate.getFullYear() + '</button>' + '<button tabindex="-1" type="button" class="dp-next">Next</button>' + '</header>' + '<div class="dp-days">' + dayNames.map(function (name, i) {
        return '<span class="dp-col-header">' + dayNames[(i + dayOffset) % dayNames.length] + '</span>';
      }).join('') + mapDays(hilightedDate, dayOffset, function (date) {
        var isNotInMonth = date.getMonth() !== hilightedMonth;
        var isDisabled = !opts.inRange(date);
        var isToday = date.getTime() === today;
        var className = 'dp-day';
        className += isNotInMonth ? ' dp-edge-day' : '';
        className += datesEq(date, hilightedDate) ? ' dp-current' : '';
        className += datesEq(date, selectedDate) ? ' dp-selected' : '';
        className += isDisabled ? ' dp-day-disabled' : '';
        className += isToday ? ' dp-day-today' : '';
        className += ' ' + opts.dateClass(date, dp);
        return '<button tabindex="-1" type="button" class="' + className + '" data-date="' + date.getTime() + '">' + date.getDate() + '</button>';
      }) + '</div>' + '<footer class="dp-cal-footer">' + '<button tabindex="-1" type="button" class="dp-today">' + lang.today + '</button>' + '<button tabindex="-1" type="button" class="dp-clear">' + lang.clear + '</button>' + '<button tabindex="-1" type="button" class="dp-close">' + lang.close + '</button>' + '</footer>' + '</div>';
    }
    /**
     * keyDown handles the key down event for the day-picker
     *
     * @param {Event} e
     * @param {DatePickerContext} dp
     */


    function keyDown(e, dp) {
      var key = e.keyCode;
      var shiftBy = key === Key.left ? -1 : key === Key.right ? 1 : key === Key.up ? -7 : key === Key.down ? 7 : 0;

      if (key === Key.esc) {
        dp.close();
      } else if (shiftBy) {
        e.preventDefault();
        dp.setState({
          hilightedDate: shiftDay(dp.state.hilightedDate, shiftBy)
        });
      }
    }

    function selectToday(e, dp) {
      dp.setState({
        selectedDate: now()
      });
    }

    function clear(e, dp) {
      dp.setState({
        selectedDate: null
      });
    }

    function close(e, dp) {
      dp.close();
    }

    function showMonthPicker(e, dp) {
      dp.setState({
        view: 'month'
      });
    }

    function showYearPicker(e, dp) {
      dp.setState({
        view: 'year'
      });
    }

    function gotoNextMonth(e, dp) {
      var hilightedDate = dp.state.hilightedDate;
      dp.setState({
        hilightedDate: shiftMonth(hilightedDate, 1)
      });
    }

    function gotoPrevMonth(e, dp) {
      var hilightedDate = dp.state.hilightedDate;
      dp.setState({
        hilightedDate: shiftMonth(hilightedDate, -1)
      });
    }

    function selectDay(e, dp) {
      dp.setState({
        selectedDate: new Date(parseInt(e.target.getAttribute('data-date')))
      });
    }

    function mapDays(currentDate, dayOffset, fn) {
      var result = '';
      var iter = new Date(currentDate);
      iter.setDate(1);
      iter.setDate(1 - iter.getDay() + dayOffset); // If we are showing monday as the 1st of the week,
      // and the monday is the 2nd of the month, the sunday won't
      // show, so we need to shift backwards

      if (dayOffset && iter.getDate() === dayOffset + 1) {
        iter.setDate(dayOffset - 6);
      } // We are going to have 6 weeks always displayed to keep a consistent
      // calendar size


      for (var day = 0; day < 6 * 7; ++day) {
        result += fn(iter);
        iter.setDate(iter.getDate() + 1);
      }

      return result;
    }
    /**
     * @file Manages the month-picker view.
     */


    var monthPicker = {
      onKeyDown: keyDown$1,
      onClick: {
        'dp-month': onChooseMonth
      },
      render: render$1
    };

    function onChooseMonth(e, dp) {
      dp.setState({
        hilightedDate: setMonth(dp.state.hilightedDate, parseInt(e.target.getAttribute('data-month'))),
        view: 'day'
      });
    }
    /**
     * render renders the month picker as an HTML string
     *
     * @param {DatePickerContext} dp the date picker context
     * @returns {string}
     */


    function render$1(dp) {
      var opts = dp.opts;
      var lang = opts.lang;
      var months = lang.months;
      var currentDate = dp.state.hilightedDate;
      var currentMonth = currentDate.getMonth();
      return '<div class="dp-months">' + months.map(function (month, i) {
        var className = 'dp-month';
        className += currentMonth === i ? ' dp-current' : '';
        return '<button tabindex="-1" type="button" class="' + className + '" data-month="' + i + '">' + month + '</button>';
      }).join('') + '</div>';
    }
    /**
     * keyDown handles keydown events that occur in the month picker
     *
     * @param {Event} e
    * @param {DatePickerContext} dp
     */


    function keyDown$1(e, dp) {
      var key = e.keyCode;
      var shiftBy = key === Key.left ? -1 : key === Key.right ? 1 : key === Key.up ? -3 : key === Key.down ? 3 : 0;

      if (key === Key.esc) {
        dp.setState({
          view: 'day'
        });
      } else if (shiftBy) {
        e.preventDefault();
        dp.setState({
          hilightedDate: shiftMonth(dp.state.hilightedDate, shiftBy, true)
        });
      }
    }
    /**
     * @file Manages the year-picker view.
     */


    var yearPicker = {
      render: render$2,
      onKeyDown: keyDown$2,
      onClick: {
        'dp-year': onChooseYear
      }
    };
    /**
     * view renders the year picker as an HTML string.
     *
     * @param {DatePickerContext} dp the date picker context
     * @returns {string}
     */

    function render$2(dp) {
      var state = dp.state;
      var currentYear = state.hilightedDate.getFullYear();
      var selectedYear = state.selectedDate.getFullYear();
      return '<div class="dp-years">' + mapYears(dp, function (year) {
        var className = 'dp-year';
        className += year === currentYear ? ' dp-current' : '';
        className += year === selectedYear ? ' dp-selected' : '';
        return '<button tabindex="-1" type="button" class="' + className + '" data-year="' + year + '">' + year + '</button>';
      }) + '</div>';
    }

    function onChooseYear(e, dp) {
      dp.setState({
        hilightedDate: setYear(dp.state.hilightedDate, parseInt(e.target.getAttribute('data-year'))),
        view: 'day'
      });
    }

    function keyDown$2(e, dp) {
      var key = e.keyCode;
      var opts = dp.opts;
      var shiftBy = key === Key.left || key === Key.up ? 1 : key === Key.right || key === Key.down ? -1 : 0;

      if (key === Key.esc) {
        dp.setState({
          view: 'day'
        });
      } else if (shiftBy) {
        e.preventDefault();
        var shiftedYear = shiftYear(dp.state.hilightedDate, shiftBy);
        dp.setState({
          hilightedDate: constrainDate(shiftedYear, opts.min, opts.max)
        });
      }
    }

    function mapYears(dp, fn) {
      var result = '';
      var max = dp.opts.max.getFullYear();

      for (var i = max; i >= dp.opts.min.getFullYear(); --i) {
        result += fn(i);
      }

      return result;
    }
    /**
     * @file Defines the base date picker behavior, overridden by various modes.
     */


    var views = {
      day: dayPicker,
      year: yearPicker,
      month: monthPicker
    };

    function BaseMode(input, emit, opts) {
      var detatchInputEvents; // A function that detaches all events from the input

      var closing = false; // A hack to prevent calendar from re-opening when closing.

      var selectedDate; // The currently selected date

      var dp = {
        // The root DOM element for the date picker, initialized on first open.
        el: undefined,
        opts: opts,
        shouldFocusOnBlur: true,
        shouldFocusOnRender: true,
        state: initialState(),
        adjustPosition: noop,
        containerHTML: '<div class="dp"></div>',
        attachToDom: function attachToDom() {
          opts.appendTo.appendChild(dp.el);
        },
        updateInput: function updateInput(selectedDate) {
          var e = new CustomEvent('change', {
            bubbles: true
          });
          e.simulated = true;
          input.value = selectedDate ? opts.format(selectedDate) : '';
          input.dispatchEvent(e);
        },
        computeSelectedDate: function computeSelectedDate() {
          return opts.parse(input.value);
        },
        currentView: function currentView() {
          return views[dp.state.view];
        },
        open: function open() {
          if (closing) {
            return;
          }

          if (!dp.el) {
            dp.el = createContainerElement(opts, dp.containerHTML);
            attachContainerEvents(dp);
          }

          selectedDate = constrainDate(dp.computeSelectedDate(), opts.min, opts.max);
          dp.state.hilightedDate = selectedDate || opts.hilightedDate;
          dp.state.view = 'day';
          dp.attachToDom();
          dp.render();
          emit('open');
        },
        isVisible: function isVisible() {
          return !!dp.el && !!dp.el.parentNode;
        },
        hasFocus: function hasFocus() {
          var focused = document.activeElement;
          return dp.el && dp.el.contains(focused) && focused.className.indexOf('dp-focuser') < 0;
        },
        shouldHide: function shouldHide() {
          return dp.isVisible();
        },
        close: function close(becauseOfBlur) {
          var el = dp.el;

          if (!dp.isVisible()) {
            return;
          }

          if (el) {
            var parent = el.parentNode;
            parent && parent.removeChild(el);
          }

          closing = true;

          if (becauseOfBlur && dp.shouldFocusOnBlur) {
            focusInput(input);
          } // When we close, the input often gains refocus, which
          // can then launch the date picker again, so we buffer
          // a bit and don't show the date picker within N ms of closing


          setTimeout(function () {
            closing = false;
          }, 100);
          emit('close');
        },
        destroy: function destroy() {
          dp.close();
          detatchInputEvents();
        },
        render: function render() {
          if (!dp.el) {
            return;
          }

          var hadFocus = dp.hasFocus();
          var html = dp.currentView().render(dp);
          html && (dp.el.firstChild.innerHTML = html);
          dp.adjustPosition();

          if (hadFocus || dp.shouldFocusOnRender) {
            focusCurrent(dp);
          }
        },
        // Conceptually similar to setState in React, updates
        // the view state and re-renders.
        setState: function setState(state) {
          for (var key in state) {
            dp.state[key] = state[key];
          }

          emit('statechange');
          dp.render();
        }
      };
      detatchInputEvents = attachInputEvents(input, dp); // Builds the initial view state
      // selectedDate is a special case and causes changes to hilightedDate
      // hilightedDate is set on open, so remains undefined initially
      // view is the current view (day, month, year)

      function initialState() {
        return {
          get selectedDate() {
            return selectedDate;
          },

          set selectedDate(dt) {
            if (dt && !opts.inRange(dt)) {
              return;
            }

            if (dt) {
              selectedDate = new Date(dt);
              dp.state.hilightedDate = selectedDate;
            } else {
              selectedDate = dt;
            }

            dp.updateInput(selectedDate);
            emit('select');
            dp.close();
          },

          view: 'day'
        };
      }

      return dp;
    }

    function createContainerElement(opts, containerHTML) {
      var el = document.createElement('div');
      el.className = opts.mode;
      el.innerHTML = containerHTML;
      return el;
    }

    function attachInputEvents(input, dp) {
      var bufferShow = bufferFn(5, function () {
        if (dp.shouldHide()) {
          dp.close();
        } else {
          dp.open();
        }
      });
      var off = [on('blur', input, bufferFn(150, function () {
        if (!dp.hasFocus()) {
          dp.close(true);
        }
      })), on('mousedown', input, function () {
        if (input === document.activeElement) {
          bufferShow();
        }
      }), on('focus', input, bufferShow), on('input', input, function (e) {
        var date = dp.opts.parse(e.target.value);
        isNaN(date) || dp.setState({
          hilightedDate: date
        });
      })]; // Unregister all events that were registered above.

      return function () {
        off.forEach(function (f) {
          f();
        });
      };
    }

    function focusCurrent(dp) {
      var current = dp.el.querySelector('.dp-current');
      return current && current.focus();
    }

    function attachContainerEvents(dp) {
      var el = dp.el;
      var calEl = el.querySelector('.dp'); // Hack to get iOS to show active CSS states

      el.ontouchstart = noop;

      function onClick(e) {
        e.target.className.split(' ').forEach(function (evt) {
          var handler = dp.currentView().onClick[evt];
          handler && handler(e, dp);
        });
      } // The calender fires a blur event *every* time we redraw
      // this means we need to buffer the blur event to see if
      // it still has no focus after redrawing, and only then
      // do we return focus to the input. A possible other approach
      // would be to set context.redrawing = true on redraw and
      // set it to false in the blur event.


      on('blur', calEl, bufferFn(150, function () {
        if (!dp.hasFocus()) {
          dp.close(true);
        }
      }));
      on('keydown', el, function (e) {
        if (e.keyCode === Key.enter) {
          onClick(e);
        } else {
          dp.currentView().onKeyDown(e, dp);
        }
      }); // If the user clicks in non-focusable space, but
      // still within the date picker, we don't want to
      // hide, so we need to hack some things...

      on('mousedown', calEl, function (e) {
        e.target.focus && e.target.focus(); // IE hack

        if (document.activeElement !== e.target) {
          e.preventDefault();
          focusCurrent(dp);
        }
      });
      on('click', el, onClick);
    }

    function focusInput(input) {
      // When the modal closes, we need to focus the original input so the
      // user can continue tabbing from where they left off.
      input.focus(); // iOS zonks out if we don't blur the input, so...

      if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {
        input.blur();
      }
    }
    /**
     * @file Defines the modal date picker behavior.
     */


    function ModalMode(input, emit, opts) {
      var dp = BaseMode(input, emit, opts); // In modal mode, users really shouldn't be able to type in
      // the input, as all input is done via the calendar.

      input.readonly = true; // In modal mode, we need to know when the user has tabbed
      // off the end of the calendar, and set focus to the original
      // input. To do this, we add a special element to the DOM.
      // When the user tabs off the bottom of the calendar, they
      // will tab onto this element.

      dp.containerHTML += '<a href="#" class="dp-focuser">.</a>';
      return dp;
    }
    /**
     * @file Defines the dropdown date picker behavior.
     */


    function DropdownMode(input, emit, opts) {
      var dp = BaseMode(input, emit, opts);
      dp.shouldFocusOnBlur = false;
      Object.defineProperty(dp, 'shouldFocusOnRender', {
        get: function get() {
          return input !== document.activeElement;
        }
      });

      dp.adjustPosition = function () {
        autoPosition(input, dp);
      };

      return dp;
    }

    function autoPosition(input, dp) {
      var inputPos = input.getBoundingClientRect();
      var win = window;
      adjustCalY(dp, inputPos, win);
      adjustCalX(dp, inputPos, win);
      dp.el.style.visibility = '';
    }

    function adjustCalX(dp, inputPos, win) {
      var cal = dp.el;
      var scrollLeft = win.pageXOffset;
      var inputLeft = inputPos.left + scrollLeft;
      var maxRight = win.innerWidth + scrollLeft;
      var offsetWidth = cal.offsetWidth;
      var calRight = inputLeft + offsetWidth;
      var shiftedLeft = maxRight - offsetWidth;
      var left = calRight > maxRight && shiftedLeft > 0 ? shiftedLeft : inputLeft;
      cal.style.left = left + 'px';
    }

    function adjustCalY(dp, inputPos, win) {
      var cal = dp.el;
      var scrollTop = win.pageYOffset;
      var inputTop = scrollTop + inputPos.top;
      var calHeight = cal.offsetHeight;
      var belowTop = inputTop + inputPos.height + 8;
      var aboveTop = inputTop - calHeight - 8;
      var isAbove = aboveTop > 0 && belowTop + calHeight > scrollTop + win.innerHeight;
      var top = isAbove ? aboveTop : belowTop;

      if (cal.classList) {
        cal.classList.toggle('dp-is-above', isAbove);
        cal.classList.toggle('dp-is-below', !isAbove);
      }

      cal.style.top = top + 'px';
    }
    /**
     * @file Defines the permanent date picker behavior.
     */


    function PermanentMode(root, emit, opts) {
      var dp = BaseMode(root, emit, opts);
      dp.close = noop;
      dp.updateInput = noop;
      dp.shouldFocusOnRender = opts.shouldFocusOnRender;

      dp.computeSelectedDate = function () {
        return opts.hilightedDate;
      };

      dp.attachToDom = function () {
        root.appendChild(dp.el);
      };

      dp.open();
      return dp;
    }
    /**
     * @file Defines the various date picker modes (modal, dropdown, permanent)
     */


    function Mode(input, emit, opts) {
      input = input && input.tagName ? input : document.querySelector(input);

      if (opts.mode === 'dp-modal') {
        return ModalMode(input, emit, opts);
      }

      if (opts.mode === 'dp-below') {
        return DropdownMode(input, emit, opts);
      }

      if (opts.mode === 'dp-permanent') {
        return PermanentMode(input, emit, opts);
      }
    }
    /**
     * @file Defines simple event emitter behavior.
     */

    /**
     * Emitter constructs a new emitter object which has on/off methods.
     *
     * @returns {EventEmitter}
     */


    function Emitter() {
      var handlers = {};

      function onOne(name, handler) {
        (handlers[name] = handlers[name] || []).push(handler);
      }

      function onMany(fns) {
        for (var name in fns) {
          onOne(name, fns[name]);
        }
      }

      return {
        on: function on(name, handler) {
          if (handler) {
            onOne(name, handler);
          } else {
            onMany(name);
          }

          return this;
        },
        emit: function emit(name, arg) {
          (handlers[name] || []).forEach(function (handler) {
            handler(name, arg);
          });
        },
        off: function off(name, handler) {
          if (!name) {
            handlers = {};
          } else if (!handler) {
            handlers[name] = [];
          } else {
            handlers[name] = (handlers[name] || []).filter(function (h) {
              return h !== handler;
            });
          }

          return this;
        }
      };
    }
    /**
     * @file The root date picker file, defines public exports for the library.
     */

    /**
    * The date picker language configuration
    * @typedef {Object} LangOptions
    * @property {Array.<string>} [days] - Days of the week
    * @property {Array.<string>} [months] - Months of the year
    * @property {string} today - The label for the 'today' button
    * @property {string} close - The label for the 'close' button
    * @property {string} clear - The label for the 'clear' button
    */

    /**
    * The configuration options for a date picker.
    *
    * @typedef {Object} DatePickerOptions
    * @property {LangOptions} [lang] - Configures the label text, defaults to English
    * @property {('dp-modal'|'dp-below'|'dp-permanent')} [mode] - The date picker mode, defaults to 'dp-modal'
    * @property {(string|Date)} [hilightedDate] - The date to hilight if no date is selected
    * @property {function(string|Date):Date} [parse] - Parses a date, the complement of the "format" function
    * @property {function(Date):string} [format] - Formats a date for displaying to user
    * @property {function(Date):string} [dateClass] - Associates a custom CSS class with a date
    * @property {function(Date):boolean} [inRange] - Indicates whether or not a date is selectable
    * @property {(string|Date)} [min] - The minimum selectable date (inclusive, default 100 years ago)
    * @property {(string|Date)} [max] - The maximum selectable date (inclusive, default 100 years from now)
    */

    /**
    * The state values for the date picker
    *
    * @typedef {Object} DatePickerState
    * @property {string} view - The current view 'day' | 'month' | 'year'
    * @property {Date} selectedDate - The date which has been selected by the user
    * @property {Date} hilightedDate - The date which is currently hilighted / active
    */

    /**
    * An instance of TinyDatePicker
    *
    * @typedef {Object} DatePicker
    * @property {DatePickerState} state - The values currently displayed.
    * @property {function} on - Adds an event handler
    * @property {function} off - Removes an event handler
    * @property {function} setState - Changes the current state of the date picker
    * @property {function} open - Opens the date picker
    * @property {function} close - Closes the date picker
    * @property {function} destroy - Destroys the date picker (removing all handlers from the input, too)
    */

    /**
     * TinyDatePicker constructs a new date picker for the specified input
     *
     * @param {HTMLElement | string} input The input or CSS selector associated with the datepicker
     * @param {DatePickerOptions} opts The options for initializing the date picker
     * @returns {DatePicker}
     */


    function TinyDatePicker(input, opts) {
      var emitter = Emitter();
      var options = DatePickerOptions(opts);
      var mode = Mode(input, emit, options);
      var me = {
        get state() {
          return mode.state;
        },

        on: emitter.on,
        off: emitter.off,
        setState: mode.setState,
        open: mode.open,
        close: mode.close,
        destroy: mode.destroy
      };

      function emit(evt) {
        emitter.emit(evt, me);
      }

      return me;
    }

    return TinyDatePicker;
  });
});

/** Detect free variable `global` from Node.js. */

var freeGlobal = _typeof(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal;

/** Detect free variable `self`. */

var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = _freeGlobal || freeSelf || Function('return this')();
var _root = root;

/** Built-in value references. */

var _Symbol2 = _root.Symbol;
var _Symbol = _Symbol2;

/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty$1 = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty$1.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

var _getRawTag = getRawTag;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString$1 = objectProto$1.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

var _objectToString = objectToString;

/** `Object#toString` result references. */

var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag$1 && symToStringTag$1 in Object(value) ? _getRawTag(value) : _objectToString(value);
}

var _baseGetTag = baseGetTag;

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = _typeof(value);

  return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject;

/** `Object#toString` result references. */

var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction(value) {
  if (!isObject_1(value)) {
    return false;
  } // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.


  var tag = _baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction;

/** Used to detect overreaching core-js shims. */

var coreJsData = _root['__core-js_shared__'];
var _coreJsData = coreJsData;

/** Used to detect methods masquerading as native. */

var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

var _isMasked = isMasked;

/** Used for built-in method references. */
var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}

var _toSource = toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */

var funcProto$1 = Function.prototype,
    objectProto$2 = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString$1 = funcProto$1.toString;
/** Used to check objects for own properties. */

var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$2).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

function baseIsNative(value) {
  if (!isObject_1(value) || _isMasked(value)) {
    return false;
  }

  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
  return pattern.test(_toSource(value));
}

var _baseIsNative = baseIsNative;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

var _getValue = getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

function getNative(object, key) {
  var value = _getValue(object, key);
  return _baseIsNative(value) ? value : undefined;
}

var _getNative = getNative;

var defineProperty = function () {
  try {
    var func = _getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();

var _defineProperty$1 = defineProperty;

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty$1) {
    _defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

var _baseAssignValue = baseAssignValue;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

var eq_1 = eq;

/** Used for built-in method references. */

var objectProto$3 = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

function assignValue(object, key, value) {
  var objValue = object[key];

  if (!(hasOwnProperty$3.call(object, key) && eq_1(objValue, value)) || value === undefined && !(key in object)) {
    _baseAssignValue(object, key, value);
  }
}

var _assignValue = assignValue;

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */

function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }

    if (isNew) {
      _baseAssignValue(object, key, newValue);
    } else {
      _assignValue(object, key, newValue);
    }
  }

  return object;
}

var _copyObject = copyObject;

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

var identity_1 = identity;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);

    case 1:
      return func.call(thisArg, args[0]);

    case 2:
      return func.call(thisArg, args[0], args[1]);

    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }

  return func.apply(thisArg, args);
}

var _apply = apply;

/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeMax = Math.max;
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */

function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
  return function () {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }

    index = -1;
    var otherArgs = Array(start + 1);

    while (++index < start) {
      otherArgs[index] = args[index];
    }

    otherArgs[start] = transform(array);
    return _apply(func, this, otherArgs);
  };
}

var _overRest = overRest;

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function () {
    return value;
  };
}

var constant_1 = constant;

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */

var baseSetToString = !_defineProperty$1 ? identity_1 : function (func, string) {
  return _defineProperty$1(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant_1(string),
    'writable': true
  });
};
var _baseSetToString = baseSetToString;

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeNow = Date.now;
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */

function shortOut(func) {
  var count = 0,
      lastCalled = 0;
  return function () {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;

    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }

    return func.apply(undefined, arguments);
  };
}

var _shortOut = shortOut;

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */

var setToString = _shortOut(_baseSetToString);
var _setToString = setToString;

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */

function baseRest(func, start) {
  return _setToString(_overRest(func, start, identity_1), func + '');
}

var _baseRest = baseRest;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

var isLength_1 = isLength;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

function isArrayLike(value) {
  return value != null && isLength_1(value.length) && !isFunction_1(value);
}

var isArrayLike_1 = isArrayLike;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

function isIndex(value, length) {
  var type = _typeof(value);

  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

var _isIndex = isIndex;

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */

function isIterateeCall(value, index, object) {
  if (!isObject_1(object)) {
    return false;
  }

  var type = _typeof(index);

  if (type == 'number' ? isArrayLike_1(object) && _isIndex(index, object.length) : type == 'string' && index in object) {
    return eq_1(object[index], value);
  }

  return false;
}

var _isIterateeCall = isIterateeCall;

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */

function createAssigner(assigner) {
  return _baseRest(function (object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;
    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

    if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }

    object = Object(object);

    while (++index < length) {
      var source = sources[index];

      if (source) {
        assigner(object, source, index, customizer);
      }
    }

    return object;
  });
}

var _createAssigner = createAssigner;

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$4;
  return value === proto;
}

var _isPrototype = isPrototype;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }

  return result;
}

var _baseTimes = baseTimes;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && _typeof(value) == 'object';
}

var isObjectLike_1 = isObjectLike;

/** `Object#toString` result references. */

var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

function baseIsArguments(value) {
  return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
}

var _baseIsArguments = baseIsArguments;

/** Used for built-in method references. */

var objectProto$5 = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
/** Built-in value references. */

var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */

var isArguments = _baseIsArguments(function () {
  return arguments;
}()) ? _baseIsArguments : function (value) {
  return isObjectLike_1(value) && hasOwnProperty$4.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
var isArguments_1 = isArguments;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
var isArray_1 = isArray;

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

var stubFalse_1 = stubFalse;

var isBuffer_1 = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;
  /** Detect free variable `module`. */

  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
  /** Detect the popular CommonJS extension `module.exports`. */

  var moduleExports = freeModule && freeModule.exports === freeExports;
  /** Built-in value references. */

  var Buffer = moduleExports ? _root.Buffer : undefined;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */

  var isBuffer = nativeIsBuffer || stubFalse_1;
  module.exports = isBuffer;
});

/** `Object#toString` result references. */

var argsTag$1 = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

function baseIsTypedArray(value) {
  return isObjectLike_1(value) && isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
}

var _baseIsTypedArray = baseIsTypedArray;

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

var _baseUnary = baseUnary;

var _nodeUtil = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;
  /** Detect free variable `module`. */

  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
  /** Detect the popular CommonJS extension `module.exports`. */

  var moduleExports = freeModule && freeModule.exports === freeExports;
  /** Detect free variable `process` from Node.js. */

  var freeProcess = moduleExports && _freeGlobal.process;
  /** Used to access faster Node.js helpers. */

  var nodeUtil = function () {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      } // Legacy `process.binding('util')` for Node.js < 10.


      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  module.exports = nodeUtil;
});

/* Node.js helper references. */

var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */

var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;
var isTypedArray_1 = isTypedArray;

/** Used for built-in method references. */

var objectProto$6 = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

function arrayLikeKeys(value, inherited) {
  var isArr = isArray_1(value),
      isArg = !isArr && isArguments_1(value),
      isBuff = !isArr && !isArg && isBuffer_1(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? _baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$5.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    _isIndex(key, length)))) {
      result.push(key);
    }
  }

  return result;
}

var _arrayLikeKeys = arrayLikeKeys;

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

var _overArg = overArg;

/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeKeys = _overArg(Object.keys, Object);
var _nativeKeys = nativeKeys;

/** Used for built-in method references. */

var objectProto$7 = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty$6 = objectProto$7.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeys(object) {
  if (!_isPrototype(object)) {
    return _nativeKeys(object);
  }

  var result = [];

  for (var key in Object(object)) {
    if (hasOwnProperty$6.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }

  return result;
}

var _baseKeys = baseKeys;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

function keys(object) {
  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
}

var keys_1 = keys;

/** Used for built-in method references. */

var objectProto$8 = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty$7 = objectProto$8.hasOwnProperty;
/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */

var assign = _createAssigner(function (object, source) {
  if (_isPrototype(source) || isArrayLike_1(source)) {
    _copyObject(source, keys_1(source), object);
    return;
  }

  for (var key in source) {
    if (hasOwnProperty$7.call(source, key)) {
      _assignValue(object, key, source[key]);
    }
  }
});
var assign_1 = assign;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }

  return result;
}

var _arrayMap = arrayMap;

/** `Object#toString` result references. */

var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return _typeof(value) == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag;
}

var isSymbol_1 = isSymbol;

/** Used as references for various `Number` constants. */

var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */

var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isArray_1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return _arrayMap(value, baseToString) + '';
  }

  if (isSymbol_1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

var _baseToString = baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

function toString(value) {
  return value == null ? '' : _baseToString(value);
}

var toString_1 = toString;

/** Used to generate unique IDs. */

var idCounter = 0;
/**
 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {string} [prefix=''] The value to prefix the ID with.
 * @returns {string} Returns the unique ID.
 * @example
 *
 * _.uniqueId('contact_');
 * // => 'contact_104'
 *
 * _.uniqueId();
 * // => '105'
 */

function uniqueId(prefix) {
  var id = ++idCounter;
  return toString_1(prefix) + id;
}

var uniqueId_1 = uniqueId;

var SprkErrorContainer = function SprkErrorContainer(_ref) {
  var additionalClasses = _ref.additionalClasses,
      analyticsString = _ref.analyticsString,
      idString = _ref.idString,
      message = _ref.message,
      id = _ref.id;
  return /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-b-ErrorContainer', additionalClasses),
    "data-analytics": analyticsString,
    "data-id": idString,
    id: id
  }, /*#__PURE__*/React__default.createElement(SprkIcon, {
    additionalClasses: "sprk-c-Icon--m sprk-b-ErrorIcon",
    iconName: "exclamation-filled-small"
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "sprk-b-ErrorText"
  }, message));
};

SprkErrorContainer.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * Configured by parent and assigned to the `id` attribute.
   */
  id: propTypes.string.isRequired,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Error text to show.
   */
  message: propTypes.string.isRequired
};
SprkErrorContainer.defaultProps = {
  additionalClasses: '',
  analyticsString: '',
  idString: ''
};

var SprkInputIconCheck = function SprkInputIconCheck(_ref) {
  var children = _ref.children,
      leadingIcon = _ref.leadingIcon,
      textIcon = _ref.textIcon,
      narrowWidth = _ref.narrowWidth,
      iconRight = _ref.iconRight;

  if (leadingIcon || textIcon) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: classnames({
        'sprk-b-InputContainer__icon-container': true,
        'sprk-b-TextInputIconContainer--has-text-icon': textIcon,
        'sprk-b-InputContainer__icon-container--narrow': narrowWidth
      })
    }, leadingIcon && /*#__PURE__*/React__default.createElement(SprkIcon, {
      iconName: leadingIcon,
      additionalClasses: classnames({
        'sprk-b-InputContainer__icon': true,
        'sprk-c-Icon--m sprk-c-Icon--stroke-current-color': true,
        'sprk-b-InputContainer__icon--right': iconRight
      })
    }), children);
  }

  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children);
};

SprkInputIconCheck.propTypes = {
  leadingIcon: propTypes.string,
  textIcon: propTypes.bool,
  narrowWidth: propTypes.bool,
  iconRight: propTypes.bool
};

var SprkInputLabel = function SprkInputLabel(_ref) {
  var id = _ref.id,
      hiddenLabel = _ref.hiddenLabel,
      label = _ref.label,
      disabled = _ref.disabled;
  return /*#__PURE__*/React__default.createElement("label", {
    htmlFor: id,
    className: classnames('sprk-b-Label', {
      'sprk-u-ScreenReaderText': hiddenLabel,
      'sprk-b-Label--disabled': disabled
    })
  }, label);
};

SprkInputLabel.propTypes = {
  disabled: propTypes.bool,
  hiddenLabel: propTypes.bool,
  label: propTypes.string,
  id: propTypes.string
};

var SprkLabelLocationCheck = function SprkLabelLocationCheck(_ref) {
  var children = _ref.children,
      type = _ref.type,
      label = _ref.label,
      hiddenLabel = _ref.hiddenLabel,
      disabled = _ref.disabled,
      id = _ref.id;

  if (type === 'hugeTextInput' || type === 'hugeSelect') {
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children, /*#__PURE__*/React__default.createElement(SprkInputLabel, {
      id: id,
      hiddenLabel: hiddenLabel,
      label: label,
      disabled: disabled
    }));
  }

  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(SprkInputLabel, {
    id: id,
    hiddenLabel: hiddenLabel,
    label: label,
    disabled: disabled
  }), children);
};

SprkLabelLocationCheck.defaultProps = {
  disabled: false,
  hiddenLabel: false
};
SprkLabelLocationCheck.propTypes = {
  type: propTypes.string,
  label: propTypes.string,
  id: propTypes.string,
  disabled: propTypes.bool,
  hiddenLabel: propTypes.bool
};

var SprkInputElement = /*#__PURE__*/function (_Component) {
  _inherits(SprkInputElement, _Component);

  var _super = _createSuper(SprkInputElement);

  function SprkInputElement(props) {
    var _this;

    _classCallCheck(this, SprkInputElement);

    var value = props.value;
    var defaultValue = props.defaultValue;
    _this = _super.call(this, props);

    if (value || defaultValue) {
      _this.state = {
        hasValue: true
      };
    } else {
      _this.state = {
        hasValue: false
      };
    }

    return _this;
  }

  _createClass(SprkInputElement, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          analyticsString = _this$props.analyticsString,
          children = _this$props.children,
          errorContainerId = _this$props.errorContainerId,
          type = _this$props.type,
          id = _this$props.id,
          formatter = _this$props.formatter,
          forwardedRef = _this$props.forwardedRef,
          iconRight = _this$props.iconRight,
          idString = _this$props.idString,
          leadingIcon = _this$props.leadingIcon,
          value = _this$props.value,
          textIcon = _this$props.textIcon,
          hiddenLabel = _this$props.hiddenLabel,
          disabled = _this$props.disabled,
          valid = _this$props.valid,
          rest = _objectWithoutProperties(_this$props, ["analyticsString", "children", "errorContainerId", "type", "id", "formatter", "forwardedRef", "iconRight", "idString", "leadingIcon", "value", "textIcon", "hiddenLabel", "disabled", "valid"]);

      var hasValue = this.state.hasValue;
      var Element = type === 'textarea' ? 'textarea' : 'input'; // Adds class for IE and Edge

      var handleOnBlur = function handleOnBlur(e) {
        if (e.target.value.length > 0) {
          _this2.setState({
            hasValue: true
          });
        } else {
          _this2.setState({
            hasValue: false
          });
        }
      };

      return /*#__PURE__*/React__default.createElement(Element, _extends({
        className: classnames('sprk-u-Width-100', {
          'sprk-b-TextArea': type === 'textarea',
          'sprk-b-TextInput sprk-b-InputContainer__input': type !== 'textarea',
          'sprk-b-TextInput--label-hidden': type === 'hugeTextInput' && hiddenLabel,
          'sprk-b-TextInput--error': type !== 'textarea' && !valid,
          'sprk-b-TextInput--has-svg-icon': type !== 'textarea' && leadingIcon.length > 0,
          'sprk-b-TextInput--has-text-icon': type !== 'textarea' && textIcon,
          'sprk-b-Input--has-floating-label': hasValue && type === 'hugeTextInput',
          'sprk-b-InputContainer__input--has-icon-right': iconRight
        }),
        type: type,
        id: id,
        disabled: disabled,
        ref: forwardedRef,
        "data-id": idString,
        "data-analytics": analyticsString,
        "aria-invalid": !valid,
        "aria-describedby": errorContainerId,
        value: valid && formatter(value) ? formatter(value) : value,
        onBlur: function onBlur(e) {
          return handleOnBlur(e);
        }
      }, rest), children);
    }
  }]);

  return SprkInputElement;
}(React.Component);

SprkInputElement.propTypes = {
  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * Configured by parent and assigned to the `aria-describedby` attribute.
   */
  errorContainerId: propTypes.string,

  /**
   * A function supplied will be passed the value of the input and then executed, if the valid prop is true. The value returned will be assigned to the value of the input.
   */
  formatter: propTypes.func,

  /**
   * Determines type of Input.
   */
  type: propTypes.string,

  /**
   * 	Positions the leadingIcon inside of the input to the right.
   */
  iconRight: propTypes.bool,

  /**
   * Configured by parent and assigned to the `id` attribute.
   */
  id: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * The name of the icon, when supplied,
   * will be rendered inside the input element.
   */
  leadingIcon: propTypes.string,

  /**
   * If true, will render the currency icon inside the input element.
   */
  textIcon: propTypes.bool,

  /**
   * Determines whether to render the
   * component in the valid or the error state.
   */
  valid: propTypes.bool
};

var SprkTextInput = /*#__PURE__*/function (_Component) {
  _inherits(SprkTextInput, _Component);

  var _super = _createSuper(SprkTextInput);

  function SprkTextInput(props) {
    var _this;

    _classCallCheck(this, SprkTextInput);

    _this = _super.call(this, props);
    _this.state = {
      id: uniqueId_1(),
      errorContainerId: uniqueId_1()
    };
    return _this;
  }

  _createClass(SprkTextInput, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          additionalClasses = _this$props.additionalClasses,
          analyticsString = _this$props.analyticsString,
          children = _this$props.children,
          errorMessage = _this$props.errorMessage,
          formatter = _this$props.formatter,
          forwardedRef = _this$props.forwardedRef,
          helperText = _this$props.helperText,
          hiddenLabel = _this$props.hiddenLabel,
          iconRight = _this$props.iconRight,
          idString = _this$props.idString,
          label = _this$props.label,
          disabled = _this$props.disabled,
          leadingIcon = _this$props.leadingIcon,
          narrowWidth = _this$props.narrowWidth,
          textIcon = _this$props.textIcon,
          type = _this$props.type,
          valid = _this$props.valid,
          value = _this$props.value,
          rest = _objectWithoutProperties(_this$props, ["additionalClasses", "analyticsString", "children", "errorMessage", "formatter", "forwardedRef", "helperText", "hiddenLabel", "iconRight", "idString", "label", "disabled", "leadingIcon", "narrowWidth", "textIcon", "type", "valid", "value"]);

      var _this$state = this.state,
          id = _this$state.id,
          errorContainerId = _this$state.errorContainerId;
      return /*#__PURE__*/React__default.createElement("div", {
        className: classnames('sprk-b-InputContainer', additionalClasses, {
          'sprk-b-InputContainer--huge': type === 'hugeTextInput'
        })
      }, /*#__PURE__*/React__default.createElement(SprkInputIconCheck, {
        leadingIcon: leadingIcon,
        textIcon: textIcon,
        narrowWidth: narrowWidth,
        iconRight: iconRight
      }, /*#__PURE__*/React__default.createElement(SprkLabelLocationCheck, {
        type: type,
        label: label,
        leadingIcon: leadingIcon,
        hiddenLabel: hiddenLabel,
        id: id,
        disabled: disabled
      }, /*#__PURE__*/React__default.createElement(SprkInputElement, _extends({
        id: id,
        analyticsString: analyticsString,
        idString: idString,
        forwardedRef: forwardedRef,
        type: type,
        formatter: formatter,
        errorContainerId: errorContainerId,
        hiddenLabel: hiddenLabel,
        valid: valid,
        leadingIcon: leadingIcon,
        textIcon: textIcon,
        value: value,
        iconRight: iconRight,
        disabled: disabled
      }, rest)))), children, helperText.length > 0 && /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-b-HelperText"
      }, helperText), !valid && /*#__PURE__*/React__default.createElement(SprkErrorContainer, {
        id: errorContainerId,
        message: errorMessage
      }));
    }
  }]);

  return SprkTextInput;
}(React.Component);

SprkTextInput.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /** Content to render inside of the component. */
  children: propTypes.node,

  /**
   * The error message that will display
   * while in its error state.
   */
  errorMessage: propTypes.string,

  /**
   * A function supplied will be passed the value of the input and then executed, if the valid prop is true. The value returned will be assigned to the value of the input.
   */
  formatter: propTypes.func,

  /**
   * A ref passed in will be attached to the input element of the rendered component.
   */
  forwardedRef: propTypes.shape(),

  /**
   * 	Text that appears below the input, intended to provide more information to a user.
   */
  helperText: propTypes.string,

  /**
   * If true, will visually hide the label,
   * using the value of the label prop as screen reader only text.
   */
  hiddenLabel: propTypes.bool,

  /**
   * 	Positions the leadingIcon inside of the input to the right.
   */
  iconRight: propTypes.bool,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * The text to render inside the label element.
   */
  label: propTypes.string,

  /**
   * Sets the max width of the input
   * for smaller values like percentages, age, etc.
   */
  narrowWidth: propTypes.bool,

  /**
   * The name of the icon to render inside the input element.
   */
  leadingIcon: propTypes.string,

  /**
   * If true, will render the currency icon inside the input element.
   */
  textIcon: propTypes.bool,

  /**
   * Determines whether to render the
   * component in the valid or the error state.
   */
  valid: propTypes.bool,

  /**
   * 	If true, will render the component in the disabled state.
   */
  disabled: propTypes.bool
};
SprkTextInput.defaultProps = {
  additionalClasses: '',
  analyticsString: '',
  children: [],
  errorMessage: '',
  formatter: function formatter(value) {
    return value;
  },
  forwardedRef: /*#__PURE__*/React__default.createRef(),
  helperText: '',
  hiddenLabel: false,
  iconRight: false,
  idString: '',
  label: 'Text Input Label',
  leadingIcon: '',
  narrowWidth: false,
  textIcon: false,
  valid: true,
  disabled: false
};

var SprkDatePickerInput = /*#__PURE__*/function (_Component) {
  _inherits(SprkDatePickerInput, _Component);

  var _super = _createSuper(SprkDatePickerInput);

  function SprkDatePickerInput(props) {
    var _this;

    _classCallCheck(this, SprkDatePickerInput);

    (_this = _super.call(this, props)).datePickerInputRef = /*#__PURE__*/React__default.createRef();
    _this.tdpConfig = {
      mode: 'dp-below',
      lang: {
        days: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
      },
      min: '01/1/2008',
      max: '01/1/2068',
      format: function format(date) {
        return date.toLocaleDateString('en-US', {
          month: '2-digit',
          day: '2-digit',
          year: 'numeric'
        }).replace(/[^ -~]/g, '');
      }
    };
    return _this;
  }

  _createClass(SprkDatePickerInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var datePickerConfig = this.props.datePickerConfig;
      tinyDatePicker(this.datePickerInputRef.current, assign_1(this.tdpConfig, datePickerConfig));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          datePickerConfig = _this$props.datePickerConfig,
          rest = _objectWithoutProperties(_this$props, ["datePickerConfig"]);

      return /*#__PURE__*/React__default.createElement(SprkTextInput, _extends({
        forwardedRef: this.datePickerInputRef
      }, rest));
    }
  }]);

  return SprkDatePickerInput;
}(React.Component);

SprkDatePickerInput.propTypes = {
  /**
   * Exposes configuration provided
   * by tiny-date-picker, see [github](https://github.com/chrisdavies/tiny-date-picker) for documentation.
   */
  datePickerConfig: propTypes.shape({
    appendTo: propTypes.node,
    lang: propTypes.shape({
      days: propTypes.arrayOf(propTypes.string),
      months: propTypes.arrayOf(propTypes.string)
    }),
    today: propTypes.string,
    clear: propTypes.string,
    close: propTypes.string,
    format: propTypes.func,
    parse: propTypes.func,
    mode: propTypes.oneOf(['dp-modal', 'dp-below', 'dp-permanent']),
    hilightedDate: propTypes.string,
    min: propTypes.string,
    max: propTypes.string,
    inRange: propTypes.func,
    dateClass: propTypes.func,
    dayOffset: propTypes.number
  })
};
SprkDatePickerInput.defaultProps = {
  datePickerConfig: {}
};

var SprkDictionary = function SprkDictionary(props) {
  var keyValuePairs = props.keyValuePairs,
      variant = props.variant,
      idString = props.idString,
      additionalClasses = props.additionalClasses,
      other = _objectWithoutProperties(props, ["keyValuePairs", "variant", "idString", "additionalClasses"]);

  var classNames = classnames('sprk-c-Dictionary', additionalClasses, {
    'sprk-c-Dictionary--striped': variant === 'striped'
  });
  var keyValuePairsMap = Object.keys(keyValuePairs).map(function (term) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: "sprk-c-Dictionary__keyvaluepair",
      key: uniqueId_1('key-')
    }, /*#__PURE__*/React__default.createElement("dt", {
      className: "sprk-c-Dictionary__key sprk-b-Label sprk-b-Label--no-input"
    }, term), /*#__PURE__*/React__default.createElement("dd", {
      className: "sprk-c-Dictionary__value"
    }, keyValuePairs[term]));
  });
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classNames,
    "data-id": idString
  }, other), /*#__PURE__*/React__default.createElement("dl", {
    className: "sprk-c-Dictionary__keyvaluepairs"
  }, keyValuePairsMap));
};

SprkDictionary.propTypes = {
  /**
   * The collection of key-value pairs
   * to render.
   */
  keyValuePairs: propTypes.PropTypes.shape({
    '': ''
  }).isRequired,

  /**
   * Determines the style of dictionary component.
   * Supplying no value will cause the base styles to be used.
   */
  variant: propTypes.oneOf(['striped']),

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkDivider = function SprkDivider(props) {
  var element = props.element,
      additionalClasses = props.additionalClasses,
      idString = props.idString,
      other = _objectWithoutProperties(props, ["element", "additionalClasses", "idString"]);

  var classNames = classnames('sprk-c-Divider', additionalClasses);
  var TagName = element;
  return /*#__PURE__*/React__default.createElement(TagName, _extends({
    className: classNames,
    "data-id": idString
  }, other));
};

SprkDivider.defaultProps = {
  idString: undefined,
  additionalClasses: undefined
};
SprkDivider.propTypes = {
  /**
   * Determines if link renders as a `<span>` or `<hr>`.
   */
  element: propTypes.oneOf(['span', 'hr']).isRequired,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkLink = function SprkLink(props) {
  var children = props.children,
      element = props.element,
      variant = props.variant,
      additionalClasses = props.additionalClasses,
      idString = props.idString,
      analyticsString = props.analyticsString,
      onClick = props.onClick,
      href = props.href,
      other = _objectWithoutProperties(props, ["children", "element", "variant", "additionalClasses", "idString", "analyticsString", "onClick", "href"]);

  var TagName = element || 'a';
  var classNames = classnames(additionalClasses, {
    'sprk-b-Link': variant !== 'unstyled',
    'sprk-b-Link--simple': variant === 'simple',
    'sprk-b-Link--plain': variant === 'plain',
    'sprk-b-Link--disabled': variant === 'disabled',
    'sprk-b-Link--simple sprk-b-Link--has-icon': variant === 'has-icon' || variant === 'hasIcon'
  });
  var link;

  if (href) {
    link = href;
  } else if (TagName === 'a' && !href) {
    link = '#';
  } else {
    link = undefined;
  }

  var clickEvent;

  function handleClick(e) {
    e.preventDefault();
  }

  if (onClick) {
    clickEvent = onClick;
  } else if (!onClick && link === '#') {
    clickEvent = handleClick;
  }

  return /*#__PURE__*/React__default.createElement(TagName, _extends({
    className: classNames,
    "data-analytics": analyticsString,
    "data-id": idString,
    href: link,
    onClick: clickEvent
  }, other), children);
};

SprkLink.propTypes = {
  /** The children that will be rendered inside the link. */
  children: propTypes.node,

  /**
   * Will cause the appropriate variant
   * type to render.
   */
  variant: propTypes.oneOf(['base', 'simple', 'has-icon', 'hasIcon', 'plain', 'disabled', 'unstyled']),

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /** The href value for the link. */
  href: propTypes.string,

  /**
   * Determines if link renders as an anchor tag, or router link.
   */
  element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

  /** The event that will fire when the link is clicked. */
  onClick: propTypes.func
};
SprkLink.defaultProps = {
  variant: 'base'
};

var SprkDropdown = /*#__PURE__*/function (_Component) {
  _inherits(SprkDropdown, _Component);

  var _super = _createSuper(SprkDropdown);

  function SprkDropdown(props) {
    var _this;

    _classCallCheck(this, SprkDropdown);

    _this = _super.call(this, props);
    _this.state = {
      triggerText: props.defaultTriggerText,
      isOpen: false,
      choiceItems: props.choices.items.map(function (item) {
        return _objectSpread2({
          id: uniqueId_1()
        }, item);
      })
    };
    _this.toggleDropdownOpen = _this.toggleDropdownOpen.bind(_assertThisInitialized(_this));
    _this.closeOnEsc = _this.closeOnEsc.bind(_assertThisInitialized(_this));
    _this.closeOnClickOutside = _this.closeOnClickOutside.bind(_assertThisInitialized(_this));
    _this.closeDropdown = _this.closeDropdown.bind(_assertThisInitialized(_this));
    _this.selectChoice = _this.selectChoice.bind(_assertThisInitialized(_this));
    _this.setSelectedChoice = _this.setSelectedChoice.bind(_assertThisInitialized(_this));
    _this.dropdownRef = /*#__PURE__*/React__default.createRef();
    return _this;
  }

  _createClass(SprkDropdown, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('keydown', this.closeOnEsc);
      window.addEventListener('focusin', this.closeOnClickOutside);
      window.addEventListener('click', this.closeOnClickOutside);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.closeOnEsc);
      window.removeEventListener('focusin', this.closeOnClickOutside);
      window.removeEventListener('click', this.closeOnClickOutside);
    }
  }, {
    key: "setSelectedChoice",
    value: function setSelectedChoice(componentToUpdateId) {
      var choiceItems = this.state.choiceItems;
      return choiceItems.map(function (_ref) {
        var id = _ref.id,
            isActive = _ref.isActive,
            rest = _objectWithoutProperties(_ref, ["id", "isActive"]);

        if (id === componentToUpdateId) {
          return _objectSpread2({
            id: id,
            isActive: true
          }, rest);
        }

        return _objectSpread2({
          id: id,
          isActive: false
        }, rest);
      });
    }
  }, {
    key: "selectChoice",
    value: function selectChoice(id, text) {
      this.setState({
        triggerText: text,
        choiceItems: this.setSelectedChoice(id)
      });
    }
  }, {
    key: "toggleDropdownOpen",
    value: function toggleDropdownOpen(e) {
      e.preventDefault();
      this.setState(function (prevState) {
        return {
          isOpen: !prevState.isOpen
        };
      });
    }
  }, {
    key: "closeOnEsc",
    value: function closeOnEsc(e) {
      if (e.key === 'Escape') {
        this.closeDropdown();
      }
    }
  }, {
    key: "closeOnClickOutside",
    value: function closeOnClickOutside(e) {
      if (!this.dropdownRef.current.contains(e.target)) {
        this.closeDropdown();
      }
    }
  }, {
    key: "closeDropdown",
    value: function closeDropdown() {
      this.setState({
        isOpen: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          additionalClasses = _this$props.additionalClasses,
          additionalIconClasses = _this$props.additionalIconClasses,
          additionalTriggerClasses = _this$props.additionalTriggerClasses,
          additionalTriggerTextClasses = _this$props.additionalTriggerTextClasses,
          analyticsString = _this$props.analyticsString,
          choices = _this$props.choices,
          iconName = _this$props.iconName,
          idString = _this$props.idString,
          screenReaderText = _this$props.screenReaderText,
          title = _this$props.title,
          variant = _this$props.variant;
      var choiceFunction = choices.choiceFunction,
          footer = choices.footer;
      var _this$state = this.state,
          choiceItems = _this$state.choiceItems,
          isOpen = _this$state.isOpen,
          triggerText = _this$state.triggerText;
      return /*#__PURE__*/React__default.createElement("div", {
        ref: this.dropdownRef
      }, /*#__PURE__*/React__default.createElement(SprkLink, {
        element: "a",
        variant: "plain",
        additionalClasses: classnames({
          'sprk-u-mrs': variant === 'informational'
        }, additionalTriggerClasses),
        "aria-expanded": isOpen,
        "aria-haspopup": "listbox",
        "aria-label": screenReaderText ? screenReaderText : triggerText,
        "data-analytics": analyticsString || 'undefined',
        "data-id": idString || 'undefined',
        onClick: this.toggleDropdownOpen
      }, variant === 'informational' && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("span", {
        className: classnames(additionalTriggerTextClasses)
      }, triggerText), /*#__PURE__*/React__default.createElement(SprkIcon, {
        additionalClasses: "sprk-c-Icon--stroke-current-color sprk-u-mls",
        iconName: "chevron-down"
      })), variant === 'base' && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("span", {
        className: classnames('sprk-u-ScreenReaderText', additionalTriggerTextClasses)
      }, screenReaderText), /*#__PURE__*/React__default.createElement(SprkIcon, {
        iconName: iconName,
        additionalClasses: additionalIconClasses
      }))), isOpen && /*#__PURE__*/React__default.createElement("div", {
        className: classnames('sprk-c-Dropdown', additionalClasses)
      }, title !== '' && /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-c-Dropdown__header"
      }, /*#__PURE__*/React__default.createElement("h2", {
        className: "sprk-c-Dropdown__title"
      }, title)), /*#__PURE__*/React__default.createElement("ul", {
        className: "sprk-c-Dropdown__links",
        "aria-label": title ? title : screenReaderText || "My Choices",
        role: "listbox"
      }, choiceItems.map(function (choice) {
        var content = choice.content,
            element = choice.element,
            href = choice.href,
            isActive = choice.isActive,
            text = choice.text,
            value = choice.value,
            idString = choice.idString,
            rest = _objectWithoutProperties(choice, ["content", "element", "href", "isActive", "text", "value", "idString"]);

        var TagName = element || 'a';
        return /*#__PURE__*/React__default.createElement("li", {
          className: "sprk-c-Dropdown__item",
          "aria-selected": isActive,
          role: "option",
          key: choice.id
        }, variant === 'base' && /*#__PURE__*/React__default.createElement(TagName, _extends({
          className: "sprk-c-Dropdown__link",
          href: TagName === 'a' ? href || '#' : undefined,
          "aria-label": text,
          onClick: function onClick() {
            _this2.selectChoice(choice.id, text);

            _this2.closeDropdown();

            if (choiceFunction) {
              choiceFunction(value);
            }
          },
          "data-id": idString
        }, rest), text), variant === 'informational' && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(TagName, _extends({
          className: classnames('sprk-c-Dropdown__link', {
            'sprk-c-Dropdown__link--active': isActive
          }),
          href: TagName === 'a' ? href || '#' : undefined,
          "aria-label": content.title,
          onClick: function onClick() {
            _this2.selectChoice(choice.id, content.title);

            _this2.closeDropdown();

            if (choiceFunction) {
              choiceFunction(value);
            }
          }
        }, rest), /*#__PURE__*/React__default.createElement("p", {
          className: "sprk-b-TypeBodyOne"
        }, content.title), /*#__PURE__*/React__default.createElement("p", {
          className: "sprk-b-TypeBodyTwo"
        }, content.infoLine1), /*#__PURE__*/React__default.createElement("p", {
          className: "sprk-b-TypeBodyTwo"
        }, content.infoLine2))));
      })), footer && /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-c-Dropdown__footer sprk-u-TextAlign--center"
      }, footer)));
    }
  }]);

  return SprkDropdown;
}(React.Component);

SprkDropdown.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the icon.
   */
  additionalIconClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the trigger element.
   */
  additionalTriggerClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the trigger text.
   */
  additionalTriggerTextClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /** Content to render inside of the SprkDropdown */
  children: propTypes.node,

  /**
   * The choices object represents
   * data that is shown inside the open dropdown
   */
  choices: propTypes.shape({
    /** An array of objects that describe the items in the menu. */
    items: propTypes.arrayOf(propTypes.shape({
      /** The element to render for each menu item. */
      element: propTypes.oneOfType([propTypes.string, propTypes.func]),

      /**
       * Determines the href of the choice item.
       */
      href: propTypes.string,

      /** The text inside the choice item. */
      text: propTypes.string
    }))
  }),

  /** The text set as the default of the trigger link. */
  defaultTriggerText: propTypes.string,

  /**
   * Determines what icon `SprkIcon` renders
   * as the trigger icon.
   */
  iconName: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
  * A value for screen readers when there isn't
  * discernable text on the dropdown.
  * Useful for when the `title` prop is empty
  * and the Dropdown trigger is only an icon.
  */
  screenReaderText: propTypes.string,

  /**
   * The text of the optional header above the
   * choices in the dropdown.
   */
  title: propTypes.string,

  /**
   * The variant of the Dropdown to render.
   */
  variant: propTypes.oneOf(['base', 'informational'])
};
SprkDropdown.defaultProps = {
  additionalClasses: '',
  additionalIconClasses: '',
  additionalTriggerClasses: '',
  additionalTriggerTextClasses: '',
  analyticsString: '',
  children: [],
  choices: {
    items: []
  },
  defaultTriggerText: 'Choose One...',
  iconName: 'chevron-down',
  idString: '',
  screenReaderText: '',
  title: '',
  variant: 'base'
};

var SprkFlag = function SprkFlag(props) {
  var additionalBodyClasses = props.additionalBodyClasses,
      additionalMediaClasses = props.additionalMediaClasses,
      children = props.children,
      media = props.media,
      isReversed = props.isReversed,
      isStacked = props.isStacked,
      verticalAlignment = props.verticalAlignment,
      idString = props.idString,
      additionalClasses = props.additionalClasses,
      spacing = props.spacing,
      other = _objectWithoutProperties(props, ["additionalBodyClasses", "additionalMediaClasses", "children", "media", "isReversed", "isStacked", "verticalAlignment", "idString", "additionalClasses", "spacing"]);

  var flagClassNames = classnames('sprk-o-Flag', additionalClasses, {
    'sprk-o-Flag--stacked': isStacked,
    'sprk-o-Flag--rev': isReversed,
    'sprk-o-Flag--middle': verticalAlignment === 'middle',
    'sprk-o-Flag--bottom': verticalAlignment === 'bottom',
    'sprk-o-Flag--tiny': spacing === 'tiny',
    'sprk-o-Flag--small': spacing === 'small',
    'sprk-o-Flag--large': spacing === 'large',
    'sprk-o-Flag--huge': spacing === 'huge'
  });
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: flagClassNames,
    "data-id": idString
  }, other), /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-o-Flag__figure', additionalMediaClasses)
  }, media), /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-o-Flag__body', additionalBodyClasses)
  }, children));
};

SprkFlag.propTypes = {
  /**
   * Recieves a component that will render media into the Flag component. Required.
   */
  media: propTypes.element.isRequired,

  /**
   * Reverses the order of the figure and body.
   */
  isReversed: propTypes.bool,

  /**
   * Stacks elements at `$sprk-flag-stacked-breakpoint`
   */
  isStacked: propTypes.bool,

  /**
   * Determines how much space between the figure and the body.
   */
  spacing: propTypes.oneOf(['tiny', 'small', 'medium', 'large', 'huge']),

  /**
   * Determines the vertical alignment of content.
   */
  verticalAlignment: propTypes.oneOf(['top', 'middle', 'bottom']),

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the media container of the component.
   */
  additionalMediaClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the body container of the component.
   */
  additionalBodyClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var __DEV__ = process.env.NODE_ENV !== 'production';

var warning = function warning() {};

if (__DEV__) {
  var printWarning$2 = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);

    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);

    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      printWarning$2.apply(null, [format].concat(args));
    }
  };
}

var warning_1 = warning;

var SprkHighlightBoard = function SprkHighlightBoard(props) {
  var imgSrc = props.imgSrc,
      imgAlt = props.imgAlt,
      heading = props.heading,
      ctaText = props.ctaText,
      ctaHref = props.ctaHref,
      ctaAnalytics = props.ctaAnalytics,
      ctaIdString = props.ctaIdString,
      ctaText2 = props.ctaText2,
      ctaHref2 = props.ctaHref2,
      ctaAnalytics2 = props.ctaAnalytics2,
      ctaIdString2 = props.ctaIdString2,
      variant = props.variant,
      additionalClasses = props.additionalClasses,
      idString = props.idString,
      analyticsString = props.analyticsString,
      other = _objectWithoutProperties(props, ["imgSrc", "imgAlt", "heading", "ctaText", "ctaHref", "ctaAnalytics", "ctaIdString", "ctaText2", "ctaHref2", "ctaAnalytics2", "ctaIdString2", "variant", "additionalClasses", "idString", "analyticsString"]);

  warning_1(imgSrc && imgAlt || !imgSrc && !imgAlt, "SprkHighlightBoard: If imgSrc is provided, then imgAlt is required\n    (and vice versa).");
  warning_1(!(ctaText2 !== null && ctaText === null), "\n    Spark Design System Warning - SprkHighlightBoard Component:\n    A secondary call-to-action (CTA)\n    should not exist without a primary CTA.\n    If there is only one CTA, it must be set on\n    ctaText and ctaHref.\n    ");
  var classNames = classnames('sprk-c-HighlightBoard', 'sprk-u-mbm', additionalClasses, {
    'sprk-c-HighlightBoard--has-image': imgSrc
  }, {
    'sprk-c-HighlightBoard--stacked': variant === 'stacked'
  });
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classNames,
    "data-id": idString
  }, other), imgSrc && /*#__PURE__*/React__default.createElement("img", {
    className: "sprk-c-HighlightBoard__image",
    src: imgSrc,
    alt: imgAlt
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "sprk-c-HighlightBoard__content sprk-o-Stack sprk-o-Stack--large"
  }, heading && /*#__PURE__*/React__default.createElement("h1", {
    className: "sprk-b-TypeDisplayOne sprk-c-HighlightBoard__heading sprk-o-Stack__item"
  }, heading), ctaText && /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-o-Stack__item', 'sprk-o-Stack', 'sprk-o-Stack--medium', 'sprk-o-Stack--split@xs', 'sprk-o-Stack--center-column', {
      'sprk-o-Stack--center-row': variant === 'noImage' || variant === 'stacked'
    })
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sprk-o-Stack__item sprk-c-HighlightBoard__cta"
  }, /*#__PURE__*/React__default.createElement(SprkButton, {
    element: "a",
    href: ctaHref,
    analyticsString: ctaAnalytics,
    idString: ctaIdString,
    additionalClasses: "sprk-c-Button--full@s"
  }, ctaText)), ctaText2 && /*#__PURE__*/React__default.createElement("div", {
    className: "sprk-o-Stack__item sprk-c-HighlightBoard__cta"
  }, /*#__PURE__*/React__default.createElement(SprkButton, {
    variant: "secondary",
    element: "a",
    href: ctaHref2,
    analyticsString: ctaAnalytics2,
    idString: ctaIdString2,
    additionalClasses: "sprk-c-Button--full@s"
  }, ctaText2)))));
};

SprkHighlightBoard.propTypes = {
  /**
   * The source for the main image.
   */
  imgSrc: propTypes.string,

  /**
   * The `alt` text for the main image.
   */
  imgAlt: propTypes.string,

  /**
   * The main headline for the section.
   */
  heading: propTypes.string,

  /**
   * The Highlight Board will use this as
   * the text for the main call to action.
   */
  ctaText: propTypes.string,

  /**
   * The Highlight Board will use this as the
   * `href` for the main call to action.
   */
  ctaHref: propTypes.string,

  /**
   * The value supplied will be assigned to
   * the `data-analytics` attribute on the call to action.
   * Intended for an outside library to capture data.
   */
  ctaAnalytics: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  ctaIdString: propTypes.string,

  /** The text for the second call to action. */
  ctaText2: propTypes.string,

  /**
   * The `href` for the second call to action.
   */
  ctaHref2: propTypes.string,

  /**
   * The value supplied will be assigned to the
   * `data-analytics` attribute on the second
   * call to action. Intended for an outside
   * library to capture data.
   */
  ctaAnalytics2: propTypes.string,

  /**
   * The `data-id` for the second call to action.
   */
  ctaIdString2: propTypes.string,

  /**
   * Determines the style of Highlight Board is rendered.
   */
  variant: propTypes.oneOf(['noImage', 'stacked']),

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};
SprkHighlightBoard.defaultProps = {
  imgSrc: null,
  imgAlt: null,
  heading: null,
  ctaText: null,
  ctaHref: null,
  ctaAnalytics: null,
  ctaIdString: null,
  ctaText2: null,
  ctaHref2: null,
  ctaAnalytics2: null,
  ctaIdString2: null,
  variant: null,
  idString: null,
  additionalClasses: null
};

var SprkRevealInput = /*#__PURE__*/function (_Component) {
  _inherits(SprkRevealInput, _Component);

  var _super = _createSuper(SprkRevealInput);

  function SprkRevealInput(props) {
    var _this;

    _classCallCheck(this, SprkRevealInput);

    _this = _super.call(this, props);
    _this.state = {
      revealControlId: uniqueId_1(),
      isRevealed: false
    };
    _this.toggleReveal = _this.toggleReveal.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SprkRevealInput, [{
    key: "toggleReveal",
    value: function toggleReveal() {
      this.setState(function (prevState) {
        return {
          isRevealed: !prevState.isRevealed
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          isRevealed = _this$state.isRevealed,
          revealControlId = _this$state.revealControlId;

      var _this$props = this.props,
          toggleLabel = _this$props.toggleLabel,
          rest = _objectWithoutProperties(_this$props, ["toggleLabel"]);

      return /*#__PURE__*/React__default.createElement(SprkTextInput, _extends({
        type: isRevealed ? 'text' : 'password'
      }, rest), /*#__PURE__*/React__default.createElement("div", {
        className: " sprk-b-SelectionContainer sprk-b-InputContainer__visibility-toggle"
      }, /*#__PURE__*/React__default.createElement("input", {
        id: revealControlId,
        type: "checkbox",
        onClick: this.toggleReveal
      }), /*#__PURE__*/React__default.createElement("label", {
        htmlFor: revealControlId,
        className: "sprk-b-Label sprk-b-Label--inline"
      }, toggleLabel)));
    }
  }]);

  return SprkRevealInput;
}(React.Component);

SprkRevealInput.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * A function supplied will be passed
   * the value of the input and then executed,
   * if the valid prop is true. The value
   * returned will be assigned to the value of the input.
   */
  formatter: propTypes.func,

  /**
   * Text that appears below the input,
   * intended to provide more information to a user.
   */
  helperText: propTypes.string,

  /**
   * 	If true, will visually hide the label,
   *  using the value of the label prop as screen reader only text.
   */
  hiddenLabel: propTypes.bool,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * The text to render inside the label element.
   */
  label: propTypes.string,

  /**
   * The name of the icon, when supplied,
   * will be rendered inside the input element.
   */
  leadingIcon: propTypes.string,

  /**
   * If true, will render the
   * currency icon inside the input element.
   */
  textIcon: propTypes.bool,

  /**
   * The text explaining the checkbox
   * that toggles the visibility of the input's content.
   */
  toggleLabel: propTypes.string,

  /**
   * Determines whether to render the
   * component in the valid or the error state.
   */
  valid: propTypes.bool
};
SprkRevealInput.defaultProps = {
  additionalClasses: '',
  analyticsString: '',
  formatter: function formatter(value) {
    return value;
  },
  helperText: '',
  hiddenLabel: false,
  idString: '',
  label: 'Text Input Label',
  leadingIcon: '',
  textIcon: false,
  toggleLabel: 'Show Value',
  valid: true
};

var SprkSelectionInput = /*#__PURE__*/function (_React$Component) {
  _inherits(SprkSelectionInput, _React$Component);

  var _super = _createSuper(SprkSelectionInput);

  function SprkSelectionInput(props) {
    var _this;

    _classCallCheck(this, SprkSelectionInput);

    _this = _super.call(this, props);
    _this.state = {
      id: uniqueId_1(),
      choiceItems: props.choices.map(function (item) {
        return _objectSpread2({
          id: uniqueId_1()
        }, item);
      })
    };
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    _this.selectRef = /*#__PURE__*/React__default.createRef();
    return _this;
  }

  _createClass(SprkSelectionInput, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      /*
       * Check if Huge Select has a value when it first mounts.
       * Set presence of value in state.
       */
      var variant = this.props.variant;

      if (variant === 'hugeSelect') {
        if (this.selectRef.current.value !== '') {
          this.setState({
            selectHugeHasValue: true
          });
        }
      }
    }
    /*
    * Runs optional onChangeFunc prop.
    * Updates state if huge selects have
    * a value.
    */

  }, {
    key: "handleChange",
    value: function handleChange(e, variant, onChangeFunc) {
      var isHugeSelect = variant === 'hugeSelect';

      if (isHugeSelect) {
        this.setState({
          selectHugeHasValue: e.target.value !== ''
        });
      }

      if (onChangeFunc) onChangeFunc(e);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          additionalClasses = _this$props.additionalClasses,
          analyticsString = _this$props.analyticsString,
          disabled = _this$props.disabled,
          errorMessage = _this$props.errorMessage,
          helperText = _this$props.helperText,
          idString = _this$props.idString,
          label = _this$props.label,
          groupLabel = _this$props.groupLabel,
          valid = _this$props.valid,
          variant = _this$props.variant,
          hasBlankFirstOption = _this$props.hasBlankFirstOption,
          onChange = _this$props.onChange,
          other = _objectWithoutProperties(_this$props, ["additionalClasses", "analyticsString", "disabled", "errorMessage", "helperText", "idString", "label", "groupLabel", "valid", "variant", "hasBlankFirstOption", "onChange"]);

      var _this$state = this.state,
          choiceItems = _this$state.choiceItems,
          id = _this$state.id,
          selectHugeHasValue = _this$state.selectHugeHasValue;
      var onChangeFunc = onChange ? onChange : this.props.onChangeFunc;
      return /*#__PURE__*/React__default.createElement("div", {
        className: classnames('sprk-b-InputContainer', additionalClasses, {
          'sprk-b-InputContainer--huge': variant === 'hugeSelect'
        }),
        "data-analytics": analyticsString,
        "data-id": idString
      }, (variant === 'checkbox' || variant === 'radio') && /*#__PURE__*/React__default.createElement("fieldset", {
        className: "sprk-b-Fieldset"
      }, /*#__PURE__*/React__default.createElement("legend", {
        className: "sprk-b-Legend"
      }, /*#__PURE__*/React__default.createElement("p", {
        className: "sprk-b-Label"
      }, groupLabel || label)), choiceItems.map(function (_ref) {
        var innerLabel = _ref.label,
            innerId = _ref.id,
            name = _ref.name,
            value = _ref.value,
            rest = _objectWithoutProperties(_ref, ["label", "id", "name", "value"]);

        return /*#__PURE__*/React__default.createElement("div", {
          className: "sprk-b-SelectionContainer",
          key: innerId
        }, /*#__PURE__*/React__default.createElement("input", _extends({
          className: classnames({
            'sprk-b-Checkbox__input': variant === 'checkbox',
            'sprk-b-Radio__input': variant === 'radio'
          }),
          disabled: disabled,
          id: innerId,
          type: variant,
          "aria-describedby": "errorcontainer-".concat(id),
          name: name,
          value: value,
          onChange: onChangeFunc
        }, rest)), /*#__PURE__*/React__default.createElement("label", {
          htmlFor: innerId,
          className: classnames('sprk-b-Label sprk-b-Label--inline', {
            'sprk-b-Checkbox__label': variant === 'checkbox',
            'sprk-b-Radio__label': variant === 'radio',
            'sprk-b-Label--disabled': disabled
          })
        }, innerLabel));
      })), (variant === 'select' || variant === 'hugeSelect') && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(SprkLabelLocationCheck, {
        type: variant,
        label: label,
        id: id,
        disabled: disabled
      }, /*#__PURE__*/React__default.createElement("select", _extends({
        className: classnames('sprk-b-Select', {
          'sprk-b-Input--has-floating-label': selectHugeHasValue,
          'sprk-b-Select--error': !valid
        }),
        id: id,
        disabled: disabled,
        "aria-describedby": "errorcontainer-".concat(id),
        onChange: function onChange(e) {
          _this2.handleChange(e, variant, onChangeFunc);
        },
        ref: this.selectRef
      }, other), variant === 'hugeSelect' && /*#__PURE__*/React__default.createElement("option", {
        value: "",
        hidden: !hasBlankFirstOption,
        disabled: !hasBlankFirstOption
      }), choiceItems.map(function (_ref2) {
        var innerId = _ref2.id,
            innerLabel = _ref2.label,
            options = _ref2.options,
            value = _ref2.value,
            rest = _objectWithoutProperties(_ref2, ["id", "label", "options", "value"]);

        if (options) {
          return /*#__PURE__*/React__default.createElement("optgroup", {
            label: innerLabel,
            key: innerId
          }, options.map(function (_ref3) {
            var optionValue = _ref3.value,
                optionLabel = _ref3.label;
            return /*#__PURE__*/React__default.createElement("option", _extends({
              key: optionValue,
              value: optionValue
            }, rest), optionLabel);
          }));
        }

        return /*#__PURE__*/React__default.createElement("option", _extends({
          value: value,
          key: value
        }, rest), innerLabel);
      }))), /*#__PURE__*/React__default.createElement(SprkIcon, {
        iconName: "chevron-down",
        additionalClasses: " sprk-c-Icon--stroke-current-color sprk-b-SelectContainer__icon"
      })), helperText.length > 0 && /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-b-HelperText"
      }, helperText), !valid && /*#__PURE__*/React__default.createElement(SprkErrorContainer, {
        id: "errorcontainer-".concat(id),
        message: errorMessage
      }));
    }
  }]);

  return SprkSelectionInput;
}(React__default.Component);

SprkSelectionInput.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * Expects an array of objects
   * that describe the choices available to the user.
   */
  choices: propTypes.arrayOf(propTypes.shape({
    /**
     * Text tied to the rendered input element.
     */
    label: propTypes.string.isRequired,

    /**
     * Assigned to the `name` attribute
     * of the rendered input element.
     */
    name: propTypes.string,

    /**
     * 	Assigned to the `value` attribute
     *  of the rendered input element.
     */
    value: propTypes.string
  })).isRequired,

  /**
   * Will render the component in its disabled state.
   */
  disabled: propTypes.bool,

  /**
   * The error message that will display
   * while in its error state.
   */
  errorMessage: propTypes.string,

  /**
   * Text that describes the
   * group of selection items as a whole.
   * Applies to the checkbox and radio variants only.
   */
  groupLabel: propTypes.string,

  /**
   * 	Text that appears below the input, intended to provide more information to a user.
   */
  helperText: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Determines whether to render
   * the component in the valid or the error state.
   */
  valid: propTypes.bool,

  /**
   * Will render a blank first option. This option is only available when `variant="hugeSelect"`
   */
  hasBlankFirstOption: propTypes.bool,

  /**
   * Passes in a function that handles the onChange of the input.
   */
  onChange: propTypes.func,

  /**
   * Determines what type of input is rendered.
   */
  variant: propTypes.oneOf(['checkbox', 'radio', 'select', 'hugeSelect']).isRequired
};
SprkSelectionInput.defaultProps = {
  additionalClasses: '',
  analyticsString: '',
  disabled: false,
  errorMessage: '',
  groupLabel: '',
  helperText: '',
  idString: '',
  valid: true,
  hasBlankFirstOption: false
};

var addPropsToMatchingComponents = function addPropsToMatchingComponents(elements, displayNames, props) {
  var key = 0;

  if (elements.map) {
    return elements.map(function (element) {
      if (displayNames.includes(element.type.name)) {
        key += 1;
        return /*#__PURE__*/React__default.cloneElement(element, _objectSpread2({
          key: key
        }, props));
      }

      key += 1;
      return /*#__PURE__*/React__default.cloneElement(element, {
        key: key
      });
    });
  }

  return elements;
};

var SprkCheckboxGroup = function SprkCheckboxGroup(props) {
  var children = props.children,
      variant = props.variant,
      idString = props.idString,
      additionalClasses = props.additionalClasses,
      analyticsString = props.analyticsString;
  var errorId = null;
  var helperId = null;
  var hasErrorContainer = false;
  var hasHelperText = false;
  var childrenArray = React__default.Children.toArray(children); // Map through children, assign SprkErrorContainer with id/uniqueId
  // Assign errorId which will determine the ariaDescribedBy of SprkCheckboxItem

  var elementsToProcess = childrenArray.map(function (element) {
    if (element.type.name === 'SprkErrorContainer') {
      hasErrorContainer = true;
      errorId = element.props.id || uniqueId_1('sprk-error-container-');
      return /*#__PURE__*/React__default.cloneElement(element, {
        id: errorId
      });
    }

    if (element.type.name === 'SprkHelperText') {
      hasHelperText = true;
      helperId = element.props.id || uniqueId_1('sprk-helper-text-');
      return /*#__PURE__*/React__default.cloneElement(element, {
        id: helperId
      });
    }

    return element;
  }); // For each element, if it has grandChildren, add ariaDescribedBy to those

  var key = 0;
  var elementsToRender = elementsToProcess;

  if (hasErrorContainer || hasHelperText) {
    elementsToRender = elementsToProcess.map(function (element) {
      key += 1;
      var grandChildren = null;

      if (element.props.children) {
        grandChildren = addPropsToMatchingComponents(element.props.children, ['SprkCheckboxItem'], {
          ariaDescribedBy: [helperId, errorId].join(' ')
        });
      }

      if (element.type.name === 'SprkCheckboxItem') {
        return /*#__PURE__*/React__default.cloneElement(element, {
          ariaDescribedBy: [helperId, errorId].join(' '),
          key: "sprk-checkbox-item-".concat(key),
          children: grandChildren || element.children
        });
      }

      return /*#__PURE__*/React__default.cloneElement(element, {
        key: "sprk-checkbox-outer-item-".concat(key),
        children: grandChildren || element.children
      });
    });
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-b-InputContainer', additionalClasses, {
      'sprk-b-InputContainer--huge': variant === 'huge'
    }),
    "data-analytics": analyticsString,
    "data-id": idString
  }, elementsToRender);
};

SprkCheckboxGroup.propTypes = {
  /** Content to render inside of the component. */
  children: propTypes.node,

  /**
   * Determines the style of checkbox.
   * Supplying no value will cause the default styles to be used.
   */
  variant: propTypes.oneOf(['huge']),

  /**
   * Assigned to the `data-id` attribute serving as
   * a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute
   * serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkCheckboxItem = function SprkCheckboxItem(props) {
  var children = props.children,
      variant = props.variant,
      idString = props.idString,
      additionalClasses = props.additionalClasses,
      analyticsString = props.analyticsString,
      checkboxAdditionalClasses = props.checkboxAdditionalClasses,
      labelAdditionalClasses = props.labelAdditionalClasses,
      name = props.name,
      value = props.value,
      isDisabled = props.isDisabled,
      onChange = props.onChange,
      id = props.id,
      ariaDescribedBy = props.ariaDescribedBy,
      rest = _objectWithoutProperties(props, ["children", "variant", "idString", "additionalClasses", "analyticsString", "checkboxAdditionalClasses", "labelAdditionalClasses", "name", "value", "isDisabled", "onChange", "id", "ariaDescribedBy"]);

  var internalId = uniqueId_1('sprk-checkbox-');
  var onChangeFunc = onChange;
  return /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-b-SelectionContainer sprk-b-Checkbox', additionalClasses, {
      'sprk-b-Checkbox--huge': variant === 'huge'
    }),
    "data-analytics": analyticsString,
    "data-id": idString
  }, /*#__PURE__*/React__default.createElement("input", _extends({
    "aria-describedby": ariaDescribedBy,
    className: classnames('sprk-b-Checkbox__input', checkboxAdditionalClasses),
    "data-id": idString,
    disabled: isDisabled,
    id: id || internalId,
    name: name,
    onChange: onChangeFunc,
    type: "checkbox",
    value: value
  }, rest)), /*#__PURE__*/React__default.createElement("label", {
    className: classnames('sprk-b-Label sprk-b-Label--inline sprk-b-Checkbox__label', labelAdditionalClasses, {
      'sprk-b-Label--disabled': isDisabled
    }),
    htmlFor: id || internalId
  }, children));
};

SprkCheckboxItem.propTypes = {
  children: propTypes.node,

  /**
   * Determines the style of checkbox.
   * Supplying no value will cause the default styles to be used.
   */
  variant: propTypes.oneOf(['huge']),

  /**
   * Assigned to the `data-id` attribute serving as
   * a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Assigned to the `aria-describedby` attribute of the input used
   * to create relationships between the input and error container.
   */
  ariaDescribedBy: propTypes.string,

  /**
   * Assigned to the `id` attribute of the input that will connect
   * relationships between the label and input.
   */
  id: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute
   * serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the checkbox label of the component.
   */
  labelAdditionalClasses: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the checkbox input of the component.
   */
  checkboxAdditionalClasses: propTypes.string,

  /**
   * 	Text that appears below the input,
   * intended to provide more information to a user.
   */
  helperText: propTypes.string,

  /**
   * The error message that will display
   * while in its error state.
   */
  errorMessage: propTypes.string,

  /**
   * Assigned to the `name` attribute
   * of the rendered input element.
   */
  name: propTypes.string,

  /**
   * 	Assigned to the `value` attribute
   *  of the rendered input element.
   */
  value: propTypes.string,

  /**
   * Will render the component in its disabled state.
   */
  isDisabled: propTypes.bool,

  /**
   * Passes in a function that handles the onChange of the input.
   */
  onChange: propTypes.func
};

var SprkRadioGroup = function SprkRadioGroup(props) {
  var children = props.children,
      variant = props.variant,
      idString = props.idString,
      additionalClasses = props.additionalClasses,
      analyticsString = props.analyticsString;
  var errorId = null;
  var helperId = null;
  var hasErrorContainer = false;
  var hasHelperText = false;
  var childrenArray = React__default.Children.toArray(children); // Map through children, assign SprkErrorContainer with id/uniqueId
  // Assign errorId which will determine the ariaDescribedBy of SprkRadioItem

  var elementsToProcess = childrenArray.map(function (element) {
    if (element.type.name === 'SprkErrorContainer') {
      hasErrorContainer = true;
      errorId = element.props.id || uniqueId_1('sprk-error-container-');
      return /*#__PURE__*/React__default.cloneElement(element, {
        id: errorId
      });
    }

    if (element.type.name === 'SprkHelperText') {
      hasHelperText = true;
      helperId = element.props.id || uniqueId_1('sprk-helper-text-');
      return /*#__PURE__*/React__default.cloneElement(element, {
        id: helperId
      });
    }

    return element;
  }); // for each element, if it has grandChildren, add ariaDescribedBy to those

  var key = 0;
  var elementsToRender = elementsToProcess;

  if (hasErrorContainer || hasHelperText) {
    elementsToRender = elementsToProcess.map(function (element) {
      key += 1;
      var grandChildren = null;

      if (element.props.children) {
        grandChildren = addPropsToMatchingComponents(element.props.children, ['SprkRadioItem'], {
          ariaDescribedBy: [helperId, errorId].join(' ')
        });
      }

      if (element.type.name === 'SprkRadioItem') {
        return /*#__PURE__*/React__default.cloneElement(element, {
          ariaDescribedBy: [helperId, errorId].join(' '),
          key: "sprk-radio-item-".concat(key),
          children: grandChildren || element.children
        });
      }

      return /*#__PURE__*/React__default.cloneElement(element, {
        key: "sprk-radio-outer-item-".concat(key),
        children: grandChildren || element.children
      });
    });
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-b-InputContainer', additionalClasses, {
      'sprk-b-InputContainer--huge': variant === 'huge'
    }),
    "data-analytics": analyticsString,
    "data-id": idString
  }, elementsToRender);
};

SprkRadioGroup.propTypes = {
  /** Content to render inside of the component. */
  children: propTypes.node,

  /**
   * Determines the style of radio.
   * Supplying no value will cause the default styles to be used.
   */
  variant: propTypes.oneOf(['huge']),

  /**
   * Assigned to the `data-id` attribute serving as
   * a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute
   * serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkRadioItem = function SprkRadioItem(props) {
  var children = props.children,
      variant = props.variant,
      idString = props.idString,
      additionalClasses = props.additionalClasses,
      analyticsString = props.analyticsString,
      radioAdditionalClasses = props.radioAdditionalClasses,
      labelAdditionalClasses = props.labelAdditionalClasses,
      name = props.name,
      value = props.value,
      isDisabled = props.isDisabled,
      onChange = props.onChange,
      id = props.id,
      ariaDescribedBy = props.ariaDescribedBy,
      rest = _objectWithoutProperties(props, ["children", "variant", "idString", "additionalClasses", "analyticsString", "radioAdditionalClasses", "labelAdditionalClasses", "name", "value", "isDisabled", "onChange", "id", "ariaDescribedBy"]);

  var internalId = uniqueId_1('sprk-radio-');
  var onChangeFunc = onChange;
  return /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-b-SelectionContainer sprk-b-Radio', additionalClasses, {
      'sprk-b-Radio--huge': variant === 'huge'
    }),
    "data-analytics": analyticsString,
    "data-id": idString
  }, /*#__PURE__*/React__default.createElement("input", _extends({
    "aria-describedby": ariaDescribedBy,
    className: classnames('sprk-b-Radio__input', radioAdditionalClasses),
    "data-id": idString,
    disabled: isDisabled,
    id: id || internalId,
    name: name,
    onChange: onChangeFunc,
    type: "radio",
    value: value
  }, rest)), /*#__PURE__*/React__default.createElement("label", {
    className: classnames('sprk-b-Label sprk-b-Label--inline sprk-b-Radio__label', labelAdditionalClasses, {
      'sprk-b-Label--disabled': isDisabled
    }),
    htmlFor: id || internalId
  }, children));
};

SprkRadioItem.propTypes = {
  /** Content to render inside of the component. */
  children: propTypes.node,

  /**
   * Determines the style of radio.
   * Supplying no value will cause the default styles to be used.
   */
  variant: propTypes.oneOf(['huge']),

  /**
   * Assigned to the `data-id` attribute serving as
   * a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Assigned to the `aria-describedby` attribute of the input used
   * to create relationships between the input and error container.
   */
  ariaDescribedBy: propTypes.string,

  /**
   * Assigned to the `id` attribute of the input that will connect
   * relationships between the label and input.
   */
  id: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute
   * serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the radio label of the component.
   */
  labelAdditionalClasses: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the radio input of the component.
   */
  radioAdditionalClasses: propTypes.string,

  /**
   * Assigned to the `name` attribute
   * of the rendered input element.
   */
  name: propTypes.string,

  /**
   * 	Assigned to the `value` attribute
   *  of the rendered input element.
   */
  value: propTypes.string,

  /**
   * Will render the component in its disabled state.
   */
  isDisabled: propTypes.bool,

  /**
   * Passes in a function that handles the onChange of the input.
   */
  onChange: propTypes.func
};

var SprkHelperText = function SprkHelperText(props) {
  var children = props.children,
      idString = props.idString,
      analyticsString = props.analyticsString,
      additionalClasses = props.additionalClasses,
      other = _objectWithoutProperties(props, ["children", "idString", "analyticsString", "additionalClasses"]);

  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classnames('sprk-b-HelperText', additionalClasses),
    "data-analytics": analyticsString,
    "data-id": idString
  }, other), children);
};

SprkHelperText.propTypes = {
  /** Content to render inside of the component. */
  children: propTypes.node,

  /**
   * Assigned to the `data-id` attribute serving as
   * a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute
   * serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkFieldset = function SprkFieldset(props) {
  var children = props.children,
      idString = props.idString,
      analyticsString = props.analyticsString,
      additionalClasses = props.additionalClasses,
      other = _objectWithoutProperties(props, ["children", "idString", "analyticsString", "additionalClasses"]);

  return /*#__PURE__*/React__default.createElement("fieldset", _extends({
    className: classnames('sprk-b-Fieldset', additionalClasses),
    "data-analytics": analyticsString,
    "data-id": idString
  }, other), children);
};

SprkFieldset.propTypes = {
  /** Content to render inside of the component. */
  children: propTypes.node,

  /**
   * Assigned to the `data-id` attribute serving as
   * a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute
   * serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkLegend = function SprkLegend(props) {
  var children = props.children,
      idString = props.idString,
      analyticsString = props.analyticsString,
      additionalClasses = props.additionalClasses,
      isDisabled = props.isDisabled,
      other = _objectWithoutProperties(props, ["children", "idString", "analyticsString", "additionalClasses", "isDisabled"]);

  return /*#__PURE__*/React__default.createElement("legend", _extends({
    className: classnames('sprk-b-Legend sprk-b-Label', additionalClasses, {
      'sprk-b-Label--disabled': isDisabled
    }),
    "data-analytics": analyticsString,
    "data-id": idString
  }, other), children);
};

SprkLegend.propTypes = {
  /** Content to render inside of the component. */
  children: propTypes.node,

  /**
   * Assigned to the `data-id` attribute serving as
   * a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute
   * serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * A space-separated string of classes
   * to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Will render the component in its disabled state.
   */
  isDisabled: propTypes.bool
};

var SprkTable = function SprkTable(props) {
  var rows = props.rows,
      columns = props.columns,
      variant = props.variant,
      idString = props.idString,
      additionalContainerClasses = props.additionalContainerClasses,
      additionalTableClasses = props.additionalTableClasses,
      children = props.children,
      other = _objectWithoutProperties(props, ["rows", "columns", "variant", "idString", "additionalContainerClasses", "additionalTableClasses", "children"]);

  var wrapperClassNames = classnames('sprk-b-TableContainer', additionalContainerClasses);
  var tableClassNames = classnames('sprk-b-Table', {
    'sprk-b-Table--secondary': variant === 'secondary'
  }, {
    'sprk-b-Table--secondary-row-comparison': variant === 'secondaryRowComparison'
  }, {
    'sprk-b-Table--grouped-columns': variant === 'grouped'
  }, {
    'sprk-b-Table--row-comparison': variant === 'rowComparison'
  }, additionalTableClasses);

  if (variant === 'grouped') {
    return /*#__PURE__*/React__default.createElement("div", {
      className: wrapperClassNames,
      "data-id": idString
    }, /*#__PURE__*/React__default.createElement("table", _extends({
      className: tableClassNames
    }, other), /*#__PURE__*/React__default.createElement("thead", {
      className: "sprk-b-Table__head"
    }, columns.length > 0 && columns.map(function (row) {
      return /*#__PURE__*/React__default.createElement("tr", {
        key: uniqueId_1('row_')
      }, row.map(function (col) {
        return /*#__PURE__*/React__default.createElement("th", {
          key: uniqueId_1('th'),
          rowSpan: col.rowspan,
          colSpan: col.colspan
        }, col.header);
      }));
    })), rows.length > 0 && /*#__PURE__*/React__default.createElement("tbody", null, rows.map(function (row) {
      return /*#__PURE__*/React__default.createElement("tr", {
        key: uniqueId_1('row_')
      }, row.map(function (item) {
        return /*#__PURE__*/React__default.createElement("td", {
          key: uniqueId_1('td_')
        }, item);
      }));
    }))));
  }

  if (variant === 'rowComparison') {
    return /*#__PURE__*/React__default.createElement("div", {
      className: wrapperClassNames,
      "data-id": idString
    }, /*#__PURE__*/React__default.createElement("table", _extends({
      className: tableClassNames
    }, other), /*#__PURE__*/React__default.createElement("thead", {
      className: "sprk-b-Table__head"
    }, columns.length > 0 && /*#__PURE__*/React__default.createElement("tr", null, /*#__PURE__*/React__default.createElement("th", {
      className: "sprk-b-Table__empty-heading"
    }), columns.map(function (col) {
      return /*#__PURE__*/React__default.createElement("th", {
        key: uniqueId_1('th_')
      }, col.header);
    }))), rows.length > 0 && /*#__PURE__*/React__default.createElement("tbody", null, rows.map(function (row) {
      return /*#__PURE__*/React__default.createElement("tr", {
        key: uniqueId_1('row_')
      }, /*#__PURE__*/React__default.createElement("th", null, row.rowHeading), columns.length > 0 && columns.map(function (col) {
        return /*#__PURE__*/React__default.createElement("td", {
          key: uniqueId_1('td_')
        }, row[col.name]);
      }));
    }))));
  }

  if (variant === 'secondaryRowComparison') {
    return /*#__PURE__*/React__default.createElement("div", {
      className: wrapperClassNames,
      "data-id": idString
    }, /*#__PURE__*/React__default.createElement("table", _extends({
      className: tableClassNames
    }, other), rows.length > 0 && /*#__PURE__*/React__default.createElement("tbody", null, rows.map(function (row) {
      return /*#__PURE__*/React__default.createElement("tr", {
        key: uniqueId_1('row_')
      }, /*#__PURE__*/React__default.createElement("th", null, row.rowHeading), columns.length > 0 && columns.map(function (col) {
        return /*#__PURE__*/React__default.createElement("td", {
          key: uniqueId_1('td_')
        }, row[col.name]);
      }), row.button && /*#__PURE__*/React__default.createElement("td", null, row.button));
    }))));
  }

  if (variant === 'html') {
    return /*#__PURE__*/React__default.createElement("div", {
      className: wrapperClassNames,
      "data-id": idString
    }, /*#__PURE__*/React__default.createElement("table", _extends({
      className: tableClassNames
    }, other), children));
  }

  return /*#__PURE__*/React__default.createElement("div", {
    className: wrapperClassNames,
    "data-id": idString
  }, /*#__PURE__*/React__default.createElement("table", _extends({
    className: tableClassNames
  }, other), /*#__PURE__*/React__default.createElement("thead", {
    className: "sprk-b-Table__head"
  }, columns.length > 0 && /*#__PURE__*/React__default.createElement("tr", null, columns.map(function (col) {
    return /*#__PURE__*/React__default.createElement("th", {
      key: uniqueId_1('th_')
    }, col.header);
  }))), rows.length > 0 && /*#__PURE__*/React__default.createElement("tbody", null, rows.map(function (row) {
    return /*#__PURE__*/React__default.createElement("tr", {
      key: uniqueId_1('row_')
    }, columns.length > 0 && columns.map(function (col) {
      return /*#__PURE__*/React__default.createElement("td", {
        key: uniqueId_1('td_')
      }, row[col.name]);
    }));
  }))));
};

SprkTable.propTypes = {
  /** Array used to render the table headings. */
  columns: propTypes.oneOfType([propTypes.arrayOf(propTypes.object), propTypes.arrayOf(propTypes.array)]),

  /** An array of objects used to map and render the table row data. */
  rows: propTypes.oneOfType([propTypes.arrayOf(propTypes.object), propTypes.arrayOf(propTypes.array)]),

  /** Determines what variant of the table should render. */
  variant: propTypes.oneOf(['default', 'secondary', 'grouped', 'rowComparison', 'secondaryRowComparison', 'html']),

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalContainerClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the table.
   */
  additionalTableClasses: propTypes.string,

  /**
   * Content to render inside of components.
   * Available only to the `html` variant.
   */
  children: propTypes.node
};
SprkTable.defaultProps = {
  columns: [],
  rows: [],
  variant: 'default',
  idString: '',
  additionalContainerClasses: '',
  additionalTableClasses: '',
  children: ''
};

function SprkMastheadMenuIcon(_ref) {
  var additionalClasses = _ref.additionalClasses,
      analyticsString = _ref.analyticsString,
      idString = _ref.idString,
      isOpen = _ref.isOpen,
      toggleNarrowNav = _ref.toggleNarrowNav,
      menuAriaControls = _ref.menuAriaControls;
  return /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-c-Masthead__menu sprk-o-Stack__item sprk-o-Stack__item--center-column@xxs', additionalClasses),
    "data-analytics": analyticsString,
    "data-id": idString
  }, /*#__PURE__*/React__default.createElement("button", {
    onClick: toggleNarrowNav,
    className: "sprk-c-Menu",
    type: "button",
    "aria-expanded": isOpen ? 'true' : 'false',
    "aria-controls": menuAriaControls
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "sprk-u-ScreenReaderText"
  }, "Toggle Navigation"), /*#__PURE__*/React__default.createElement("svg", {
    className: classnames('sprk-c-Icon', 'sprk-c-Icon--l', 'sprk-c-Menu__icon', {
      'sprk-c-Menu__icon--open': isOpen
    }),
    "aria-hidden": "true",
    viewBox: "0 0 64 64",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React__default.createElement("g", null, /*#__PURE__*/React__default.createElement("path", {
    className: "sprk-c-Menu__line sprk-c-Menu__line--two",
    d: "m8 32h48"
  }), /*#__PURE__*/React__default.createElement("path", {
    className: "sprk-c-Menu__line sprk-c-Menu__line--one",
    d: "m8 18.68h48"
  }), /*#__PURE__*/React__default.createElement("path", {
    className: "sprk-c-Menu__line sprk-c-Menu__line--three",
    d: "m8 45.32h48"
  })))));
}

SprkMastheadMenuIcon.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Determines if the Masthead Menu is open.
   */
  isOpen: propTypes.bool,

  /**
   * Function to run when the menu icon is clicked.
   */
  toggleNarrowNav: propTypes.func.isRequired
};
SprkMastheadMenuIcon.defaultProps = {
  additionalClasses: '',
  analyticsString: '',
  idString: '',
  isOpen: false
};

var SprkMastheadSelector = /*#__PURE__*/function (_Component) {
  _inherits(SprkMastheadSelector, _Component);

  var _super = _createSuper(SprkMastheadSelector);

  function SprkMastheadSelector(props) {
    var _this;

    _classCallCheck(this, SprkMastheadSelector);

    _this = _super.call(this);
    _this.state = {
      isOpen: false,
      triggerText: props.defaultTriggerText,
      choiceItems: props.choices.items.map(function (item) {
        return _objectSpread2({
          id: uniqueId_1()
        }, item);
      })
    };
    _this.openDropdown = _this.openDropdown.bind(_assertThisInitialized(_this));
    _this.closeDropdown = _this.closeDropdown.bind(_assertThisInitialized(_this));
    _this.updateTriggerText = _this.updateTriggerText.bind(_assertThisInitialized(_this));
    _this.closeOnEsc = _this.closeOnEsc.bind(_assertThisInitialized(_this));
    _this.closeOnClickOutside = _this.closeOnClickOutside.bind(_assertThisInitialized(_this));
    _this.dropdownRef = /*#__PURE__*/React__default.createRef();
    return _this;
  }

  _createClass(SprkMastheadSelector, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('keydown', this.closeOnEsc);
      window.addEventListener('focusin', this.closeOnClickOutside);
      window.addEventListener('click', this.closeOnClickOutside);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.closeOnEsc);
      window.removeEventListener('focusin', this.closeOnClickOutside);
      window.removeEventListener('click', this.closeOnClickOutside);
    }
  }, {
    key: "closeOnEsc",
    value: function closeOnEsc(e) {
      if (e.key === 'Escape') {
        this.closeDropdown();
      }
    }
  }, {
    key: "closeOnClickOutside",
    value: function closeOnClickOutside(e) {
      if (!this.dropdownRef.current.contains(e.target)) {
        this.closeDropdown();
      }
    }
  }, {
    key: "openDropdown",
    value: function openDropdown(e) {
      e.preventDefault();
      this.setState({
        isOpen: true
      });
    }
  }, {
    key: "closeDropdown",
    value: function closeDropdown() {
      this.setState({
        isOpen: false
      });
    }
  }, {
    key: "updateTriggerText",
    value: function updateTriggerText(text) {
      this.setState({
        triggerText: text
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          additionalClasses = _this$props.additionalClasses,
          additionalIconClasses = _this$props.additionalIconClasses,
          additionalTriggerClasses = _this$props.additionalTriggerClasses,
          additionalTriggerTextClasses = _this$props.additionalTriggerTextClasses,
          analyticsString = _this$props.analyticsString,
          choices = _this$props.choices,
          iconName = _this$props.iconName,
          idString = _this$props.idString,
          isFlush = _this$props.isFlush;
      var choiceFunction = choices.choiceFunction,
          footer = choices.footer;
      var _this$state = this.state,
          choiceItems = _this$state.choiceItems,
          isOpen = _this$state.isOpen,
          triggerText = _this$state.triggerText;
      return (
        /*#__PURE__*/
        // eslint-disable-next-line
        React__default.createElement("div", {
          role: "dialog",
          ref: this.dropdownRef,
          className: classnames({
            'sprk-c-MastheadMask': isOpen && isFlush
          }),
          onClick: function onClick() {
            if (isOpen) {
              _this2.closeDropdown();
            }
          }
        }, /*#__PURE__*/React__default.createElement("div", {
          className: classnames({
            'sprk-o-Box': isFlush
          })
        }, /*#__PURE__*/React__default.createElement(SprkLink, {
          variant: "plain",
          additionalClasses: classnames('sprk-c-Masthead__selector sprk-o-Stack sprk-o-Stack--split@xxs sprk-o-Stack--center-column', additionalTriggerClasses),
          "data-analytics": analyticsString,
          "data-id": idString,
          onClick: this.openDropdown,
          href: "#nogo",
          "data-sprk-dropdown-trigger": "dropdown-selector",
          "aria-haspopup": "true"
        }, /*#__PURE__*/React__default.createElement("span", {
          className: classnames('sprk-o-Stack__item sprk-o-Stack__item--flex@xxs', additionalTriggerTextClasses),
          role: "listbox"
        }, triggerText), /*#__PURE__*/React__default.createElement(SprkIcon, {
          iconName: iconName,
          additionalClasses: classnames('sprk-c-Icon--toggle sprk-Stack__item', additionalIconClasses)
        }))), isOpen && /*#__PURE__*/React__default.createElement("div", {
          className: classnames('sprk-c-Masthead__selector-dropdown sprk-c-Dropdown', additionalClasses),
          "data-sprk-dropdown": "dropdown-selector"
        }, /*#__PURE__*/React__default.createElement("div", {
          className: "sprk-c-Dropdown__header"
        }, /*#__PURE__*/React__default.createElement(SprkLink, {
          variant: "plain",
          additionalClasses: "sprk-o-Stack sprk-o-Stack--split@xxs sprk-o-Stack--center-column sprk-u-Width-100",
          onClick: this.closeDropdown,
          href: "#nogo",
          "aria-haspopup": "true"
        }, /*#__PURE__*/React__default.createElement("span", {
          className: "sprk-c-Dropdown__title sprk-b-TypeBodyTwo sprk-o-Stack__item sprk-o-Stack__item--flex@xxs"
        }, triggerText), /*#__PURE__*/React__default.createElement(SprkIcon, {
          iconName: "chevron-up",
          additionalClasses: "sprk-c-Icon--toggle sprk-Stack__item"
        }))), /*#__PURE__*/React__default.createElement("ul", {
          className: "sprk-c-Dropdown__links"
        }, choiceItems.map(function (item) {
          var element = item.element,
              href = item.href,
              title = item.title,
              information = item.information,
              value = item.value,
              rest = _objectWithoutProperties(item, ["element", "href", "title", "information", "value"]);

          var TagName = element || 'a';
          return /*#__PURE__*/React__default.createElement("li", {
            className: "sprk-c-Dropdown__item",
            key: item.id
          }, /*#__PURE__*/React__default.createElement(TagName, _extends({
            className: "sprk-c-Dropdown__link sprk-u-ptm",
            href: TagName === 'a' ? href || '#nogo' : undefined,
            onClick: function onClick() {
              _this2.updateTriggerText(title);

              _this2.closeDropdown();

              if (choiceFunction) {
                choiceFunction(value);
              }
            },
            role: "option"
          }, rest), /*#__PURE__*/React__default.createElement("p", {
            className: "sprk-b-TypeBodyOne"
          }, title), /*#__PURE__*/React__default.createElement("p", null, information)));
        })), footer && /*#__PURE__*/React__default.createElement("div", {
          className: "sprk-c-Dropdown__footer sprk-u-TextAlign--center"
        }, footer)))
      );
    }
  }]);

  return SprkMastheadSelector;
}(React.Component);

SprkMastheadSelector.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the icon.
   */
  additionalIconClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the trigger element.
   */
  additionalTriggerClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the trigger text.
   */
  additionalTriggerTextClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /** Configuration object that builds the dropdown */
  choices: propTypes.shape({
    /** A node to render at the foot of the dropdown menu */
    footer: propTypes.node,

    /** An array of objects that describe the items in the menu */
    items: propTypes.arrayOf(propTypes.shape({
      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func]),

      /**
       * The `href` value assigned the logo's link.
       */
      href: propTypes.string,

      /** The text for the masthead selector item.*/
      text: propTypes.string
    })).isRequired
  }).isRequired,
  // TODO: Get rid of this, not needed
  children: propTypes.node,

  /** The text set as the default of the trigger link */
  defaultTriggerText: propTypes.string,

  /** The icon type of the trigger icon */
  iconName: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /** Applies styles if the selector is flush with the sides of the viewport */
  isFlush: propTypes.bool
};
SprkMastheadSelector.defaultProps = {
  defaultTriggerText: 'Choose One...',
  iconName: 'chevron-down',
  isFlush: false
};

var SprkMastheadLittleNav = /*#__PURE__*/function (_Component) {
  _inherits(SprkMastheadLittleNav, _Component);

  var _super = _createSuper(SprkMastheadLittleNav);

  function SprkMastheadLittleNav(props) {
    var _this;

    _classCallCheck(this, SprkMastheadLittleNav);

    _this = _super.call(this, props);
    var links = props.links,
        utilityContents = props.utilityContents;
    _this.state = {
      utilityContents: utilityContents.map(function (item) {
        return _objectSpread2({
          id: uniqueId_1()
        }, item);
      }),
      links: links.map(function (link) {
        return _objectSpread2({
          id: uniqueId_1()
        }, link);
      })
    };
    return _this;
  }

  _createClass(SprkMastheadLittleNav, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          additionalClasses = _this$props.additionalClasses,
          analyticsString = _this$props.analyticsString,
          idString = _this$props.idString,
          selector = _this$props.selector,
          spacing = _this$props.spacing;
      var _this$state = this.state,
          links = _this$state.links,
          utilityContents = _this$state.utilityContents;
      return /*#__PURE__*/React__default.createElement("nav", {
        role: "navigation",
        "data-analytics": analyticsString,
        "data-id": idString,
        className: classnames('sprk-c-Masthead__little-nav sprk-o-Stack__item sprk-o-Stack__item--flex@xxs sprk-o-Stack sprk-o-Stack--misc-a sprk-o-Stack--split@xxs sprk-o-Stack--end-row', additionalClasses)
      }, selector.items && /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-o-Stack__item--flex@xxs sprk-o-Stack sprk-o-Stack--center-column sprk-o-Stack--center-row"
      }, /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-u-Position--relative"
      }, /*#__PURE__*/React__default.createElement(SprkMastheadSelector, {
        choices: selector
      }))), /*#__PURE__*/React__default.createElement("ul", {
        className: classnames('sprk-c-Masthead__site-links', 'sprk-o-Stack__item', 'sprk-o-HorizontalList', {
          'sprk-o-HorizontalList--spacing-large': spacing === 'large'
        }, {
          'sprk-o-HorizontalList--spacing-medium': spacing === 'medium'
        }, 'sprk-o-Stack__item--center-column')
      }, links.map(function (link) {
        var element = link.element,
            href = link.href,
            text = link.text,
            rest = _objectWithoutProperties(link, ["element", "href", "text"]);

        var TagName = element || 'a';
        return /*#__PURE__*/React__default.createElement("li", {
          key: link.id
        }, /*#__PURE__*/React__default.createElement(TagName, _extends({
          className: "sprk-b-Link sprk-b-Link--plain sprk-c-Masthead__link",
          href: TagName === 'a' ? href || '#nogo' : undefined
        }, rest), text));
      })), /*#__PURE__*/React__default.createElement("ul", {
        className: classnames('sprk-o-Stack__item', 'sprk-o-HorizontalList', {
          'sprk-o-HorizontalList--spacing-large': spacing === 'large'
        }, {
          'sprk-o-HorizontalList--spacing-medium': spacing === 'medium'
        }, 'sprk-o-Stack--center-column')
      }, utilityContents.map(function (item) {
        return /*#__PURE__*/React__default.createElement("li", {
          key: item.id
        }, item);
      })));
    }
  }]);

  return SprkMastheadLittleNav;
}(React.Component);

SprkMastheadLittleNav.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /** Used to render navigation links inside the little nav */
  links: propTypes.arrayOf(propTypes.shape({
    /**
     * Determines if link renders as an anchor tag, or router link.
     */
    element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

    /**
     * A space-separated string of classes to add to the link item.
     */
    additionalContainerClasses: propTypes.string,

    /** Adds a class if the link is active */
    isActive: propTypes.bool,

    /** The link text */
    text: propTypes.string
  })),

  /**
   * Expects a selector object that
   * represents choices to be supplied
   * to the selector in the wide viewport
   * version of the masthead.
   */
  selector: propTypes.shape({
    /**
     * An array of objects that describe the items in the menu
     */
    items: propTypes.arrayOf(propTypes.shape({
      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

      /** Assigned to href if the element is an anchor */
      href: propTypes.string,

      /** The text inside the item */
      text: propTypes.string
    }))
  }),

  /** Determines the spacing between little nav items */
  spacing: propTypes.oneOf(['medium', 'large']),

  /**
   * Expects an array containing components
   * to render in the utility area of littleNav,
   * in the wide viewport version of the masthead.
   */
  utilityContents: propTypes.arrayOf(propTypes.node)
};
SprkMastheadLittleNav.defaultProps = {
  additionalClasses: '',
  analyticsString: '',
  idString: '',
  links: [],
  spacing: 'medium',
  selector: {},
  utilityContents: []
};

var AnimateHeight_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _typeof$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
    return _typeof(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof(obj);
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _react2 = _interopRequireDefault(React__default);

  var _propTypes2 = _interopRequireDefault(propTypes);

  var _classnames2 = _interopRequireDefault(classnames);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (_typeof(call) === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + _typeof(superClass));
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var ANIMATION_STATE_CLASSES = {
    animating: 'rah-animating',
    animatingUp: 'rah-animating--up',
    animatingDown: 'rah-animating--down',
    animatingToHeightZero: 'rah-animating--to-height-zero',
    animatingToHeightAuto: 'rah-animating--to-height-auto',
    animatingToHeightSpecific: 'rah-animating--to-height-specific',
    "static": 'rah-static',
    staticHeightZero: 'rah-static--height-zero',
    staticHeightAuto: 'rah-static--height-auto',
    staticHeightSpecific: 'rah-static--height-specific'
  };
  var PROPS_TO_OMIT = ['animateOpacity', 'animationStateClasses', 'applyInlineTransitions', 'children', 'contentClassName', 'delay', 'duration', 'easing', 'height', 'onAnimationEnd', 'onAnimationStart'];

  function omit(obj) {
    for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      keys[_key - 1] = arguments[_key];
    }

    if (!keys.length) {
      return obj;
    }

    var res = {};
    var objectKeys = Object.keys(obj);

    for (var i = 0; i < objectKeys.length; i++) {
      var key = objectKeys[i];

      if (keys.indexOf(key) === -1) {
        res[key] = obj[key];
      }
    }

    return res;
  } // Start animation helper using nested requestAnimationFrames


  function startAnimationHelper(callback) {
    var requestAnimationFrameIDs = [];
    requestAnimationFrameIDs[0] = requestAnimationFrame(function () {
      requestAnimationFrameIDs[1] = requestAnimationFrame(function () {
        callback();
      });
    });
    return requestAnimationFrameIDs;
  }

  function cancelAnimationFrames(requestAnimationFrameIDs) {
    requestAnimationFrameIDs.forEach(function (id) {
      return cancelAnimationFrame(id);
    });
  }

  function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  }

  function isPercentage(height) {
    // Percentage height
    return typeof height === 'string' && height.search('%') === height.length - 1 && isNumber(height.substr(0, height.length - 1));
  }

  function runCallback(callback, params) {
    if (callback && typeof callback === 'function') {
      callback(params);
    }
  }

  var AnimateHeight = function (_React$Component) {
    _inherits(AnimateHeight, _React$Component);

    function AnimateHeight(props) {
      _classCallCheck(this, AnimateHeight);

      var _this = _possibleConstructorReturn(this, (AnimateHeight.__proto__ || Object.getPrototypeOf(AnimateHeight)).call(this, props));

      _this.animationFrameIDs = [];
      var height = 'auto';
      var overflow = 'visible';

      if (isNumber(props.height)) {
        // If value is string "0" make sure we convert it to number 0
        height = props.height < 0 || props.height === '0' ? 0 : props.height;
        overflow = 'hidden';
      } else if (isPercentage(props.height)) {
        // If value is string "0%" make sure we convert it to number 0
        height = props.height === '0%' ? 0 : props.height;
        overflow = 'hidden';
      }

      _this.animationStateClasses = _extends({}, ANIMATION_STATE_CLASSES, props.animationStateClasses);

      var animationStateClasses = _this.getStaticStateClasses(height);

      _this.state = {
        animationStateClasses: animationStateClasses,
        height: height,
        overflow: overflow,
        shouldUseTransitions: false
      };
      return _this;
    }

    _createClass(AnimateHeight, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var height = this.state.height; // Hide content if height is 0 (to prevent tabbing into it)
        // Check for contentElement is added cause this would fail in tests (react-test-renderer)
        // Read more here: https://github.com/Stanko/react-animate-height/issues/17

        if (this.contentElement && this.contentElement.style) {
          this.hideContent(height);
        }
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps, prevState) {
        var _this2 = this;

        var _props = this.props,
            delay = _props.delay,
            duration = _props.duration,
            height = _props.height,
            onAnimationEnd = _props.onAnimationEnd,
            onAnimationStart = _props.onAnimationStart; // Check if 'height' prop has changed

        if (this.contentElement && height !== prevProps.height) {
          var _cx; // Remove display: none from the content div
          // if it was hidden to prevent tabbing into it


          this.showContent(prevState.height); // Cache content height

          this.contentElement.style.overflow = 'hidden';
          var contentHeight = this.contentElement.offsetHeight;
          this.contentElement.style.overflow = ''; // set total animation time

          var totalDuration = duration + delay;
          var newHeight = null;
          var timeoutState = {
            height: null,
            // it will be always set to either 'auto' or specific number
            overflow: 'hidden'
          };
          var isCurrentHeightAuto = prevState.height === 'auto';

          if (isNumber(height)) {
            // If value is string "0" make sure we convert it to number 0
            newHeight = height < 0 || height === '0' ? 0 : height;
            timeoutState.height = newHeight;
          } else if (isPercentage(height)) {
            // If value is string "0%" make sure we convert it to number 0
            newHeight = height === '0%' ? 0 : height;
            timeoutState.height = newHeight;
          } else {
            // If not, animate to content height
            // and then reset to auto
            newHeight = contentHeight; // TODO solve contentHeight = 0

            timeoutState.height = 'auto';
            timeoutState.overflow = null;
          }

          if (isCurrentHeightAuto) {
            // This is the height to be animated to
            timeoutState.height = newHeight; // If previous height was 'auto'
            // set starting height explicitly to be able to use transition

            newHeight = contentHeight;
          } // Animation classes


          var animationStateClasses = (0, _classnames2["default"])((_cx = {}, _defineProperty(_cx, this.animationStateClasses.animating, true), _defineProperty(_cx, this.animationStateClasses.animatingUp, prevProps.height === 'auto' || height < prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingDown, height === 'auto' || height > prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingToHeightZero, timeoutState.height === 0), _defineProperty(_cx, this.animationStateClasses.animatingToHeightAuto, timeoutState.height === 'auto'), _defineProperty(_cx, this.animationStateClasses.animatingToHeightSpecific, timeoutState.height > 0), _cx)); // Animation classes to be put after animation is complete

          var timeoutAnimationStateClasses = this.getStaticStateClasses(timeoutState.height); // Set starting height and animating classes
          // We are safe to call set state as it will not trigger infinite loop
          // because of the "height !== prevProps.height" check

          this.setState({
            // eslint-disable-line react/no-did-update-set-state
            animationStateClasses: animationStateClasses,
            height: newHeight,
            overflow: 'hidden',
            // When animating from 'auto' we first need to set fixed height
            // that change should be animated
            shouldUseTransitions: !isCurrentHeightAuto
          }); // Clear timeouts

          clearTimeout(this.timeoutID);
          clearTimeout(this.animationClassesTimeoutID);

          if (isCurrentHeightAuto) {
            // When animating from 'auto' we use a short timeout to start animation
            // after setting fixed height above
            timeoutState.shouldUseTransitions = true;
            cancelAnimationFrames(this.animationFrameIDs);
            this.animationFrameIDs = startAnimationHelper(function () {
              _this2.setState(timeoutState); // ANIMATION STARTS, run a callback if it exists


              runCallback(onAnimationStart, {
                newHeight: timeoutState.height
              });
            }); // Set static classes and remove transitions when animation ends

            this.animationClassesTimeoutID = setTimeout(function () {
              _this2.setState({
                animationStateClasses: timeoutAnimationStateClasses,
                shouldUseTransitions: false
              }); // ANIMATION ENDS
              // Hide content if height is 0 (to prevent tabbing into it)


              _this2.hideContent(timeoutState.height); // Run a callback if it exists


              runCallback(onAnimationEnd, {
                newHeight: timeoutState.height
              });
            }, totalDuration);
          } else {
            // ANIMATION STARTS, run a callback if it exists
            runCallback(onAnimationStart, {
              newHeight: newHeight
            }); // Set end height, classes and remove transitions when animation is complete

            this.timeoutID = setTimeout(function () {
              timeoutState.animationStateClasses = timeoutAnimationStateClasses;
              timeoutState.shouldUseTransitions = false;

              _this2.setState(timeoutState); // ANIMATION ENDS
              // If height is auto, don't hide the content
              // (case when element is empty, therefore height is 0)


              if (height !== 'auto') {
                // Hide content if height is 0 (to prevent tabbing into it)
                _this2.hideContent(newHeight); // TODO solve newHeight = 0

              } // Run a callback if it exists


              runCallback(onAnimationEnd, {
                newHeight: newHeight
              });
            }, totalDuration);
          }
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        cancelAnimationFrames(this.animationFrameIDs);
        clearTimeout(this.timeoutID);
        clearTimeout(this.animationClassesTimeoutID);
        this.timeoutID = null;
        this.animationClassesTimeoutID = null;
        this.animationStateClasses = null;
      }
    }, {
      key: 'showContent',
      value: function showContent(height) {
        if (height === 0) {
          this.contentElement.style.display = '';
        }
      }
    }, {
      key: 'hideContent',
      value: function hideContent(newHeight) {
        if (newHeight === 0) {
          this.contentElement.style.display = 'none';
        }
      }
    }, {
      key: 'getStaticStateClasses',
      value: function getStaticStateClasses(height) {
        var _cx2;

        return (0, _classnames2["default"])((_cx2 = {}, _defineProperty(_cx2, this.animationStateClasses["static"], true), _defineProperty(_cx2, this.animationStateClasses.staticHeightZero, height === 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightSpecific, height > 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightAuto, height === 'auto'), _cx2));
      }
    }, {
      key: 'render',
      value: function render() {
        var _cx3,
            _this3 = this;

        var _props2 = this.props,
            animateOpacity = _props2.animateOpacity,
            applyInlineTransitions = _props2.applyInlineTransitions,
            children = _props2.children,
            className = _props2.className,
            contentClassName = _props2.contentClassName,
            duration = _props2.duration,
            easing = _props2.easing,
            delay = _props2.delay,
            style = _props2.style;
        var _state = this.state,
            height = _state.height,
            overflow = _state.overflow,
            animationStateClasses = _state.animationStateClasses,
            shouldUseTransitions = _state.shouldUseTransitions;

        var componentStyle = _extends({}, style, {
          height: height,
          overflow: overflow || style.overflow
        });

        if (shouldUseTransitions && applyInlineTransitions) {
          componentStyle.transition = 'height ' + duration + 'ms ' + easing + ' ' + delay + 'ms'; // Include transition passed through styles

          if (style.transition) {
            componentStyle.transition = style.transition + ', ' + componentStyle.transition;
          } // Add webkit vendor prefix still used by opera, blackberry...


          componentStyle.WebkitTransition = componentStyle.transition;
        }

        var contentStyle = {};

        if (animateOpacity) {
          contentStyle.transition = 'opacity ' + duration + 'ms ' + easing + ' ' + delay + 'ms'; // Add webkit vendor prefix still used by opera, blackberry...

          contentStyle.WebkitTransition = contentStyle.transition;

          if (height === 0) {
            contentStyle.opacity = 0;
          }
        }

        var componentClasses = (0, _classnames2["default"])((_cx3 = {}, _defineProperty(_cx3, animationStateClasses, true), _defineProperty(_cx3, className, className), _cx3));
        return _react2["default"].createElement('div', _extends({}, omit.apply(undefined, [this.props].concat(PROPS_TO_OMIT)), {
          'aria-hidden': height === 0,
          className: componentClasses,
          style: componentStyle
        }), _react2["default"].createElement('div', {
          className: contentClassName,
          style: contentStyle,
          ref: function ref(el) {
            return _this3.contentElement = el;
          }
        }, children));
      }
    }]);

    return AnimateHeight;
  }(_react2["default"].Component);

  var heightPropType = function heightPropType(props, propName, componentName) {
    var value = props[propName];

    if (typeof value === 'number' && value >= 0 || isPercentage(value) || value === 'auto') {
      return null;
    }

    return new TypeError('value "' + value + '" of type "' + (typeof value === 'undefined' ? 'undefined' : _typeof$1(value)) + '" is invalid type for ' + propName + ' in ' + componentName + '. ' + 'It needs to be a positive number, string "auto" or percentage string (e.g. "15%").');
  };

  AnimateHeight.propTypes = {
    animateOpacity: _propTypes2["default"].bool,
    animationStateClasses: _propTypes2["default"].object,
    applyInlineTransitions: _propTypes2["default"].bool,
    children: _propTypes2["default"].any.isRequired,
    className: _propTypes2["default"].string,
    contentClassName: _propTypes2["default"].string,
    duration: _propTypes2["default"].number,
    delay: _propTypes2["default"].number,
    easing: _propTypes2["default"].string,
    height: heightPropType,
    onAnimationEnd: _propTypes2["default"].func,
    onAnimationStart: _propTypes2["default"].func,
    style: _propTypes2["default"].object
  };
  AnimateHeight.defaultProps = {
    animateOpacity: false,
    animationStateClasses: ANIMATION_STATE_CLASSES,
    applyInlineTransitions: true,
    duration: 250,
    delay: 0,
    easing: 'ease',
    style: {}
  };
  exports["default"] = AnimateHeight;
});
var AnimateHeight = unwrapExports(AnimateHeight_1);

var SprkMastheadAccordionItem = /*#__PURE__*/function (_Component) {
  _inherits(SprkMastheadAccordionItem, _Component);

  var _super = _createSuper(SprkMastheadAccordionItem);

  function SprkMastheadAccordionItem(props) {
    var _this;

    _classCallCheck(this, SprkMastheadAccordionItem);

    _this = _super.call(this, props);
    var _this$props = _this.props,
        defaultOpen = _this$props.defaultOpen,
        subNavLinks = _this$props.subNavLinks;
    _this.state = {
      isOpen: defaultOpen || false,
      height: defaultOpen ? 'auto' : 0,
      subNavLinks: subNavLinks.map(function (link) {
        return _objectSpread2({
          id: uniqueId_1()
        }, link);
      })
    };
    _this.toggleAccordionOpen = _this.toggleAccordionOpen.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SprkMastheadAccordionItem, [{
    key: "toggleAccordionOpen",
    value: function toggleAccordionOpen() {
      this.setState(function (prevState) {
        return {
          isOpen: !prevState.isOpen,
          height: !prevState.isOpen ? 'auto' : 0
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          additionalClasses = _this$props2.additionalClasses,
          analyticsString = _this$props2.analyticsString,
          clickFunction = _this$props2.clickFunction,
          defaultOpen = _this$props2.defaultOpen,
          element = _this$props2.element,
          href = _this$props2.href,
          idString = _this$props2.idString,
          isActive = _this$props2.isActive,
          isButton = _this$props2.isButton,
          leadingIcon = _this$props2.leadingIcon,
          subNavLinks = _this$props2.subNavLinks,
          text = _this$props2.text,
          itemId = _this$props2.itemId,
          rest = _objectWithoutProperties(_this$props2, ["additionalClasses", "analyticsString", "clickFunction", "defaultOpen", "element", "href", "idString", "isActive", "isButton", "leadingIcon", "subNavLinks", "text", "itemId"]);

      var _this$state = this.state,
          isOpen = _this$state.isOpen,
          height = _this$state.height,
          stateLinks = _this$state.subNavLinks;
      var TagName = element;
      return /*#__PURE__*/React__default.createElement("li", {
        className: classnames('sprk-c-MastheadAccordion__item', {
          'sprk-c-MastheadAccordion__item--open': isOpen
        }, {
          'sprk-c-MastheadAccordion__item--active': isActive
        }, {
          'sprk-o-Box': isButton
        }, additionalClasses),
        "data-analytics": analyticsString,
        "data-id": idString
      }, stateLinks.length > 0 && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("button", {
        className: "sprk-c-MastheadAccordion__summary",
        onClick: this.toggleAccordionOpen,
        "aria-expanded": isOpen ? 'true' : 'false',
        "aria-controls": itemId
      }, /*#__PURE__*/React__default.createElement("span", {
        className: "sprk-b-TypeBodyOne sprk-c-MastheadAccordion__heading"
      }, text), /*#__PURE__*/React__default.createElement(SprkIcon, {
        additionalClasses: classnames('sprk-c-MastheadAccordion__icon', {
          'sprk-c-Icon--open': isOpen
        }),
        iconName: "chevron-down"
      })), /*#__PURE__*/React__default.createElement(AnimateHeight, {
        duration: 300,
        height: height
      }, /*#__PURE__*/React__default.createElement("ul", {
        className: "sprk-b-List sprk-b-List--bare sprk-c-MastheadAccordion__details",
        id: itemId
      }, stateLinks.map(function (subnavlink) {
        var innerElement = subnavlink.element,
            innerHref = subnavlink.href,
            innerId = subnavlink.id,
            innerText = subnavlink.text,
            innerRest = _objectWithoutProperties(subnavlink, ["element", "href", "id", "text"]);

        var InnerTagName = innerElement || 'a';
        return /*#__PURE__*/React__default.createElement("li", {
          key: innerId
        }, /*#__PURE__*/React__default.createElement(InnerTagName, _extends({
          onClick: clickFunction,
          href: InnerTagName === 'a' ? innerHref || '#nogo' : undefined,
          className: classnames('sprk-b-Link sprk-b-Link--plain sprk-c-Masthead__link')
        }, innerRest), innerText));
      })))), stateLinks.length <= 0 && /*#__PURE__*/React__default.createElement(TagName, _extends({
        onClick: clickFunction,
        className: classnames({
          'sprk-c-MastheadAccordion__summary': !isButton
        }, {
          'sprk-c-Button sprk-c-Button--secondary sprk-c-Button--compact sprk-c-Button--full@s': isButton
        }),
        href: TagName === 'a' ? href : undefined
      }, rest), /*#__PURE__*/React__default.createElement("span", {
        className: classnames({
          'sprk-c-MastheadAccordion__heading': !isButton
        })
      }, leadingIcon && /*#__PURE__*/React__default.createElement(SprkIcon, {
        additionalClasses: "sprk-c-Icon--stroke-current-color sprk-c-Icon--l sprk-u-mrs",
        iconName: leadingIcon
      }), text)));
    }
  }]);

  return SprkMastheadAccordionItem;
}(React.Component);

SprkMastheadAccordionItem.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * Expects a function to be executed when a user clicks a link or a link inside the accordion item.
   */
  clickFunction: propTypes.func,

  /**
   * Decides whether the Accordion item should render open by default.
   */
  defaultOpen: propTypes.bool,

  /**
   * The element to render, could be 'a' or a Component.
   */
  element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

  /**
   * Assigned to the `href` attribute if element is 'a'.
   */
  href: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * 	If true, denotes that the link represents the current page.
   */
  isActive: propTypes.bool,

  /** Will render the element as a button with correct style. */
  isButton: propTypes.bool,

  /**
   * The name of the icon to the left of the link text.
   * Will render in compatible components like narrowNav.
   */
  leadingIcon: propTypes.string,

  /** Text for the Accordion Item */
  text: propTypes.string,

  /**
   * Expects an array containing link objects.
   * Will be treated as a subnav to the link.
   */
  subNavLinks: propTypes.arrayOf(propTypes.shape({
    /**
     * Determines if link renders as an anchor tag, or router link.
     */
    element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

    /**
     * The `href` value assigned the subNavLink item.
     */
    href: propTypes.string,

    /**
     * Text for SubNavLink item.
     */
    text: propTypes.string
  }))
};
SprkMastheadAccordionItem.defaultProps = {
  clickFunction: function clickFunction() {},
  defaultOpen: false,
  element: 'a',
  isActive: false,
  isButton: false,
  subNavLinks: [],
  href: '#nogo',
  itemId: uniqueId_1('sprk_accordion_item_')
};

var SprkMastheadAccordion = /*#__PURE__*/function (_React$Component) {
  _inherits(SprkMastheadAccordion, _React$Component);

  var _super = _createSuper(SprkMastheadAccordion);

  function SprkMastheadAccordion(props) {
    var _this;

    _classCallCheck(this, SprkMastheadAccordion);

    _this = _super.call(this, props);
    _this.state = {
      links: props.links.map(function (item) {
        return _objectSpread2({
          id: uniqueId_1()
        }, item);
      })
    };
    return _this;
  }

  _createClass(SprkMastheadAccordion, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          additionalClasses = _this$props.additionalClasses,
          analyticsString = _this$props.analyticsString,
          idString = _this$props.idString,
          linkSelectionFunction = _this$props.linkSelectionFunction;
      var links = this.state.links;
      return /*#__PURE__*/React__default.createElement("ul", {
        "data-analytics": analyticsString,
        "data-id": idString,
        className: classnames('sprk-c-MastheadAccordion sprk-b-List sprk-b-List--bare', additionalClasses)
      }, links.map(function (link) {
        return /*#__PURE__*/React__default.createElement(SprkMastheadAccordionItem, _extends({
          clickFunction: linkSelectionFunction,
          key: link.id,
          itemId: link.itemId
        }, link));
      }));
    }
  }]);

  return SprkMastheadAccordion;
}(React__default.Component);

SprkMastheadAccordion.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Expects a function that gets executed when a user clicks a link inside the Accordion.
   */
  linkSelectionFunction: propTypes.func,

  /**
   * Used to render children of `SprkMastheadAccordionItem`.
   */
  links: propTypes.arrayOf(propTypes.shape({
    /**
     * Determines if link renders as an anchor tag, or router link.
     */
    element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

    /**
     * When the link is rendered to a compatible element
     * (narrowNav), will draw the specified icon
     * to the left of the link text.
     */
    leadingIcon: propTypes.string,

    /**
     * Text for accordion link
     */
    text: propTypes.string,

    /**
     * Expects an array containing link objects.
     *  Will be treated as a subnav to the link.
     */
    subNavLinks: propTypes.arrayOf(propTypes.shape({
      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

      /**
       * When the link is rendered to a compatible element
       * (narrowNav), will draw the specified icon
       * to the left of the link text.
       */
      leadingIcon: propTypes.string,

      /**
       * text for sub nav link
       */
      text: propTypes.string
    }))
  }))
};
SprkMastheadAccordion.defaultProps = {
  linkSelectionFunction: function linkSelectionFunction() {},
  links: []
};

var SprkMastheadNarrowNav = function SprkMastheadNarrowNav(_ref) {
  var idString = _ref.idString,
      linkSelectionFunction = _ref.linkSelectionFunction,
      isOpen = _ref.isOpen,
      links = _ref.links,
      selector = _ref.selector,
      narrowNavId = _ref.narrowNavId,
      rest = _objectWithoutProperties(_ref, ["idString", "linkSelectionFunction", "isOpen", "links", "selector", "narrowNavId"]);

  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, isOpen && /*#__PURE__*/React__default.createElement("nav", _extends({
    className: "sprk-c-Masthead__narrow-nav",
    role: "navigation",
    "data-id": idString,
    id: narrowNavId
  }, rest), selector.items && /*#__PURE__*/React__default.createElement(SprkMastheadSelector, {
    isFlush: true,
    choices: selector
  }), /*#__PURE__*/React__default.createElement(SprkMastheadAccordion, {
    linkSelectionFunction: linkSelectionFunction,
    links: links
  })));
};

SprkMastheadNarrowNav.propTypes = {
  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * If `true`, will render the Narrow Navigation.
   */
  isOpen: propTypes.bool,

  /**
   * Expects a function to be executed when a user clicks a navigating link from the menu.
   */
  linkSelectionFunction: propTypes.func,

  /**
   * Configuration to build the links inside the Narrow Navigation.
   */
  links: propTypes.arrayOf(propTypes.shape({
    /**
     * Determines if link renders as an anchor tag, or router link.
     */
    element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

    /**
     * Text of the link
     */
    text: propTypes.string,

    /**
     * `id` of the link item
     */
    itemId: propTypes.string,

    /**
     * Expects an array containing link objects.
     * Will be treated as a subnav to the link.
     */
    subNavLinks: propTypes.arrayOf(propTypes.shape({
      /** Text of subnav link */
      text: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType])
    }))
  })).isRequired,

  /**
   * Expects a selector object that
   * represents choices to be supplied
   * to the selector in the wide viewport
   * version of the masthead.
   */
  selector: propTypes.shape({
    /** The function that runs once a choice is made. */
    choiceFunction: propTypes.func,

    /**
     * 	Expects a Component to render at the foot of the open selector.
     */
    footer: propTypes.node,

    /**
     * Object that configures the items inside the selector
     */
    items: propTypes.arrayOf(propTypes.shape({
      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

      /**
       * Additional text providing context for item.
       */
      information: propTypes.string,
      // TODO: get rid of this -- it does nothing but add a nonvalid "text" attribute on the item
      text: propTypes.string,

      /**
       * The main headline of the item
       */
      title: propTypes.string,

      /**
       * The value assigned for the selector
       */
      value: propTypes.string
    }))
  })
};
SprkMastheadNarrowNav.defaultProps = {
  linkSelectionFunction: function linkSelectionFunction() {},
  idString: '',
  isOpen: false,
  selector: {}
};

var SprkMastheadDropdown = /*#__PURE__*/function (_Component) {
  _inherits(SprkMastheadDropdown, _Component);

  var _super = _createSuper(SprkMastheadDropdown);

  function SprkMastheadDropdown(props) {
    var _this;

    _classCallCheck(this, SprkMastheadDropdown);

    _this = _super.call(this, props);
    _this.state = {
      isOpen: false,
      choiceItems: props.choices.items.map(function (item) {
        return _objectSpread2({
          id: uniqueId_1()
        }, item);
      })
    };
    _this.toggleDropdownOpen = _this.toggleDropdownOpen.bind(_assertThisInitialized(_this));
    _this.closeOnEsc = _this.closeOnEsc.bind(_assertThisInitialized(_this));
    _this.closeOnClickOutside = _this.closeOnClickOutside.bind(_assertThisInitialized(_this));
    _this.closeDropdown = _this.closeDropdown.bind(_assertThisInitialized(_this));
    _this.myRef = /*#__PURE__*/React__default.createRef();
    return _this;
  }

  _createClass(SprkMastheadDropdown, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('keydown', this.closeOnEsc);
      window.addEventListener('focusin', this.closeOnClickOutside);
      window.addEventListener('click', this.closeOnClickOutside);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.closeOnEsc);
      window.removeEventListener('focusin', this.closeOnClickOutside);
      window.removeEventListener('click', this.closeOnClickOutside);
    }
  }, {
    key: "closeOnEsc",
    value: function closeOnEsc(e) {
      if (e.key === 'Escape') {
        this.closeDropdown();
      }
    }
  }, {
    key: "closeOnClickOutside",
    value: function closeOnClickOutside(e) {
      if (!this.myRef.current.contains(e.target)) {
        this.closeDropdown();
      }
    }
  }, {
    key: "closeDropdown",
    value: function closeDropdown() {
      this.setState({
        isOpen: false
      });
    }
  }, {
    key: "toggleDropdownOpen",
    value: function toggleDropdownOpen() {
      this.setState(function (prevState) {
        return {
          isOpen: !prevState.isOpen
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          additionalClasses = _this$props.additionalClasses,
          additionalIconClasses = _this$props.additionalIconClasses,
          additionalTriggerClasses = _this$props.additionalTriggerClasses,
          additionalTriggerTextClasses = _this$props.additionalTriggerTextClasses,
          analyticsString = _this$props.analyticsString,
          iconName = _this$props.iconName,
          idString = _this$props.idString,
          title = _this$props.title,
          triggerText = _this$props.triggerText,
          variant = _this$props.variant;
      var _this$state = this.state,
          choiceItems = _this$state.choiceItems,
          isOpen = _this$state.isOpen;
      return /*#__PURE__*/React__default.createElement("div", {
        ref: this.myRef
      }, /*#__PURE__*/React__default.createElement(SprkLink, {
        variant: "plain",
        additionalClasses: classnames({
          'sprk-u-mrs': variant === 'informational'
        }, additionalTriggerClasses),
        href: "#nogo",
        "data-analytics": analyticsString || 'undefined',
        "data-id": idString || 'undefined',
        "aria-haspopup": "true",
        role: "listbox",
        onClick: this.toggleDropdownOpen
      }, /*#__PURE__*/React__default.createElement("span", {
        className: classnames(additionalTriggerTextClasses)
      }, triggerText), /*#__PURE__*/React__default.createElement(SprkIcon, {
        additionalClasses: classnames('sprk-c-Icon--stroke-current-color sprk-u-mls', additionalIconClasses),
        iconName: iconName
      })), isOpen && /*#__PURE__*/React__default.createElement("div", {
        className: classnames('sprk-c-Dropdown sprk-u-TextAlign--left', additionalClasses)
      }, title && /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-c-Dropdown__header"
      }, /*#__PURE__*/React__default.createElement("h2", {
        className: "sprk-c-Dropdown__title"
      }, title)), /*#__PURE__*/React__default.createElement("ul", {
        className: "sprk-c-Dropdown__links"
      }, choiceItems.map(function (choice) {
        var element = choice.element,
            href = choice.href,
            text = choice.text,
            rest = _objectWithoutProperties(choice, ["element", "href", "text"]);

        var TagName = element || 'a';
        return /*#__PURE__*/React__default.createElement("li", {
          className: "sprk-c-Dropdown__item",
          key: choice.id
        }, /*#__PURE__*/React__default.createElement(TagName, _extends({
          href: TagName === 'a' ? href || '#nogo' : undefined,
          className: "sprk-c-Dropdown__link"
        }, rest), text));
      }))));
    }
  }]);

  return SprkMastheadDropdown;
}(React.Component);

SprkMastheadDropdown.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the icon.
   */
  additionalIconClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the trigger element.
   */
  additionalTriggerClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the trigger text.
   */
  additionalTriggerTextClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * Children to render inside of SprkMastheadDropdown
   */
  children: propTypes.node,

  /** Choices object that builds the dropdown content. */
  choices: propTypes.shape({
    /** An array of objects that describe the items in the menu. */
    items: propTypes.arrayOf(propTypes.shape({
      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.node, propTypes.elementType]),

      /** Assigned to `href` of the dropdown item. */
      href: propTypes.string,

      /** Text title for the dropdown choice. */
      text: propTypes.string
    }))
  }),

  /** The text set as the default of the trigger link. */
  triggerText: propTypes.string,

  /** The icon type of the trigger icon .*/
  iconName: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /** The headline text of the optional header above the choices in the dropdown. */
  title: propTypes.string,

  /** Determines the type of SprkMastheadDropdown to render. */
  variant: propTypes.oneOf(['base', 'informational'])
};
SprkMastheadDropdown.defaultProps = {
  triggerText: 'Choose One...',
  iconName: 'chevron-down',
  variant: 'base',
  choices: {
    items: []
  }
};

var SprkMastheadBigNav = /*#__PURE__*/function (_Component) {
  _inherits(SprkMastheadBigNav, _Component);

  var _super = _createSuper(SprkMastheadBigNav);

  function SprkMastheadBigNav(props) {
    var _this;

    _classCallCheck(this, SprkMastheadBigNav);

    _this = _super.call(this, props);
    _this.state = {
      links: props.links.map(function (link) {
        return _objectSpread2({
          id: uniqueId_1()
        }, link);
      })
    };
    return _this;
  }

  _createClass(SprkMastheadBigNav, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          additionalClasses = _this$props.additionalClasses,
          analyticsString = _this$props.analyticsString,
          idString = _this$props.idString;
      var links = this.state.links;
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item"
      }, /*#__PURE__*/React__default.createElement("nav", {
        className: classnames('sprk-c-Masthead__big-nav', additionalClasses),
        "data-analytics": analyticsString,
        "data-id": idString,
        role: "navigation"
      }, /*#__PURE__*/React__default.createElement("ul", {
        className: "sprk-c-Masthead__big-nav-items sprk-o-Stack sprk-o-Stack--misc-a sprk-o-Stack--center-row sprk-o-Stack--split@xxs sprk-b-List sprk-b-List--bare"
      }, links.map(function (link) {
        var element = link.element,
            additionalContainerClasses = link.additionalContainerClasses,
            isActive = link.isActive,
            text = link.text,
            rest = _objectWithoutProperties(link, ["element", "additionalContainerClasses", "isActive", "text"]);

        var TagName = element || 'a';
        return /*#__PURE__*/React__default.createElement("li", {
          className: classnames('sprk-c-Masthead__big-nav-item sprk-o-Stack__item', {
            'sprk-c-Masthead__link--active': isActive
          }, additionalContainerClasses),
          key: link.id
        }, !link.subNavLinks && /*#__PURE__*/React__default.createElement(TagName, _extends({
          className: classnames('sprk-b-Link sprk-b-Link--plain sprk-c-Masthead__link sprk-c-Masthead__link--big-nav')
        }, rest), text), link.subNavLinks && /*#__PURE__*/React__default.createElement(SprkMastheadDropdown, {
          choices: {
            items: link.subNavLinks
          },
          triggerText: link.text
        }));
      })))));
    }
  }]);

  return SprkMastheadBigNav;
}(React.Component);

SprkMastheadBigNav.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
    * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
    */
  idString: propTypes.string,

  /** Used to render navigation inside. */
  links: propTypes.arrayOf(propTypes.shape({
    /**
     * Determines if link renders as an anchor tag, or router link.
     */
    element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

    /**
     * A space-separated string of classes to add to the link item.
     */
    additionalContainerClasses: propTypes.string,

    /** Adds a class if the link is active. */
    isActive: propTypes.bool,

    /** The link text. */
    text: propTypes.string
  })).isRequired
};
SprkMastheadBigNav.defaultProps = {
  additionalClasses: '',
  analyticsString: '',
  idString: ''
};

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */

var now = function now() {
  return _root.Date.now();
};

var now_1 = now;

/** Used as references for various `Number` constants. */

var NAN = 0 / 0;
/** Used to match leading and trailing whitespace. */

var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */

var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */

var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */

var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }

  if (isSymbol_1(value)) {
    return NAN;
  }

  if (isObject_1(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject_1(other) ? other + '' : other;
  }

  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }

  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

var toNumber_1 = toNumber;

/** Error message constants. */

var FUNC_ERROR_TEXT = 'Expected a function';
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeMax$1 = Math.max,
    nativeMin = Math.min;
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  wait = toNumber_1(wait) || 0;

  if (isObject_1(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax$1(toNumber_1(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;
    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time; // Start the timer for the trailing edge.

    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.

    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }

  function timerExpired() {
    var time = now_1();

    if (shouldInvoke(time)) {
      return trailingEdge(time);
    } // Restart the timer.


    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.

    if (trailing && lastArgs) {
      return invokeFunc(time);
    }

    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }

    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now_1());
  }

  function debounced() {
    var time = now_1(),
        isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }

      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }

    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }

    return result;
  }

  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

var debounce_1 = debounce;

/** Error message constants. */

var FUNC_ERROR_TEXT$1 = 'Expected a function';
/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */

function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }

  if (isObject_1(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  return debounce_1(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

var throttle_1 = throttle;

var SprkMasthead = /*#__PURE__*/function (_Component) {
  _inherits(SprkMasthead, _Component);

  var _super = _createSuper(SprkMasthead);

  function SprkMasthead() {
    var _this;

    _classCallCheck(this, SprkMasthead);

    _this = _super.call(this);
    _this.state = {
      narrowNavOpen: false,
      isScrolled: false,
      isHidden: false,
      isNarrowLayout: false,
      scrollDirection: 'up',
      currentLayout: false,
      scrollPosition: 0
    };
    _this.toggleNarrowNav = _this.toggleNarrowNav.bind(_assertThisInitialized(_this));
    _this.toggleScrollEvent = _this.toggleScrollEvent.bind(_assertThisInitialized(_this));
    _this.checkScrollDirection = _this.checkScrollDirection.bind(_assertThisInitialized(_this));
    _this.throttledCheckScrollDirection = throttle_1(_this.checkScrollDirection, 500);
    _this.toggleMenu = _this.toggleMenu.bind(_assertThisInitialized(_this));
    _this.checkIfNarrowLayout = _this.checkIfNarrowLayout.bind(_assertThisInitialized(_this));
    _this.checkLayoutOnResize = _this.checkLayoutOnResize.bind(_assertThisInitialized(_this));
    _this.throttledCheckLayoutOnResize = throttle_1(_this.checkLayoutOnResize, 500);
    _this.closeNarrowNavMenu = _this.closeNarrowNavMenu.bind(_assertThisInitialized(_this));
    _this.setIsScrolled = _this.setIsScrolled.bind(_assertThisInitialized(_this));
    _this.getCurrentLayout = _this.getCurrentLayout.bind(_assertThisInitialized(_this));
    _this.isElementVisible = _this.isElementVisible.bind(_assertThisInitialized(_this));
    _this.scrollYDirection = _this.scrollYDirection.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SprkMasthead, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        isNarrowLayout: this.isElementVisible('.sprk-c-Masthead__menu')
      });

      if (typeof window !== 'undefined') {
        window.addEventListener('scroll', this.setIsScrolled);
        window.addEventListener('orientationchange', this.closeNarrowNavMenu);
        window.addEventListener('resize', this.throttledCheckLayoutOnResize);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (typeof window !== 'undefined') {
        window.removeEventListener('scroll', this.setIsScrolled, false);
        window.removeEventListener('scroll', this.throttledCheckScrollDirection, false);
        window.removeEventListener('orientationchange', this.closeNarrowNavMenu, false);
        window.addEventListener('resize', this.throttledCheckLayoutOnResize, false);
      }
    }
  }, {
    key: "isElementVisible",
    value: function isElementVisible(selector) {
      if (typeof window === 'undefined') {
        return;
      }

      var element = document.querySelector(selector);
      if (!element) return;
      var elementDisplayValue = window.getComputedStyle(element).display;
      var elementVisibilityValue = window.getComputedStyle(element).visibility;
      var elementIsVisible = elementDisplayValue === 'none' || elementVisibilityValue === 'hidden' ? false : true;
      return elementIsVisible;
    }
  }, {
    key: "scrollYDirection",
    value: function scrollYDirection() {
      if (typeof window === 'undefined') {
        return;
      }

      var newScrollPos = window.scrollY;
      if (newScrollPos < 0) return;
      var diff = newScrollPos - this.state.scrollPosition;
      var direction = diff > 0 ? 'down' : 'up';
      this.setState({
        scrollPosition: newScrollPos
      });
      return direction;
    }
  }, {
    key: "toggleNarrowNav",
    value: function toggleNarrowNav() {
      document.body.classList.toggle('sprk-u-Overflow--hidden');
      document.documentElement.classList.toggle('sprk-u-Overflow--hidden');
      this.setState(function (prevState) {
        return {
          narrowNavOpen: !prevState.narrowNavOpen
        };
      }); // Don't add height: 100% if site's html & body el already have it (reapplying makes page jump)

      if (document.documentElement.style.height !== '100%') {
        document.documentElement.classList.toggle('sprk-u-Height--100');
      }

      if (document.body.style.height !== '100%') {
        document.body.classList.toggle('sprk-u-Height--100');
      }
    }
  }, {
    key: "closeNarrowNavMenu",
    value: function closeNarrowNavMenu() {
      this.setState({
        narrowNavOpen: false
      });
      document.body.classList.remove('sprk-u-Overflow--hidden');
      document.documentElement.classList.remove('sprk-u-Overflow--hidden');
      document.body.classList.remove('sprk-u-Height--100');
      document.documentElement.classList.remove('sprk-u-Height--100');
    }
  }, {
    key: "setIsScrolled",
    value: function setIsScrolled() {
      if (typeof window === 'undefined') {
        return;
      }

      if (window.scrollY >= 10) {
        this.setState({
          isScrolled: true
        });
      } else {
        this.setState({
          isScrolled: false
        });
      }
    }
  }, {
    key: "getCurrentLayout",
    value: function getCurrentLayout() {
      this.setState({
        currentLayout: this.isElementVisible('.sprk-c-Masthead__menu')
      });
    }
  }, {
    key: "checkIfNarrowLayout",
    value: function checkIfNarrowLayout() {
      if (this.state.isNarrowLayout !== this.state.currentLayout) {
        this.setState({
          isNarrowLayout: this.state.currentLayout
        });
        this.toggleScrollEvent();

        if (!this.state.isNarrowLayout) {
          this.setState({
            isHidden: false
          });
        }
      }
    }
  }, {
    key: "checkLayoutOnResize",
    value: function checkLayoutOnResize() {
      this.getCurrentLayout();
      this.checkIfNarrowLayout();
    }
  }, {
    key: "toggleMenu",
    value: function toggleMenu() {
      if (this.state.scrollDirection === 'down') {
        this.setState({
          isHidden: true
        });
      } else {
        this.setState({
          isHidden: false
        });
      }
    }
  }, {
    key: "checkScrollDirection",
    value: function checkScrollDirection() {
      var newDirection = this.scrollYDirection();

      if (this.state.scrollDirection !== newDirection) {
        this.setState({
          scrollDirection: newDirection
        });
        this.toggleMenu();
      }
    }
  }, {
    key: "toggleScrollEvent",
    value: function toggleScrollEvent() {
      if (typeof window === 'undefined') {
        return;
      }

      if (this.state.isNarrowLayout) {
        window.addEventListener('scroll', this.throttledCheckScrollDirection);
      } else {
        window.removeEventListener('scroll', this.throttledCheckScrollDirection, false);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          additionalClasses = _this$props.additionalClasses,
          analyticsString = _this$props.analyticsString,
          bigNavLinks = _this$props.bigNavLinks,
          idString = _this$props.idString,
          littleNavLinks = _this$props.littleNavLinks,
          narrowNavLinks = _this$props.narrowNavLinks,
          narrowSelector = _this$props.narrowSelector,
          siteLogo = _this$props.siteLogo,
          selector = _this$props.selector,
          utilityContents = _this$props.utilityContents,
          variant = _this$props.variant,
          logoLink = _this$props.logoLink,
          logoLinkElement = _this$props.logoLinkElement,
          navLink = _this$props.navLink,
          narrowNavSelectionFunction = _this$props.narrowNavSelectionFunction,
          narrowNavId = _this$props.narrowNavId;
      var _this$state = this.state,
          isScrolled = _this$state.isScrolled,
          narrowNavOpen = _this$state.narrowNavOpen,
          isHidden = _this$state.isHidden; // On render check whether to add the scroll event

      this.toggleScrollEvent();
      return /*#__PURE__*/React__default.createElement("header", {
        className: classnames('sprk-c-Masthead', 'sprk-o-Stack', {
          'sprk-c-Masthead--open': narrowNavOpen
        }, {
          'sprk-c-Masthead--scroll': isScrolled
        }, {
          'sprk-c-Masthead--hidden': isHidden
        }, additionalClasses),
        role: "banner",
        "data-analytics": analyticsString,
        "data-id": idString
      }, /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-c-Masthead__content sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--split@xxs"
      }, /*#__PURE__*/React__default.createElement(SprkMastheadMenuIcon, {
        toggleNarrowNav: this.toggleNarrowNav,
        isOpen: narrowNavOpen,
        menuAriaControls: narrowNavId
      }), /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-c-Masthead__branding sprk-o-Stack__item sprk-o-Stack__item--center-column@xxs"
      }, logoLinkElement !== 'a' ? /*#__PURE__*/React__default.createElement(SprkLink, {
        variant: "unstyled",
        to: logoLink,
        element: logoLinkElement
      }, siteLogo) : /*#__PURE__*/React__default.createElement(SprkLink, {
        variant: "unstyled",
        href: logoLink,
        element: logoLinkElement
      }, siteLogo)), /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-c-Masthead__nav-item sprk-o-Stack__item sprk-o-Stack__item--center-column@xxs"
      }, navLink), (littleNavLinks.length > 0 || utilityContents.length > 0) && /*#__PURE__*/React__default.createElement(SprkMastheadLittleNav, {
        selector: selector,
        spacing: variant === 'extended' ? 'medium' : 'large',
        links: littleNavLinks,
        utilityContents: utilityContents
      })), bigNavLinks.length > 0 && /*#__PURE__*/React__default.createElement(SprkMastheadBigNav, {
        links: bigNavLinks
      }), narrowNavLinks.length > 0 && /*#__PURE__*/React__default.createElement(SprkMastheadNarrowNav, {
        linkSelectionFunction: function linkSelectionFunction() {
          if (narrowNavSelectionFunction) {
            narrowNavSelectionFunction();
          }

          _this2.closeNarrowNavMenu();
        },
        selector: narrowSelector,
        links: narrowNavLinks,
        isOpen: narrowNavOpen,
        id: narrowNavId
      }));
    }
  }]);

  return SprkMasthead;
}(React.Component);

SprkMasthead.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the id and the `aria-controls` attributes of the corresponding narrow menu toggle icon and content.
   */
  narrowNavId: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * 	Expects an array of link objects,
   *  to be represented in the navigation
   *  of the wide viewport version of the masthead.
   */
  bigNavLinks: propTypes.arrayOf(propTypes.shape({
    /**
     * Determines if link renders as an anchor tag, or router link.
     */
    element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

    /**
     * The text for the big nav item.
     */
    text: propTypes.string,

    /**
     * Expects an array containing link objects.
     * Will be treated as a subnav to the link.
     */
    subNavLinks: propTypes.arrayOf(propTypes.shape({
      /**
       * The text for the sub nav item.
       */
      text: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType])
    }))
  })),

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Expects an array of link objects,
   * to be represented in the littleNav
   * area of the wide viewport version of the masthead.
   */
  littleNavLinks: propTypes.arrayOf(propTypes.shape({
    element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

    /**
     * The text for the little nav item.
     */
    text: propTypes.string,

    /**
     * Expects an array containing link objects.
     * Will be treated as a subnav to the link.
     */
    subNavLinks: propTypes.arrayOf(propTypes.shape({
      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

      /**
       * The text for the little sub nav item.
       */
      text: propTypes.string
    }))
  })),

  /**
   * Expects a function to be executed when a user clicks a navigating link in the narrow nav.
   */
  narrowNavSelectionFunction: propTypes.func,

  /**
   * Expects an array of link objects,
   * to be represented in the narrow nav
   * element of the masthead component.
   */
  narrowNavLinks: propTypes.arrayOf(propTypes.shape({
    /**
     * Determines if link renders as an anchor tag, or router link.
     */
    element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

    /**
     * The text for the narrow nav item.
     */
    text: propTypes.string,

    /**
     * Expects an array containing link objects.
     * Will be treated as a subnav to the link.
     */
    subNavLinks: propTypes.arrayOf(propTypes.shape({
      /**
       * The text for the sub narrow nav item.
       */
      text: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType])
    }))
  })),

  /**
   * Expects a narrowSelector object that
   * represents choices to be supplied to the
   * selector above the narrow navigation of
   * link objects.
   */
  narrowSelector: propTypes.shape({
    /** The function that runs once a choice is made. */
    choiceFunction: propTypes.func,

    /**
     * 	Expects a Component to render at the foot of the open selector.
     */
    footer: propTypes.node,

    /**
     * Object that configures the items inside a narrow selector
     */
    items: propTypes.arrayOf(propTypes.shape({
      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

      /**
       * Additional text providing context for item.
       */
      information: propTypes.string,
      // TODO: get rid of this -- it does nothing but add a nonvalid "text" attribute on the item
      text: propTypes.string,

      /**
       * The main headline of the item
       */
      title: propTypes.string,

      /**
       * The value assigned for the selector
       */
      value: propTypes.string
    }))
  }),

  /**
   * Expects a selector object that
   * represents choices to be supplied
   * to the selector in the wide viewport
   * version of the masthead.
   */
  selector: propTypes.shape({
    /** The function that runs once a choice is made. */
    choiceFunction: propTypes.func,

    /**
     * 	Expects a Component to render at the foot of the open selector.
     */
    footer: propTypes.node,

    /**
     * Object that configures the items inside the selector
     */
    items: propTypes.arrayOf(propTypes.shape({
      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

      /**
       * Additional text providing context for item.
       */
      information: propTypes.string,
      // TODO: get rid of this -- it does nothing but add a nonvalid "text" attribute on the item
      text: propTypes.string,

      /**
       * The main headline of the item
       */
      title: propTypes.string,

      /**
       * The value assigned for the selector
       */
      value: propTypes.string
    }))
  }),

  /**
   * The component to render into the logo area of the masthead.
   */
  siteLogo: propTypes.node,

  /**
   * Expects an array containing components
   * to render in the utility area of littleNav,
   * in the wide viewport version of the masthead.
  */
  utilityContents: propTypes.arrayOf(propTypes.node),

  /** Determines the type of SprkMasthead to render.. */
  variant: propTypes.oneOf(['default', 'extended']),

  /**
   * The `href` value assigned the logo's link.
   */
  logoLink: propTypes.string,

  /**
   * Determines if link renders as an anchor tag, or router link.
   */
  logoLinkElement: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

  /**
   * Expects a component to render in
   * the nav-item area of the Masthead
   * on narrow viewports.
   */
  navLink: propTypes.node
};
SprkMasthead.defaultProps = {
  narrowNavSelectionFunction: function narrowNavSelectionFunction() {},
  narrowNavId: uniqueId_1("sprk_masthead_narrow_nav_"),
  littleNavLinks: [],
  narrowNavLinks: [],
  bigNavLinks: [],
  utilityContents: [],
  variant: 'default',
  logoLink: '/',
  logoLinkElement: 'a'
};

var SprkPagination = function SprkPagination(props) {
  var goToPage = function goToPage(e, page) {
    e.preventDefault();
    var totalItems = props.totalItems,
        itemsPerPage = props.itemsPerPage,
        onChangeCallback = props.onChangeCallback;
    var totalPages = Math.ceil(totalItems / itemsPerPage);
    var newPage = page;

    if (page > totalPages) {
      newPage = totalPages;
    }

    if (page < 1) {
      newPage = 1;
    }

    onChangeCallback({
      e: e,
      newPage: newPage
    });
  };

  var variant = props.variant,
      totalItems = props.totalItems,
      itemsPerPage = props.itemsPerPage,
      currentPage = props.currentPage,
      onChangeCallback = props.onChangeCallback,
      additionalClasses = props.additionalClasses,
      nextLinkText = props.nextLinkText,
      prevLinkText = props.prevLinkText,
      analyticsStringPage = props.analyticsStringPage,
      analyticsStringNext = props.analyticsStringNext,
      analyticsStringPrev = props.analyticsStringPrev,
      idString = props.idString,
      nextIcon = props.nextIcon,
      prevIcon = props.prevIcon,
      other = _objectWithoutProperties(props, ["variant", "totalItems", "itemsPerPage", "currentPage", "onChangeCallback", "additionalClasses", "nextLinkText", "prevLinkText", "analyticsStringPage", "analyticsStringNext", "analyticsStringPrev", "idString", "nextIcon", "prevIcon"]);

  var totalPages = Math.ceil(totalItems / itemsPerPage); // the "long" variant is used if there are more than 3 total pages

  var longVariant = variant === 'default' && totalPages > 3;
  var leftLinkClasses = 'sprk-c-Pagination__icon';
  var rightLinkClasses = 'sprk-c-Pagination__icon';

  if (currentPage === 1) {
    leftLinkClasses += ' sprk-b-Link--disabled';
  }

  if (currentPage === totalPages) {
    rightLinkClasses += ' sprk-b-Link--disabled';
  }

  return /*#__PURE__*/React__default.createElement("nav", {
    "aria-label": "Pagination Navigation",
    "data-id": idString
  }, /*#__PURE__*/React__default.createElement("ul", _extends({
    className: classnames('sprk-c-Pagination', 'sprk-o-HorizontalList', 'sprk-o-HorizontalList--spacing-medium', additionalClasses)
  }, other), /*#__PURE__*/React__default.createElement("li", null, /*#__PURE__*/React__default.createElement(SprkLink, {
    onClick: function onClick(e) {
      return goToPage(e, currentPage - 1);
    },
    additionalClasses: leftLinkClasses,
    variant: "plain",
    analyticsString: analyticsStringPrev,
    "aria-label": "Previous Page"
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "sprk-u-ScreenReaderText"
  }, prevLinkText), /*#__PURE__*/React__default.createElement(SprkIcon, {
    iconName: prevIcon
  }))), variant === 'default' && /*#__PURE__*/React__default.createElement("li", {
    key: uniqueId_1('sprk_page_')
  }, /*#__PURE__*/React__default.createElement(SprkLink, {
    onClick: function onClick(e) {
      return goToPage(e, 1);
    },
    additionalClasses: classnames('sprk-c-Pagination__link', {
      'sprk-c-Pagination__link--current': currentPage === 1
    }),
    "aria-label": "Page 1",
    "aria-current": currentPage === 1,
    "data-analytics": analyticsStringPage
  }, "1")), longVariant && currentPage > 2 && /*#__PURE__*/React__default.createElement("li", {
    key: uniqueId_1('sprk_page_')
  }, "..."), longVariant && currentPage > 1 && currentPage < totalPages && /*#__PURE__*/React__default.createElement("li", {
    key: uniqueId_1('sprk_page_')
  }, /*#__PURE__*/React__default.createElement(SprkLink, {
    onClick: function onClick(e) {
      return goToPage(e, currentPage);
    },
    additionalClasses: classnames('sprk-c-Pagination__link', 'sprk-c-Pagination__link--current'),
    "aria-label": "Page ".concat(currentPage),
    "aria-current": "true",
    "data-analytics": analyticsStringPage
  }, currentPage)), longVariant && currentPage < totalPages - 1 && /*#__PURE__*/React__default.createElement("li", {
    key: uniqueId_1('sprk_page_')
  }, "..."), longVariant && /*#__PURE__*/React__default.createElement("li", {
    key: uniqueId_1('sprk_page_')
  }, /*#__PURE__*/React__default.createElement(SprkLink, {
    onClick: function onClick(e) {
      return goToPage(e, totalPages);
    },
    additionalClasses: classnames('sprk-c-Pagination__link', {
      'sprk-c-Pagination__link--current': currentPage === totalPages
    }),
    "aria-label": "Page ".concat(totalPages),
    "aria-current": currentPage === totalPages,
    "data-analytics": analyticsStringPage
  }, totalPages)), variant === 'default' && !longVariant && totalItems / itemsPerPage > 1 && /*#__PURE__*/React__default.createElement("li", {
    key: uniqueId_1('sprk_page_')
  }, /*#__PURE__*/React__default.createElement(SprkLink, {
    onClick: function onClick(e) {
      return goToPage(e, 2);
    },
    additionalClasses: classnames('sprk-c-Pagination__link', {
      'sprk-c-Pagination__link--current': currentPage === 2
    }),
    "aria-label": "Page 2",
    "aria-current": currentPage === 2,
    "data-analytics": analyticsStringPage
  }, "2")), variant === 'default' && !longVariant && totalItems / itemsPerPage > 2 && /*#__PURE__*/React__default.createElement("li", {
    key: uniqueId_1('sprk_page_')
  }, /*#__PURE__*/React__default.createElement(SprkLink, {
    onClick: function onClick(e) {
      return goToPage(e, 3);
    },
    additionalClasses: classnames('sprk-c-Pagination__link', {
      'sprk-c-Pagination__link--current': currentPage === 3
    }),
    "aria-label": "Page 3",
    "aria-current": currentPage === 3,
    "data-analytics": analyticsStringPage
  }, "3")), /*#__PURE__*/React__default.createElement("li", null, /*#__PURE__*/React__default.createElement(SprkLink, {
    onClick: function onClick(e) {
      return goToPage(e, currentPage + 1);
    },
    additionalClasses: rightLinkClasses,
    variant: "plain",
    analyticsString: analyticsStringNext,
    "aria-label": "Next Page"
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "sprk-u-ScreenReaderText"
  }, nextLinkText), /*#__PURE__*/React__default.createElement(SprkIcon, {
    iconName: nextIcon
  })))));
};

SprkPagination.propTypes = {
  /**
   * This determines what style of pagination to render.
   */
  variant: propTypes.oneOf(['default', 'pager']),

  /**
   * The total number of items that the pagination component will contain.
   */
  totalItems: propTypes.number.isRequired,

  /**
   * The number of items to display per page
   */
  itemsPerPage: propTypes.number.isRequired,

  /**
   * The current visible page of the component.
   */
  currentPage: propTypes.number,

  /**
   * This function will be called every time the component updates.
   * The function should accept a single object
   * parameter with a property called newPage
   * containing the current page number of the pagination component.
   *
   * Ex: `{ newPage: 3 }`
   */
  onChangeCallback: propTypes.func.isRequired,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Screenreader text for the 'previous page' icon.
   */
  nextLinkText: propTypes.string,

  /**
   * Screenreader text for the 'next page' icon.
   */
  prevLinkText: propTypes.string,

  /** The data-analytics string for the individual page links. */
  analyticsStringPage: propTypes.string,

  /** The data-analytics string for the 'previous page' link. */
  analyticsStringNext: propTypes.string,

  /** The data-analytics string for the 'next page' link. */
  analyticsStringPrev: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /** The icon name to be rendered for the previous link. */
  prevIcon: propTypes.string,

  /** The icon name to be rendered for the next link. */
  nextIcon: propTypes.string
};
SprkPagination.defaultProps = {
  variant: 'default',
  currentPage: 1,
  nextLinkText: 'Next Page',
  prevLinkText: 'Previous Page',
  prevIcon: 'chevron-left',
  nextIcon: 'chevron-right'
};

var SprkPromo = function SprkPromo(props) {
  var title = props.title,
      subtitle = props.subtitle,
      additionalClasses = props.additionalClasses,
      additionalClassesContent = props.additionalClassesContent,
      cta = props.cta,
      ctaText = props.ctaText,
      ctaHref = props.ctaHref,
      ctaAnalytics = props.ctaAnalytics,
      ctaIdString = props.ctaIdString,
      imgSrc = props.imgSrc,
      imgAlt = props.imgAlt,
      imgLinkHref = props.imgLinkHref,
      imgLinkAnalytics = props.imgLinkAnalytics,
      imgLinkIdString = props.imgLinkIdString,
      additionalClassesImgLink = props.additionalClassesImgLink,
      idString = props.idString,
      isFlag = props.isFlag,
      mediaRev = props.mediaRev,
      hasBorder = props.hasBorder,
      children = props.children,
      other = _objectWithoutProperties(props, ["title", "subtitle", "additionalClasses", "additionalClassesContent", "cta", "ctaText", "ctaHref", "ctaAnalytics", "ctaIdString", "imgSrc", "imgAlt", "imgLinkHref", "imgLinkAnalytics", "imgLinkIdString", "additionalClassesImgLink", "idString", "isFlag", "mediaRev", "hasBorder", "children"]);

  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classnames('sprk-c-Promo', 'sprk-o-Stack', {
      'sprk-c-Promo--flag': isFlag
    }, {
      'sprk-c-Promo--bordered': hasBorder
    }, additionalClasses),
    "data-id": idString
  }, other), imgSrc && isFlag && !mediaRev && /*#__PURE__*/React__default.createElement(SprkLink, {
    variant: "plain",
    href: imgLinkHref,
    additionalClasses: classnames('sprk-o-Stack__item--fourth@s', 'sprk-o-Stack__item', additionalClassesImgLink),
    analyticsString: imgLinkAnalytics,
    idString: imgLinkIdString
  }, /*#__PURE__*/React__default.createElement("img", {
    className: "sprk-c-Promo__image--flag",
    alt: imgAlt,
    src: imgSrc
  })), imgSrc && !mediaRev && !isFlag && /*#__PURE__*/React__default.createElement(SprkLink, {
    variant: "plain",
    href: imgLinkHref,
    additionalClasses: classnames('sprk-o-Stack__item', 'sprk-o-Stack__item--half@s', additionalClassesImgLink),
    analyticsString: imgLinkAnalytics,
    idString: imgLinkIdString
  }, /*#__PURE__*/React__default.createElement("img", {
    className: "sprk-c-Promo__image",
    alt: imgAlt,
    src: imgSrc
  })), /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-c-Promo__content', 'sprk-o-Stack__item', 'sprk-o-Stack', 'sprk-o-Stack--large', {
      'sprk-o-Stack__item--three-fourths@s': isFlag
    }, {
      'sprk-o-Stack__item--half@s': imgSrc
    }, additionalClassesContent)
  }, title && /*#__PURE__*/React__default.createElement("h3", {
    className: " sprk-b-TypeDisplayFive sprk-o-Stack__item sprk-c-Promo__title"
  }, title), subtitle && /*#__PURE__*/React__default.createElement("div", {
    className: "sprk-c-Promo__subtitle sprk-o-Stack__item"
  }, subtitle), /*#__PURE__*/React__default.createElement("div", {
    className: " sprk-b-TypeBodyTwo sprk-o-Stack__item sprk-c-Promo__childrenContainer"
  }, children), cta === 'button' && /*#__PURE__*/React__default.createElement("div", {
    className: "sprk-o-Stack__item"
  }, /*#__PURE__*/React__default.createElement(SprkButton, {
    element: "a",
    href: ctaHref,
    analyticsString: ctaAnalytics,
    idString: ctaIdString
  }, ctaText)), cta === 'link' && /*#__PURE__*/React__default.createElement("div", {
    className: "sprk-o-Stack__item"
  }, /*#__PURE__*/React__default.createElement(SprkLink, {
    variant: "base",
    href: ctaHref,
    analyticsString: ctaAnalytics,
    idString: ctaIdString
  }, ctaText))), isFlag && imgSrc && mediaRev && /*#__PURE__*/React__default.createElement(SprkLink, {
    variant: "plain",
    href: imgLinkHref,
    additionalClasses: classnames('sprk-o-Stack__item--fourth@s', 'sprk-o-Stack__item', additionalClassesImgLink),
    analyticsString: imgLinkAnalytics,
    idString: imgLinkIdString
  }, /*#__PURE__*/React__default.createElement("img", {
    className: "sprk-c-Promo__image--flag",
    alt: imgAlt,
    src: imgSrc
  })), !isFlag && imgSrc && mediaRev && /*#__PURE__*/React__default.createElement(SprkLink, {
    variant: "plain",
    href: imgLinkHref,
    additionalClasses: classnames('sprk-o-Stack__item', 'sprk-o-Stack__item--half@s', additionalClassesImgLink),
    analyticsString: imgLinkAnalytics,
    idString: imgLinkIdString
  }, /*#__PURE__*/React__default.createElement("img", {
    className: "sprk-c-Promo__image",
    alt: imgAlt,
    src: imgSrc
  })));
};

SprkPromo.propTypes = {
  /**
   * Content that will
   * be rendered inside the content portion
   * of the promo.
  */
  children: propTypes.node,

  /** The text to appear in the subtitle section. */
  subtitle: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Expects a space separated string
   * of classes to be added to the
   * content container of the component.
   */
  additionalClassesContent: propTypes.string,

  /**
   * The type of element to use
   * for the Promo Call to Action. If this property
   * is omitted, no Call to Action will be rendered.
  */
  cta: propTypes.oneOf(['button', 'link']),

  /** The text for the Call to Action. */
  ctaText: propTypes.string,

  /** The URL to navigate to when the Call to Action is clicked. */
  ctaHref: propTypes.string,

  /** The string to use for the data-analytics attribute on the Call to Action */
  ctaAnalytics: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  ctaIdString: propTypes.string,

  /**
   * The source location of the
   * Promo image. If this property is omitted, no
   * image will be rendered.
  */
  imgSrc: propTypes.string,

  /** The alt text property for the image. */
  imgAlt: propTypes.string,

  /** The URL to navigate to when the image is clicked. */
  imgLinkHref: propTypes.string,

  /** The string to use for the data-analytics attribute on the image link. */
  imgLinkAnalytics: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  imgLinkIdString: propTypes.string,

  /** Any additional classes (space-delimited string) to apply to the image link. */
  additionalClassesImgLink: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,
  // TODO: Turn this into a variant. Issue #2347

  /** If provided, the Promo will render as the Flag variant. */
  isFlag: propTypes.bool,

  /**
   * If provided, the Promo will be rendered
   * in reverse horizontal order
   * (content on the left, image on the right) .
  */
  mediaRev: propTypes.bool,

  /**
   * 	If true, the Promo will be rendered with a border. The styles for the border are determined by `$sprk-promo-border`.
   */
  hasBorder: propTypes.bool
};
SprkPromo.defaultProps = {
  isFlag: false,
  mediaRev: false,
  hasBorder: false
};

var SprkList = function SprkList(props) {
  var element = props.element,
      children = props.children,
      variant = props.variant,
      additionalClasses = props.additionalClasses,
      idString = props.idString,
      other = _objectWithoutProperties(props, ["element", "children", "variant", "additionalClasses", "idString"]);

  var classNames = classnames('sprk-b-List', additionalClasses, {
    'sprk-b-List--indented': variant === 'indented',
    'sprk-b-List--bare': variant === 'bare'
  });
  var TagName = element;
  return /*#__PURE__*/React__default.createElement(TagName, _extends({
    className: classNames,
    "data-id": idString
  }, other), children);
};

SprkList.defaultProps = {
  variant: undefined,
  idString: undefined,
  additionalClasses: undefined,
  children: undefined
};
SprkList.propTypes = {
  /** Determines the type of list element is ordered or unordered. */
  element: propTypes.oneOf(['ol', 'ul']).isRequired,

  /** The children that will be rendered inside the list. */
  children: propTypes.node,

  /**
   * Will cause the appropriate variant
   * type to render.
   */
  variant: propTypes.oneOf(['indented', 'bare']),

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkListItem = function SprkListItem(props) {
  var children = props.children,
      additionalClasses = props.additionalClasses,
      idString = props.idString,
      other = _objectWithoutProperties(props, ["children", "additionalClasses", "idString"]);

  return /*#__PURE__*/React__default.createElement("li", _extends({
    className: additionalClasses,
    "data-id": idString
  }, other), children);
};

SprkListItem.defaultProps = {
  idString: undefined,
  additionalClasses: undefined,
  children: undefined
};
SprkListItem.propTypes = {
  /**
   * Content to render inside list item.
   */
  children: propTypes.node,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkTabsPanel = /*#__PURE__*/function (_Component) {
  _inherits(SprkTabsPanel, _Component);

  var _super = _createSuper(SprkTabsPanel);

  function SprkTabsPanel() {
    _classCallCheck(this, SprkTabsPanel);

    return _super.apply(this, arguments);
  }

  _createClass(SprkTabsPanel, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          isActive = _this$props.isActive,
          tabBtnId = _this$props.tabBtnId,
          ariaControls = _this$props.ariaControls,
          tabPanelAddClasses = _this$props.tabPanelAddClasses;
      return /*#__PURE__*/React__default.createElement("div", {
        className: classnames('sprk-c-Tabs__content', {
          'sprk-u-Display--none': !isActive
        }, tabPanelAddClasses),
        role: "tabpanel",
        tabIndex: "0",
        ref: this.tabPanelRef,
        id: ariaControls,
        "aria-labelledby": tabBtnId
      }, children);
    }
  }]);

  return SprkTabsPanel;
}(React.Component);
/* eslint-disable react/require-default-props */


SprkTabsPanel.propTypes = {
  /**
   * The content to render for the panel.
   */
  children: propTypes.node,

  /**
   * Value that determines
   * if panel is active.
   */
  isActive: propTypes.bool,
  // A unique ID for each tab button
  tabBtnId: propTypes.string,

  /**
   * The aria ID to use for each tab panel so it corresponds to the button
   */
  ariaControls: propTypes.string,

  /**
   * A string of additional classes to be applied to the tab panel.
   */
  tabPanelAddClasses: propTypes.string
};

var SprkTabsButton = /*#__PURE__*/function (_Component) {
  _inherits(SprkTabsButton, _Component);

  var _super = _createSuper(SprkTabsButton);

  function SprkTabsButton(props) {
    var _this;

    _classCallCheck(this, SprkTabsButton);

    _this = _super.call(this, props);
    _this.tabBtnRef = /*#__PURE__*/React.createRef();
    return _this;
  }

  _createClass(SprkTabsButton, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var isFocused = this.props.isFocused;

      if (isFocused) {
        this.tabBtnRef.current.focus();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          tabBtnChildren = _this$props.tabBtnChildren,
          tabBtnId = _this$props.tabBtnId,
          tabBtnAddClasses = _this$props.tabBtnAddClasses,
          ariaControls = _this$props.ariaControls,
          ariaSelected = _this$props.ariaSelected,
          isActive = _this$props.isActive,
          onTabClick = _this$props.onTabClick,
          tabBtnDataId = _this$props.tabBtnDataId,
          tabBtnAnalytics = _this$props.tabBtnAnalytics;
      return /*#__PURE__*/React__default.createElement("button", {
        className: classnames('sprk-c-Tabs__button', tabBtnAddClasses, {
          'sprk-c-Tabs__button--active': isActive
        }),
        role: "tab",
        onClick: onTabClick,
        "aria-controls": ariaControls,
        "aria-selected": ariaSelected,
        id: tabBtnId,
        type: "button",
        tabIndex: isActive ? undefined : '-1',
        ref: this.tabBtnRef,
        "data-id": tabBtnDataId,
        "data-analytics": tabBtnAnalytics
      }, tabBtnChildren);
    }
  }]);

  return SprkTabsButton;
}(React.Component);

SprkTabsButton.defaultProps = {
  isActive: false,
  isFocused: false,
  ariaControls: '',
  tabBtnAddClasses: '',
  ariaSelected: false,
  onTabClick: function onTabClick() {},
  tabBtnAnalytics: '',
  tabBtnDataId: ''
};
SprkTabsButton.propTypes = {
  /**
   * The content to render for the button.
   */
  tabBtnChildren: propTypes.node.isRequired,

  /**
   * Value that determines
   * if button is active.
   */
  isActive: propTypes.bool,

  /** A unique ID for each tab button. */
  tabBtnId: propTypes.string.isRequired,

  /**
   * Determines if tab is focused.
   */
  isFocused: propTypes.bool,

  /**
   * The aria ID to use for each tab panel so it corresponds to the button
   */
  ariaControls: propTypes.string,

  /**
   * Expects a space separated string
   * of classes to be added to the
   * tab panel.
   */
  tabBtnAddClasses: propTypes.string,

  /**
   * Toggles the aria selected state for accessibility.
   */
  ariaSelected: propTypes.bool,
  // The click handler for the Tab

  /**
   * The function that runs upon  clicking a tab.
   */
  onTabClick: propTypes.func,

  /**
   * The id used for the data-id attribute
   */
  tabBtnDataId: propTypes.string,

  /**
   *
   The value used for the data-analytics attribute
   */
  tabBtnAnalytics: propTypes.string
};

/*
* This component expects SprkTabsPanel children.
* It loops through each provided SprkTabsPanel
* and creates a SprkTabsButton for each tab.
*/

var SprkTabs = /*#__PURE__*/function (_Component) {
  _inherits(SprkTabs, _Component);

  var _super = _createSuper(SprkTabs);

  function SprkTabs(props) {
    var _this;

    _classCallCheck(this, SprkTabs);

    _this = _super.call(this, props);
    _this.handleTabClick = _this.handleTabClick.bind(_assertThisInitialized(_this));
    _this.handleKeyboardEvent = _this.handleKeyboardEvent.bind(_assertThisInitialized(_this));
    _this.updateAriaOrientation = _this.updateAriaOrientation.bind(_assertThisInitialized(_this));
    _this.setDefaultActiveTab = _this.setDefaultActiveTab.bind(_assertThisInitialized(_this));
    _this.getActiveTabIndex = _this.getActiveTabIndex.bind(_assertThisInitialized(_this));
    _this.retreatTab = _this.retreatTab.bind(_assertThisInitialized(_this));
    _this.advanceTab = _this.advanceTab.bind(_assertThisInitialized(_this));
    _this.tabsContainerRef = /*#__PURE__*/React__default.createRef();
    var children = _this.props.children;
    var btnIds = children.map(function () {
      return uniqueId_1('tab-');
    });
    _this.state = {
      btnIds: btnIds
    };
    return _this;
  }
  /*
  * Immediately invoke setDefaultActiveTab()
  * when component is inserted into the tree
  * and update state with the ID of the tab that's active by default.
  * Update aria-orientation and listen for resizes for future updates.
  */


  _createClass(SprkTabs, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var breakpoint = this.props.breakpoint;
      this.setDefaultActiveTab();
      this.updateAriaOrientation(window.innerWidth, breakpoint);
      window.addEventListener('resize', function () {
        _this2.updateAriaOrientation(window.innerWidth, breakpoint);
      });
    }
    /*
    * Find the SprkTabsButton that we want
    * active by default (isDefaultActive would be set on tab panel)
    * and update state with that tab button ID.
    */

  }, {
    key: "setDefaultActiveTab",
    value: function setDefaultActiveTab() {
      var _this3 = this;

      var children = this.props.children;
      var btnIds = this.state.btnIds;
      var counter = 0;
      children.forEach(function (child, index) {
        if (child.props.isDefaultActive) {
          _this3.setState({
            isActive: btnIds[index]
          });
        } else {
          counter += 1;
        }

        if (counter === children.length) {
          _this3.setState({
            isActive: btnIds[0]
          });
        }
      });
    }
    /*
    * Get the index of the active tab
    * by finding it from our state array of btn IDs.
    */

  }, {
    key: "getActiveTabIndex",
    value: function getActiveTabIndex() {
      var _this$state = this.state,
          isActive = _this$state.isActive,
          btnIds = _this$state.btnIds;
      var tabIndex;
      btnIds.forEach(function (id, index) {
        if (id === isActive) {
          tabIndex = index;
        }
      });
      return tabIndex;
    }
  }, {
    key: "retreatTab",
    value: function retreatTab() {
      var btnIds = this.state.btnIds;

      if (this.getActiveTabIndex() - 1 === -1) {
        this.setState({
          isActive: btnIds[btnIds.length - 1],
          isFocused: btnIds[btnIds.length - 1]
        });
      } else {
        var newActiveTabIndex = this.getActiveTabIndex() - 1;
        this.setState({
          isActive: btnIds[newActiveTabIndex],
          isFocused: btnIds[newActiveTabIndex]
        });
      }
    }
  }, {
    key: "advanceTab",
    value: function advanceTab() {
      var btnIds = this.state.btnIds;

      if (this.getActiveTabIndex() + 1 < btnIds.length) {
        var newActiveTabIndex = this.getActiveTabIndex() + 1;
        this.setState({
          isActive: btnIds[newActiveTabIndex],
          isFocused: btnIds[newActiveTabIndex]
        });
      } else {
        this.setState({
          isActive: btnIds[0],
          isFocused: btnIds[0]
        });
      }
    }
    /*
    * Tabs uses arrow keys to move from tab to tab.
    * Depending on the key pressed we need to
    * set a new active tab.
    */

  }, {
    key: "handleKeyboardEvent",
    value: function handleKeyboardEvent(e) {
      var btnIds = this.state.btnIds;
      var keys = {
        end: 35,
        home: 36,
        left: 37,
        right: 39
      };

      switch (e.keyCode) {
        case keys.left:
          this.retreatTab();
          break;

        case keys.right:
          this.advanceTab();
          break;

        case keys.home:
          this.setState({
            isActive: btnIds[0],
            isFocused: btnIds[0]
          });
          break;

        case keys.end:
          this.setState({
            isActive: btnIds[btnIds.length - 1],
            isFocused: btnIds[btnIds.length - 1]
          });
          break;
      }
    }
    /*
    * Switch aria-orientation to vertical on
    * narrow viewports (based on _tabs.scss breakpoint).
    */

  }, {
    key: "updateAriaOrientation",
    value: function updateAriaOrientation(width, breakpoint) {
      var tabsContainer = this.tabsContainerRef;

      if (width <= breakpoint) {
        tabsContainer.current.setAttribute('aria-orientation', 'vertical');
      } else {
        tabsContainer.current.setAttribute('aria-orientation', 'horizontal');
      }
    }
    /*
    * Get the ID of the clicked tab
    * and update state with the active tab ID.
    */

  }, {
    key: "handleTabClick",
    value: function handleTabClick(e) {
      var btnTabId = e.currentTarget.id;
      this.setState({
        isActive: btnTabId
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props = this.props,
          children = _this$props.children,
          idString = _this$props.idString,
          additionalClasses = _this$props.additionalClasses,
          other = _objectWithoutProperties(_this$props, ["children", "idString", "additionalClasses"]);

      var buttons = [];
      var panels = [];
      /*
      * Loop through all the SprkTabsPanels and
      * generate a SprkTabsButton for each one.
      * Don't render a SprkTabsButton
      * for an element that is not a SprkTabsPanel.
      */

      var generateTabs = function generateTabs() {
        children.forEach(function (tabPanel, index) {
          var _tabPanel$props = tabPanel.props,
              tabPanelChildren = _tabPanel$props.children,
              tabPanelAddClasses = _tabPanel$props.tabPanelAddClasses,
              tabBtnChildren = _tabPanel$props.tabBtnChildren,
              tabBtnAddClasses = _tabPanel$props.tabBtnAddClasses,
              tabBtnDataId = _tabPanel$props.tabBtnDataId,
              tabBtnAnalytics = _tabPanel$props.tabBtnAnalytics,
              tabBtnClickFunc = _tabPanel$props.tabBtnClickFunc;
          var _this4$state = _this4.state,
              isFocused = _this4$state.isFocused,
              isActive = _this4$state.isActive,
              btnIds = _this4$state.btnIds;
          if (tabPanel.type.name !== SprkTabsPanel.name) return;
          buttons.push( /*#__PURE__*/React__default.createElement(SprkTabsButton, {
            key: btnIds[index],
            isFocused: isFocused === btnIds[index],
            isActive: isActive === btnIds[index],
            ariaControls: "target-".concat(btnIds[index]),
            ariaSelected: isActive === btnIds[index],
            tabBtnId: btnIds[index],
            onTabClick: function onTabClick(e) {
              _this4.handleTabClick(e);

              if (tabBtnClickFunc) {
                tabBtnClickFunc();
              }
            },
            tabBtnAddClasses: tabBtnAddClasses,
            tabBtnChildren: tabBtnChildren,
            tabBtnDataId: tabBtnDataId,
            tabBtnAnalytics: tabBtnAnalytics
          }));
          panels.push( /*#__PURE__*/React__default.createElement(SprkTabsPanel, {
            tabBtnId: btnIds[index],
            key: btnIds[index],
            ariaControls: "target-".concat(btnIds[index]),
            isActive: isActive === btnIds[index],
            tabPanelAddClasses: tabPanelAddClasses
          }, tabPanelChildren));
        });
      };

      generateTabs();
      return /*#__PURE__*/React__default.createElement("div", _extends({
        className: classnames('sprk-c-Tabs', additionalClasses),
        "aria-orientation": "horizontal",
        "data-id": idString,
        ref: this.tabsContainerRef
      }, other), /*#__PURE__*/React__default.createElement("div", {
        onKeyDown: this.handleKeyboardEvent,
        className: "sprk-c-Tabs__buttons",
        role: "tablist"
      }, buttons), panels);
    }
  }]);

  return SprkTabs;
}(React.Component);

SprkTabs.defaultProps = {
  idString: '',
  additionalClasses: '',
  breakpoint: 736
};
SprkTabs.propTypes = {
  /**
   * The content to render inside of SprkTabsPanel
   */
  children: propTypes.node.isRequired,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /** Breakpoint for the aria-orientation switch from y to x. */
  breakpoint: propTypes.number
};

var SprkFooterGlobalSection = /*#__PURE__*/function (_Component) {
  _inherits(SprkFooterGlobalSection, _Component);

  var _super = _createSuper(SprkFooterGlobalSection);

  function SprkFooterGlobalSection(props) {
    var _this;

    _classCallCheck(this, SprkFooterGlobalSection);

    _this = _super.call(this, props);
    _this.state = {
      globalItemsHasIds: props.globalItems.items.map(function (item) {
        return _objectSpread2({
          id: uniqueId_1()
        }, item);
      })
    };
    return _this;
  }

  _createClass(SprkFooterGlobalSection, [{
    key: "render",
    value: function render() {
      var globalItems = this.props.globalItems;
      var globalItemsHasIds = this.state.globalItemsHasIds;
      return /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-o-Stack__item--three-tenths@m sprk-o-Stack sprk-o-Stack--misc-b sprk-o-Box sprk-u-prh"
      }, /*#__PURE__*/React__default.createElement("h3", {
        className: "sprk-o-Stack__item sprk-b-TypeBodyOne"
      }, globalItems.heading), globalItemsHasIds.map(function (item) {
        var id = item.id,
            mediaHref = item.mediaHref,
            analyticsString = item.analyticsString,
            mediaType = item.mediaType,
            mediaAddClasses = item.mediaAddClasses,
            src = item.src,
            altText = item.altText,
            iconName = item.iconName,
            description = item.description,
            element = item.element,
            svg = item.svg,
            rest = _objectWithoutProperties(item, ["id", "mediaHref", "analyticsString", "mediaType", "mediaAddClasses", "src", "altText", "iconName", "description", "element", "svg"]);

        var TagName = element || 'a';
        return /*#__PURE__*/React__default.createElement("div", {
          key: id,
          className: "sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium"
        }, /*#__PURE__*/React__default.createElement("div", {
          className: "sprk-o-Stack__item"
        }, /*#__PURE__*/React__default.createElement(TagName, _extends({
          className: "sprk-b-Link sprk-b-Link--plain",
          href: TagName === 'a' ? mediaHref || '#nogo' : undefined,
          "data-analytics": analyticsString
        }, rest), mediaType === 'image' && /*#__PURE__*/React__default.createElement("img", {
          className: mediaAddClasses,
          src: src,
          alt: altText
        }), mediaType === 'SprkIcon' && /*#__PURE__*/React__default.createElement(SprkIcon, {
          iconName: iconName,
          additionalClasses: mediaAddClasses
        }), mediaType === 'svg' && /*#__PURE__*/React__default.createElement("div", null, svg), mediaType !== 'image' && /*#__PURE__*/React__default.createElement("span", {
          className: "sprk-u-ScreenReaderText"
        }, altText))), /*#__PURE__*/React__default.createElement("p", {
          className: "sprk-o-Stack__item sprk-b-TypeBodyFour"
        }, description));
      }));
    }
  }]);

  return SprkFooterGlobalSection;
}(React.Component);

SprkFooterGlobalSection.propTypes = {
  /** Object used to configure the global items section. */
  globalItems: propTypes.shape({
    /** Main headline for the global section. */
    heading: propTypes.string,

    /** Object used to configure each item in global items section such as `mediaType`, `src`, `description` etc. */
    items: propTypes.arrayOf(propTypes.shape({
      /** The type of media element to render. */
      mediaType: propTypes.oneOf(['image', 'svg', 'SprkIcon']),

      /**
       * Assigned to `src` attribute of the item's image.
       */
      src: propTypes.string,

      /**
       * Assigned to `href` of item.
       */
      mediaHref: propTypes.string,

      /**
       * The `alt` text for the image, icon, or `SprkIcon`.
       */
      altText: propTypes.string,

      /**
       * Expects a space separated string
       * of classes to be added to the
       * media of the item.
       */
      mediaAddClasses: propTypes.string,

      /** The description of the image */
      description: propTypes.string,

      /**
       * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
       */
      analyticsString: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func])
    }))
  }).isRequired
};

var SprkFooterConnectIcons = /*#__PURE__*/function (_Component) {
  _inherits(SprkFooterConnectIcons, _Component);

  var _super = _createSuper(SprkFooterConnectIcons);

  function SprkFooterConnectIcons(props) {
    var _this;

    _classCallCheck(this, SprkFooterConnectIcons);

    _this = _super.call(this, props);
    _this.state = {
      connectIconsHasIds: props.connectIcons.icons.map(function (icon) {
        return _objectSpread2({
          id: uniqueId_1()
        }, icon);
      })
    };
    return _this;
  }

  _createClass(SprkFooterConnectIcons, [{
    key: "render",
    value: function render() {
      var connectIcons = this.props.connectIcons;
      var connectIconsHasIds = this.state.connectIconsHasIds;
      return /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large sprk-o-Box"
      }, /*#__PURE__*/React__default.createElement("h3", {
        className: "sprk-o-Stack__item sprk-b-TypeBodyOne"
      }, connectIcons.heading), /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large sprk-o-Stack--split@m"
      }, /*#__PURE__*/React__default.createElement("ul", {
        className: "sprk-o-Stack__item sprk-o-Stack__item--flex@m sprk-o-Stack sprk-o-Stack--split@xxs sprk-o-Stack--medium sprk-b-List sprk-b-List--bare"
      }, connectIconsHasIds.map(function (icon) {
        var element = icon.element,
            id = icon.id,
            href = icon.href,
            analyticsString = icon.analyticsString,
            screenReaderText = icon.screenReaderText,
            addClasses = icon.addClasses,
            name = icon.name,
            rest = _objectWithoutProperties(icon, ["element", "id", "href", "analyticsString", "screenReaderText", "addClasses", "name"]);

        var TagName = element || 'a';
        return /*#__PURE__*/React__default.createElement("li", {
          key: id,
          className: "sprk-o-Stack__item"
        }, /*#__PURE__*/React__default.createElement(TagName, _extends({
          className: "sprk-b-Link sprk-b-Link--plain",
          href: TagName === 'a' ? href || '#nogo' : undefined,
          "data-analytics": analyticsString
        }, rest), /*#__PURE__*/React__default.createElement(SprkIcon, {
          iconName: name,
          additionalClasses: "sprk-c-Icon--stroke-current-color sprk-c-Icon--l ".concat(addClasses)
        }), /*#__PURE__*/React__default.createElement("span", {
          className: "sprk-u-ScreenReaderText"
        }, screenReaderText)));
      }))));
    }
  }]);

  return SprkFooterConnectIcons;
}(React.Component);

SprkFooterConnectIcons.propTypes = {
  /** Constructs the Connect Icon Section. */
  connectIcons: propTypes.shape({
    /** The main headline for the section. */
    heading: propTypes.string,

    /** Configures the icons for the section. */
    icons: propTypes.arrayOf(propTypes.shape({
      /** The link `href` for the icon. */
      href: propTypes.string,

      /** Determines what icon `SprkIcon` renders */
      name: propTypes.string,

      /** Text used for screen readers. */
      screenReaderText: propTypes.string,

      /**
       * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
       */
      analyticsString: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func])
    })).isRequired
  }).isRequired
};

var focusVisible = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
     factory() ;
  })(commonjsGlobal, function () {
    /**
     * Applies the :focus-visible polyfill at the given scope.
     * A scope in this case is either the top-level Document or a Shadow Root.
     *
     * @param {(Document|ShadowRoot)} scope
     * @see https://github.com/WICG/focus-visible
     */

    function applyFocusVisiblePolyfill(scope) {
      var hadKeyboardEvent = true;
      var hadFocusVisibleRecently = false;
      var hadFocusVisibleRecentlyTimeout = null;
      var inputTypesWhitelist = {
        text: true,
        search: true,
        url: true,
        tel: true,
        email: true,
        password: true,
        number: true,
        date: true,
        month: true,
        week: true,
        time: true,
        datetime: true,
        'datetime-local': true
      };
      /**
       * Helper function for legacy browsers and iframes which sometimes focus
       * elements like document, body, and non-interactive SVG.
       * @param {Element} el
       */

      function isValidFocusTarget(el) {
        if (el && el !== document && el.nodeName !== 'HTML' && el.nodeName !== 'BODY' && 'classList' in el && 'contains' in el.classList) {
          return true;
        }

        return false;
      }
      /**
       * Computes whether the given element should automatically trigger the
       * `focus-visible` class being added, i.e. whether it should always match
       * `:focus-visible` when focused.
       * @param {Element} el
       * @return {boolean}
       */


      function focusTriggersKeyboardModality(el) {
        var type = el.type;
        var tagName = el.tagName;

        if (tagName == 'INPUT' && inputTypesWhitelist[type] && !el.readOnly) {
          return true;
        }

        if (tagName == 'TEXTAREA' && !el.readOnly) {
          return true;
        }

        if (el.isContentEditable) {
          return true;
        }

        return false;
      }
      /**
       * Add the `focus-visible` class to the given element if it was not added by
       * the author.
       * @param {Element} el
       */


      function addFocusVisibleClass(el) {
        if (el.classList.contains('focus-visible')) {
          return;
        }

        el.classList.add('focus-visible');
        el.setAttribute('data-focus-visible-added', '');
      }
      /**
       * Remove the `focus-visible` class from the given element if it was not
       * originally added by the author.
       * @param {Element} el
       */


      function removeFocusVisibleClass(el) {
        if (!el.hasAttribute('data-focus-visible-added')) {
          return;
        }

        el.classList.remove('focus-visible');
        el.removeAttribute('data-focus-visible-added');
      }
      /**
       * If the most recent user interaction was via the keyboard;
       * and the key press did not include a meta, alt/option, or control key;
       * then the modality is keyboard. Otherwise, the modality is not keyboard.
       * Apply `focus-visible` to any current active element and keep track
       * of our keyboard modality state with `hadKeyboardEvent`.
       * @param {KeyboardEvent} e
       */


      function onKeyDown(e) {
        if (e.metaKey || e.altKey || e.ctrlKey) {
          return;
        }

        if (isValidFocusTarget(scope.activeElement)) {
          addFocusVisibleClass(scope.activeElement);
        }

        hadKeyboardEvent = true;
      }
      /**
       * If at any point a user clicks with a pointing device, ensure that we change
       * the modality away from keyboard.
       * This avoids the situation where a user presses a key on an already focused
       * element, and then clicks on a different element, focusing it with a
       * pointing device, while we still think we're in keyboard modality.
       * @param {Event} e
       */


      function onPointerDown(e) {
        hadKeyboardEvent = false;
      }
      /**
       * On `focus`, add the `focus-visible` class to the target if:
       * - the target received focus as a result of keyboard navigation, or
       * - the event target is an element that will likely require interaction
       *   via the keyboard (e.g. a text box)
       * @param {Event} e
       */


      function onFocus(e) {
        // Prevent IE from focusing the document or HTML element.
        if (!isValidFocusTarget(e.target)) {
          return;
        }

        if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
          addFocusVisibleClass(e.target);
        }
      }
      /**
       * On `blur`, remove the `focus-visible` class from the target.
       * @param {Event} e
       */


      function onBlur(e) {
        if (!isValidFocusTarget(e.target)) {
          return;
        }

        if (e.target.classList.contains('focus-visible') || e.target.hasAttribute('data-focus-visible-added')) {
          // To detect a tab/window switch, we look for a blur event followed
          // rapidly by a visibility change.
          // If we don't see a visibility change within 100ms, it's probably a
          // regular focus change.
          hadFocusVisibleRecently = true;
          window.clearTimeout(hadFocusVisibleRecentlyTimeout);
          hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {
            hadFocusVisibleRecently = false;
            window.clearTimeout(hadFocusVisibleRecentlyTimeout);
          }, 100);
          removeFocusVisibleClass(e.target);
        }
      }
      /**
       * If the user changes tabs, keep track of whether or not the previously
       * focused element had .focus-visible.
       * @param {Event} e
       */


      function onVisibilityChange(e) {
        if (document.visibilityState == 'hidden') {
          // If the tab becomes active again, the browser will handle calling focus
          // on the element (Safari actually calls it twice).
          // If this tab change caused a blur on an element with focus-visible,
          // re-apply the class when the user switches back to the tab.
          if (hadFocusVisibleRecently) {
            hadKeyboardEvent = true;
          }

          addInitialPointerMoveListeners();
        }
      }
      /**
       * Add a group of listeners to detect usage of any pointing devices.
       * These listeners will be added when the polyfill first loads, and anytime
       * the window is blurred, so that they are active when the window regains
       * focus.
       */


      function addInitialPointerMoveListeners() {
        document.addEventListener('mousemove', onInitialPointerMove);
        document.addEventListener('mousedown', onInitialPointerMove);
        document.addEventListener('mouseup', onInitialPointerMove);
        document.addEventListener('pointermove', onInitialPointerMove);
        document.addEventListener('pointerdown', onInitialPointerMove);
        document.addEventListener('pointerup', onInitialPointerMove);
        document.addEventListener('touchmove', onInitialPointerMove);
        document.addEventListener('touchstart', onInitialPointerMove);
        document.addEventListener('touchend', onInitialPointerMove);
      }

      function removeInitialPointerMoveListeners() {
        document.removeEventListener('mousemove', onInitialPointerMove);
        document.removeEventListener('mousedown', onInitialPointerMove);
        document.removeEventListener('mouseup', onInitialPointerMove);
        document.removeEventListener('pointermove', onInitialPointerMove);
        document.removeEventListener('pointerdown', onInitialPointerMove);
        document.removeEventListener('pointerup', onInitialPointerMove);
        document.removeEventListener('touchmove', onInitialPointerMove);
        document.removeEventListener('touchstart', onInitialPointerMove);
        document.removeEventListener('touchend', onInitialPointerMove);
      }
      /**
       * When the polfyill first loads, assume the user is in keyboard modality.
       * If any event is received from a pointing device (e.g. mouse, pointer,
       * touch), turn off keyboard modality.
       * This accounts for situations where focus enters the page from the URL bar.
       * @param {Event} e
       */


      function onInitialPointerMove(e) {
        // Work around a Safari quirk that fires a mousemove on <html> whenever the
        // window blurs, even if you're tabbing out of the page. ¯\_(ツ)_/¯
        if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {
          return;
        }

        hadKeyboardEvent = false;
        removeInitialPointerMoveListeners();
      } // For some kinds of state, we are interested in changes at the global scope
      // only. For example, global pointer input, global key presses and global
      // visibility change should affect the state at every scope:


      document.addEventListener('keydown', onKeyDown, true);
      document.addEventListener('mousedown', onPointerDown, true);
      document.addEventListener('pointerdown', onPointerDown, true);
      document.addEventListener('touchstart', onPointerDown, true);
      document.addEventListener('visibilitychange', onVisibilityChange, true);
      addInitialPointerMoveListeners(); // For focus and blur, we specifically care about state changes in the local
      // scope. This is because focus / blur events that originate from within a
      // shadow root are not re-dispatched from the host element if it was already
      // the active element in its own scope:

      scope.addEventListener('focus', onFocus, true);
      scope.addEventListener('blur', onBlur, true); // We detect that a node is a ShadowRoot by ensuring that it is a
      // DocumentFragment and also has a host property. This check covers native
      // implementation and polyfill implementation transparently. If we only cared
      // about the native implementation, we could just check if the scope was
      // an instance of a ShadowRoot.

      if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {
        // Since a ShadowRoot is a special kind of DocumentFragment, it does not
        // have a root element to add a class to. So, we add this attribute to the
        // host element instead:
        scope.host.setAttribute('data-js-focus-visible', '');
      } else if (scope.nodeType === Node.DOCUMENT_NODE) {
        document.documentElement.classList.add('js-focus-visible');
      }
    } // It is important to wrap all references to global window and document in
    // these checks to support server-side rendering use cases
    // @see https://github.com/WICG/focus-visible/issues/199


    if (typeof window !== 'undefined' && typeof document !== 'undefined') {
      // Make the polyfill helper globally available. This can be used as a signal
      // to interested libraries that wish to coordinate with the polyfill for e.g.,
      // applying the polyfill to a shadow root:
      window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill; // Notify interested libraries of the polyfill's presence, in case the
      // polyfill was loaded lazily:

      var event;

      try {
        event = new CustomEvent('focus-visible-polyfill-ready');
      } catch (error) {
        // IE11 does not support using CustomEvent as a constructor directly:
        event = document.createEvent('CustomEvent');
        event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});
      }

      window.dispatchEvent(event);
    }

    if (typeof document !== 'undefined') {
      // Apply the polyfill to the global document, so that no JavaScript
      // coordination is required to use the polyfill in the top-level document:
      applyFocusVisiblePolyfill(document);
    }
  });
});

var SprkToggle = /*#__PURE__*/function (_Component) {
  _inherits(SprkToggle, _Component);

  var _super = _createSuper(SprkToggle);

  function SprkToggle(props) {
    var _this;

    _classCallCheck(this, SprkToggle);

    _this = _super.call(this, props);
    var isDefaultOpen = _this.props.isDefaultOpen;
    _this.state = {
      isOpen: isDefaultOpen || false,
      height: isDefaultOpen ? 'auto' : 0
    };
    _this.toggleOpen = _this.toggleOpen.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SprkToggle, [{
    key: "toggleOpen",
    value: function toggleOpen(e) {
      e.preventDefault();
      this.setState(function (prevState) {
        return {
          isOpen: !prevState.isOpen,
          height: !prevState.isOpen ? 'auto' : 0
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          idString = _this$props.idString,
          additionalClasses = _this$props.additionalClasses,
          analyticsString = _this$props.analyticsString,
          title = _this$props.title,
          titleAddClasses = _this$props.titleAddClasses,
          iconAddClasses = _this$props.iconAddClasses,
          toggleIconName = _this$props.toggleIconName,
          contentId = _this$props.contentId,
          other = _objectWithoutProperties(_this$props, ["children", "idString", "additionalClasses", "analyticsString", "title", "titleAddClasses", "iconAddClasses", "toggleIconName", "contentId"]);

      var _this$state = this.state,
          isOpen = _this$state.isOpen,
          height = _this$state.height;
      var containerClasses = classnames('sprk-c-Toggle', additionalClasses);
      var titleClasses = classnames('sprk-c-Toggle__trigger sprk-b-TypeBodyThree sprk-u-TextCrop--none', titleAddClasses);
      var iconClasses = classnames('sprk-c-Icon--l sprk-c-Icon--toggle sprk-u-mrs', {
        'sprk-c-Icon--open': isOpen
      }, iconAddClasses);
      return /*#__PURE__*/React__default.createElement("div", _extends({
        "data-id": idString
      }, other, {
        className: containerClasses
      }), /*#__PURE__*/React__default.createElement("button", {
        className: titleClasses,
        "data-analytics": analyticsString,
        onClick: this.toggleOpen,
        "aria-expanded": isOpen ? 'true' : 'false',
        "aria-controls": contentId
      }, /*#__PURE__*/React__default.createElement(SprkIcon, {
        iconName: toggleIconName,
        additionalClasses: iconClasses
      }), title), /*#__PURE__*/React__default.createElement(AnimateHeight, {
        duration: 300,
        height: height,
        className: "sprk-c-Toggle__content",
        id: contentId
      }, /*#__PURE__*/React__default.createElement("div", null, children)));
    }
  }]);

  return SprkToggle;
}(React.Component);

SprkToggle.defaultProps = {
  toggleIconName: 'chevron-down-circle-two-color',
  contentId: uniqueId_1('sprk_toggle_content_')
};
SprkToggle.propTypes = {
  /**
   * 	The name of the icon other than the default to use for the toggle.
   */
  toggleIconName: propTypes.string,

  /**
   * The title text for the toggle.
   */
  title: propTypes.string.isRequired,

  /** The content that will show up when the toggle opens. */
  children: propTypes.node.isRequired,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
  */
  analyticsString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /** Additional classes for the title text. */
  titleAddClasses: propTypes.string,

  /** Additional classes for the toggle icon. */
  iconAddClasses: propTypes.string,

  /**
   * A string that is used to set the `id` on the content
   * and the `aria-controls` for the toggle trigger button.
   */
  contentId: propTypes.string
};

var SprkFooterAwards = /*#__PURE__*/function (_Component) {
  _inherits(SprkFooterAwards, _Component);

  var _super = _createSuper(SprkFooterAwards);

  function SprkFooterAwards(props) {
    var _this;

    _classCallCheck(this, SprkFooterAwards);

    _this = _super.call(this, props);
    _this.state = {
      awardsImagesHasIds: props.awards.images.map(function (item) {
        return _objectSpread2({
          id: uniqueId_1()
        }, item);
      })
    };
    return _this;
  }

  _createClass(SprkFooterAwards, [{
    key: "render",
    value: function render() {
      var awards = this.props.awards;
      var awardsImagesHasIds = this.state.awardsImagesHasIds;
      return /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--large"
      }, /*#__PURE__*/React__default.createElement("h3", {
        className: "sprk-o-Stack__item sprk-b-TypeBodyOne"
      }, awards.heading), /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@s sprk-u-mbm"
      }, awardsImagesHasIds.map(function (image) {
        var element = image.element,
            href = image.href,
            analyticsString = image.analyticsString,
            addClasses = image.addClasses,
            src = image.src,
            altText = image.altText,
            rest = _objectWithoutProperties(image, ["element", "href", "analyticsString", "addClasses", "src", "altText"]);

        var TagName = element || 'a';
        return /*#__PURE__*/React__default.createElement("div", {
          key: image.id,
          className: "sprk-o-Stack__item"
        }, /*#__PURE__*/React__default.createElement(TagName, _extends({
          href: TagName === 'a' ? href || '#nogo' : undefined,
          "data-analytics": analyticsString
        }, rest), /*#__PURE__*/React__default.createElement("img", {
          className: addClasses,
          src: src,
          alt: altText
        })));
      })), /*#__PURE__*/React__default.createElement(SprkToggle, {
        additionalClasses: "sprk-o-Stack__item",
        toggleIconName: "chevron-down-circle-two-color",
        title: awards.disclaimerTitle,
        titleAddClasses: "sprk-b-TypeBodyFour sprk-u-FontWeight--normal",
        analyticsString: awards.disclaimerAnalytics
      }, /*#__PURE__*/React__default.createElement("p", {
        className: "sprk-b-TypeBodyFour sprk-u-pts sprk-u-pbs"
      }, awards.disclaimerText)));
    }
  }]);

  return SprkFooterAwards;
}(React.Component);

SprkFooterAwards.propTypes = {
  awards: propTypes.shape({
    /** The main headline for the section. */
    heading: propTypes.string,

    /** Configures the images in the Awards Section. */
    images: propTypes.arrayOf(propTypes.shape({
      /**
       *  The link href for the image
       */
      href: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func]),

      /**
       * The image `src`.
       */
      src: propTypes.string,

      /**
       * The `alt` text for the image, icon, or `SprkIcon`.
       */
      altText: propTypes.string,

      /**
       * Expects a space separated string of
       * classes to be added to the award image.
       */
      addClasses: propTypes.string,

      /**
       * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
       */
      analyticsString: propTypes.string
    })).isRequired,

    /** The text rendered in the disclaimer. */
    disclaimerText: propTypes.string,

    /**
     * The value supplied will be assigned to the
     * `data-analytics` attribute on the disclaimer.
     * Intended for an outside
     * library to capture data.
     */
    disclaimerAnalytics: propTypes.string,

    /** The title text rendered in the disclaimer. */
    disclaimerTitle: propTypes.string
  }).isRequired
};

var SprkFooter = /*#__PURE__*/function (_Component) {
  _inherits(SprkFooter, _Component);

  var _super = _createSuper(SprkFooter);

  function SprkFooter(props) {
    var _this;

    _classCallCheck(this, SprkFooter);

    _this = _super.call(this, props);
    var linkColumns = props.linkColumns,
        additionalIcons = props.additionalIcons,
        paragraphs = props.paragraphs;
    _this.state = {
      linkColumnsHasIds: linkColumns.map(function (item) {
        return {
          heading: item.heading,
          id: uniqueId_1(),
          links: item.links.map(function (link) {
            return _objectSpread2({
              id: uniqueId_1()
            }, link);
          })
        };
      }),
      additionalIconsHasIds: additionalIcons.map(function (icon) {
        return _objectSpread2({
          id: uniqueId_1()
        }, icon);
      }),
      paragraphsHasIds: paragraphs.map(function (p) {
        return _objectSpread2({
          id: uniqueId_1()
        }, p);
      })
    };
    return _this;
  }

  _createClass(SprkFooter, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          globalItems = _this$props.globalItems,
          connectIcons = _this$props.connectIcons,
          additionalClasses = _this$props.additionalClasses,
          idString = _this$props.idString,
          awards = _this$props.awards,
          paragraphs = _this$props.paragraphs,
          additionalIcons = _this$props.additionalIcons;
      var _this$state = this.state,
          linkColumnsHasIds = _this$state.linkColumnsHasIds,
          additionalIconsHasIds = _this$state.additionalIconsHasIds,
          paragraphsHasIds = _this$state.paragraphsHasIds;
      var classNames = classnames('sprk-o-Box sprk-o-Box--large sprk-u-BackgroundColor--gray', additionalClasses);
      return /*#__PURE__*/React__default.createElement("div", {
        className: classNames
      }, /*#__PURE__*/React__default.createElement("footer", {
        className: "sprk-o-CenteredColumn sprk-o-Stack sprk-o-Stack--misc-b",
        role: "contentinfo",
        "data-id": idString
      }, /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@m"
      }, Object.keys(globalItems).length > 1 && /*#__PURE__*/React__default.createElement(SprkFooterGlobalSection, {
        globalItems: globalItems
      }), /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-o-Stack__item--seven-tenths@m sprk-o-Stack sprk-o-Stack--medium"
      }, /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-o-Stack--split@m"
      }, linkColumnsHasIds.length > 0 && linkColumnsHasIds.map(function (column) {
        return /*#__PURE__*/React__default.createElement("div", {
          key: column.id,
          className: "sprk-o-Stack__item sprk-o-Stack__item--third@m sprk-o-Box sprk-u-PaddingRight--a sprk-o-Stack sprk-o-Stack--large"
        }, /*#__PURE__*/React__default.createElement("h3", {
          className: "sprk-o-Stack__item sprk-b-TypeBodyOne"
        }, column.heading), /*#__PURE__*/React__default.createElement("ul", {
          className: "sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--misc-a sprk-b-List sprk-b-List--bare"
        }, column.links.map(function (columnLink) {
          var id = columnLink.id,
              href = columnLink.href,
              analyticsString = columnLink.analyticsString,
              text = columnLink.text,
              element = columnLink.element,
              rest = _objectWithoutProperties(columnLink, ["id", "href", "analyticsString", "text", "element"]);

          var TagName = element || 'a';
          return /*#__PURE__*/React__default.createElement("li", {
            key: id,
            className: "sprk-o-Stack__item"
          }, /*#__PURE__*/React__default.createElement(TagName, _extends({
            className: "sprk-b-Link sprk-b-Link--simple sprk-u-FontWeight--normal",
            href: TagName === 'a' ? href || '#nogo' : undefined,
            "data-analytics": analyticsString
          }, rest), text));
        })));
      })), Object.keys(connectIcons).length > 1 && /*#__PURE__*/React__default.createElement(SprkFooterConnectIcons, {
        connectIcons: connectIcons
      }))), /*#__PURE__*/React__default.createElement("span", {
        className: "sprk-c-Divider sprk-u-mvn sprk-u-mhm"
      }), /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--misc-b sprk-o-Box sprk-u-PaddingTop--b"
      }, Object.keys(awards).length > 1 && /*#__PURE__*/React__default.createElement(SprkFooterAwards, {
        awards: awards
      }), paragraphs.length > 0 && paragraphsHasIds.map(function (p) {
        return /*#__PURE__*/React__default.createElement("p", {
          key: p.id,
          className: "sprk-o-Stack__item sprk-b-TypeBodyFour"
        }, p.text);
      }), additionalIcons.length > 0 && /*#__PURE__*/React__default.createElement("ul", {
        className: "sprk-o-Stack__item sprk-o-Stack__item--flex@m sprk-o-Stack sprk-o-Stack--split@xxs sprk-o-Stack--medium sprk-b-List sprk-b-List--bare"
      }, additionalIconsHasIds.map(function (icon) {
        var id = icon.id,
            href = icon.href,
            analyticsString = icon.analyticsString,
            name = icon.name,
            addClasses = icon.addClasses,
            screenReaderText = icon.screenReaderText,
            element = icon.element,
            rest = _objectWithoutProperties(icon, ["id", "href", "analyticsString", "name", "addClasses", "screenReaderText", "element"]);

        var TagName = element || 'a';
        return /*#__PURE__*/React__default.createElement("li", {
          key: id,
          className: "sprk-o-Stack__item"
        }, /*#__PURE__*/React__default.createElement(TagName, _extends({
          className: "sprk-b-Link sprk-b-Link--plain",
          href: TagName === 'a' ? href || '#nogo' : undefined,
          "data-analytics": analyticsString
        }, rest), /*#__PURE__*/React__default.createElement(SprkIcon, {
          iconName: name,
          additionalClasses: "sprk-c-Icon--stroke-current-color sprk-c-Icon--l ".concat(addClasses)
        }), /*#__PURE__*/React__default.createElement("span", {
          className: "sprk-u-ScreenReaderText"
        }, screenReaderText)));
      })))));
    }
  }]);

  return SprkFooter;
}(React.Component);

SprkFooter.defaultProps = {
  additionalClasses: '',
  idString: '',
  globalItems: {},
  linkColumns: [],
  connectIcons: {},
  awards: {},
  additionalIcons: [],
  paragraphs: []
};
SprkFooter.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /** Object used to configure the global items section. */
  globalItems: propTypes.shape({
    /** Main headline for the global section. */
    heading: propTypes.string,

    /** Object used to configure each item in global items section such as `mediaType`, `src`, `description` etc. */
    items: propTypes.arrayOf(propTypes.shape({
      /** The type of media element to render. */
      mediaType: propTypes.oneOf(['image', 'svg', 'SprkIcon']),

      /**
       * Assigned to `src` attribute of the item's image.
       */
      src: propTypes.string,

      /**
       * Assigned to `href` of item.
       */
      mediaHref: propTypes.string,

      /**
       * The `alt` text for the image, icon, or `SprkIcon`.
       */
      altText: propTypes.string.isRequired,

      /**
       * Expects a space separated string
       * of classes to be added to the
       * media of the item.
       */
      mediaAddClasses: propTypes.string,

      /** The description of the image */
      description: propTypes.string,

      /**
       * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
       */
      analyticsString: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func])
    }))
  }),

  /** Constructs the columns of links in the Footer. Maximum number of columns is 3. */
  linkColumns: propTypes.arrayOf(propTypes.shape({
    /** The main headline for the column. */
    heading: propTypes.string,

    /**  The links for each column. */
    links: propTypes.arrayOf(propTypes.shape({
      /**
       * The link `href`.
      */
      href: propTypes.string,

      /**
       * The link text.
       */
      text: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func]),

      /**
       * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
       */
      analyticsString: propTypes.string
    }))
  })),

  /** Constructs the Connect Icon Section. */
  connectIcons: propTypes.shape({
    /** The main headline for the section. */
    heading: propTypes.string,

    /** Configures the icons for the section. */
    icons: propTypes.arrayOf(propTypes.shape({
      /** The link `href` for the icon. */
      href: propTypes.string,

      /** Determines what icon `SprkIcon` renders */
      name: propTypes.string,

      /** Text used for screen readers. */
      screenReaderText: propTypes.string,

      /**
       * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
       */
      analyticsString: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func])
    }))
  }),

  /** Configures the Awards Section. */
  awards: propTypes.shape({
    /** The main headline for the section. */
    heading: propTypes.string,

    /** Configures the images in the Awards Section. */
    images: propTypes.arrayOf(propTypes.shape({
      /** The link href for the image. */
      href: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      element: propTypes.oneOfType([propTypes.string, propTypes.func]),

      /**
       * The image `src`.
       */
      src: propTypes.string,

      /**
       * The `alt` text for the image, icon, or `SprkIcon`.
       */
      altText: propTypes.string.isRequired,

      /**
       * Expects a space separated string of
       * classes to be added to the award image.
       */
      addClasses: propTypes.string,

      /**
       * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
       */
      analyticsString: propTypes.string
    })),

    /** The text rendered in the disclaimer. */
    disclaimerText: propTypes.string,

    /**
     * The value supplied will be assigned to the
     * `data-analytics` attribute on the disclaimer.
     * Intended for an outside
     * library to capture data.
     */
    disclaimerAnalytics: propTypes.string,

    /** The title text rendered in the disclaimer. */
    disclaimerTitle: propTypes.string
  }),

  /** Configuration used for additional icons at bottom of footer. */
  additionalIcons: propTypes.arrayOf(propTypes.shape({
    /** The icon name `SprkIcon` will use to render. */
    name: propTypes.string,

    /** The icon `href`. */
    href: propTypes.string,

    /**
     * Expects a space separated string of
     * classes to be added to the icon.
     */
    addClasses: propTypes.string,

    /** Text used for screen readers. */
    screenReaderText: propTypes.string,

    /**
     * Determines if link renders as an anchor tag, or router link.
     */
    element: propTypes.oneOfType([propTypes.string, propTypes.func]),

    /**
     * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
     */
    analyticsString: propTypes.string
  })),

  /** Configuration for the paragraphs of copyright info, etc. */
  paragraphs: propTypes.arrayOf(propTypes.shape({
    /**
     * The text to render in the paragraphs section.
     */
    text: propTypes.string
  }))
};

var SprkTooltip = /*#__PURE__*/function (_Component) {
  _inherits(SprkTooltip, _Component);

  var _super = _createSuper(SprkTooltip);

  function SprkTooltip(props) {
    var _this;

    _classCallCheck(this, SprkTooltip);

    _this = _super.call(this, props);
    var isDefaultOpen = props.isDefaultOpen;
    _this.state = {
      isToggled: isDefaultOpen || false
    };
    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));
    _this.handleWindowKeydown = _this.handleWindowKeydown.bind(_assertThisInitialized(_this));
    _this.handleWindowClick = _this.handleWindowClick.bind(_assertThisInitialized(_this));
    _this.setPositioningClass = _this.setPositioningClass.bind(_assertThisInitialized(_this));
    _this.triggerRef = /*#__PURE__*/React__default.createRef();
    _this.tooltipRef = /*#__PURE__*/React__default.createRef();
    return _this;
  }

  _createClass(SprkTooltip, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('keydown', this.handleWindowKeydown);
      window.addEventListener('click', this.handleWindowClick);
      this.setPositioningClass();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.handleWindowKeydown);
      window.removeEventListener('click', this.handleWindowClick);
    }
  }, {
    key: "setPositioningClass",
    value: function setPositioningClass() {
      var trigger = this.triggerRef.current;
      var elemX = trigger.getBoundingClientRect().left;
      var elemY = trigger.getBoundingClientRect().top;
      var viewportWidth = window.innerWidth;
      var viewportHeight = window.innerHeight;
      var maxWidth = 328;
      var triggerWidth = 16;
      var tooltipBorderWidth = 16;
      var tooltipSpacing = 16;
      var calculatedWidth;

      if (elemX > viewportWidth / 2) {
        calculatedWidth = elemX + triggerWidth + tooltipBorderWidth - tooltipSpacing;

        if (elemY > viewportHeight / 2) {
          this.setState({
            position: 'topleft'
          });
        } else {
          this.setState({
            position: 'bottomleft'
          });
        }
      } else {
        calculatedWidth = viewportWidth - elemX + tooltipBorderWidth - tooltipSpacing;

        if (elemY > viewportHeight / 2) {
          this.setState({
            position: 'topright'
          });
        } else {
          this.setState({
            position: 'bottomright'
          });
        }
      }

      if (calculatedWidth < maxWidth) {
        // overwrite the width if there's not enough room to display it
        this.tooltipRef.current.setAttribute('style', "width:".concat(calculatedWidth, "px"));
      }
    }
  }, {
    key: "handleWindowKeydown",
    value: function handleWindowKeydown(e) {
      if (e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27) {
        this.setState({
          isToggled: false
        });
      }
    }
  }, {
    key: "handleWindowClick",
    value: function handleWindowClick(e) {
      var isToggled = this.state.isToggled;

      if (isToggled) {
        if (!this.tooltipRef.current.contains(e.target) && !this.triggerRef.current.contains(e.target)) {
          this.setState({
            isToggled: false
          });
        }
      }
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.setState(function (prevState) {
        return {
          isToggled: !prevState.isToggled
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          idString = _this$props.idString,
          triggerIconType = _this$props.triggerIconType,
          iconAdditionalClasses = _this$props.iconAdditionalClasses,
          additionalClasses = _this$props.additionalClasses,
          analyticsString = _this$props.analyticsString,
          isDefaultOpen = _this$props.isDefaultOpen,
          id = _this$props.id,
          other = _objectWithoutProperties(_this$props, ["children", "idString", "triggerIconType", "iconAdditionalClasses", "additionalClasses", "analyticsString", "isDefaultOpen", "id"]);

      var _this$state = this.state,
          isToggled = _this$state.isToggled,
          position = _this$state.position;
      return /*#__PURE__*/React__default.createElement("span", _extends({}, other, {
        className: "sprk-c-Tooltip__container",
        "data-id": idString
      }), /*#__PURE__*/React__default.createElement("button", {
        type: "button",
        ref: this.triggerRef,
        onClick: this.toggle,
        onMouseOver: this.setPositioningClass,
        onFocus: this.setPositioningClass,
        className: classnames('sprk-c-Tooltip__trigger', {
          'sprk-c-Tooltip--toggled': isToggled
        }),
        "aria-expanded": isToggled,
        "aria-labelledby": id,
        "data-analytics": analyticsString
      }, /*#__PURE__*/React__default.createElement(SprkIcon, {
        iconName: triggerIconType,
        additionalClasses: iconAdditionalClasses
      })), /*#__PURE__*/React__default.createElement("span", {
        ref: this.tooltipRef,
        className: classnames('sprk-c-Tooltip', additionalClasses, {
          'sprk-c-Tooltip--top-left': position === 'topleft',
          'sprk-c-Tooltip--top-right': position === 'topright',
          'sprk-c-Tooltip--bottom-left': position === 'bottomleft',
          'sprk-c-Tooltip--bottom-right': position === 'bottomright'
        }),
        id: id
      }, children));
    }
  }]);

  return SprkTooltip;
}(React.Component);

SprkTooltip.defaultProps = {
  triggerIconType: 'question-filled',
  id: uniqueId_1('sprk_tooltip_')
};
SprkTooltip.propTypes = {
  /** Content to render inside of the component. */
  children: propTypes.node,

  /**
   * Expects a space separated string
   * of classes to be added to the
   * tooltip element.
   */
  additionalClasses: propTypes.string,

  /**
   * The value supplied will be assigned to the
   * `data-analytics` attribute on the trigger element.
   * Intended for an outside
   * library to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * Expects a space separated string
   * of classes to be added to the
   * svg icon.
   */
  iconAdditionalClasses: propTypes.string,

  /**
   * ID will be placed on the tooltip element and used for
   * aria-labelledby on the trigger element.
   */
  id: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a
   * unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Whether or not the tooltip is toggled open when the component renders.
   */
  isDefaultOpen: propTypes.bool,

  /**
   * The icon to use for the trigger element.
   */
  triggerIconType: propTypes.string
};

var SprkAccordionItem = /*#__PURE__*/function (_Component) {
  _inherits(SprkAccordionItem, _Component);

  var _super = _createSuper(SprkAccordionItem);

  function SprkAccordionItem(props) {
    var _this;

    _classCallCheck(this, SprkAccordionItem);

    _this = _super.call(this, props);
    var isDefaultOpen = _this.props.isDefaultOpen;
    _this.state = {
      isOpen: isDefaultOpen || false,
      height: isDefaultOpen ? 'auto' : 0
    };
    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SprkAccordionItem, [{
    key: "toggle",
    value: function toggle(e) {
      var onToggle = this.props.onToggle;
      e.preventDefault();
      this.setState(function (prevState) {
        return {
          isOpen: !prevState.isOpen,
          height: !prevState.isOpen ? 'auto' : 0
        };
      });
      if (onToggle) onToggle(e);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          analyticsString = _this$props.analyticsString,
          idString = _this$props.idString,
          children = _this$props.children,
          heading = _this$props.heading,
          headingAddClasses = _this$props.headingAddClasses,
          additionalClasses = _this$props.additionalClasses,
          contentAddClasses = _this$props.contentAddClasses,
          iconAddClasses = _this$props.iconAddClasses,
          isDefaultOpen = _this$props.isDefaultOpen,
          id = _this$props.id,
          other = _objectWithoutProperties(_this$props, ["analyticsString", "idString", "children", "heading", "headingAddClasses", "additionalClasses", "contentAddClasses", "iconAddClasses", "isDefaultOpen", "id"]);

      var _this$state = this.state,
          isOpen = _this$state.isOpen,
          height = _this$state.height;
      var iconClasses = classnames('sprk-c-Icon--l sprk-c-Icon--toggle sprk-c-Accordion__icon', {
        'sprk-c-Icon--open': isOpen
      }, iconAddClasses);
      var itemClassNames = classnames('sprk-c-Accordion__item', {
        'sprk-c-Accordion__item--open': isOpen
      }, additionalClasses);
      var headingClassNames = classnames('sprk-c-Accordion__heading', 'sprk-b-TypeDisplaySeven', headingAddClasses);
      return /*#__PURE__*/React__default.createElement("li", _extends({
        className: itemClassNames,
        "data-id": idString
      }, other), /*#__PURE__*/React__default.createElement(SprkLink, {
        variant: "unstyled",
        element: "button",
        "aria-controls": id,
        additionalClasses: "sprk-c-Accordion__summary",
        "data-analytics": analyticsString,
        onClick: this.toggle,
        "aria-expanded": isOpen ? 'true' : 'false'
      }, /*#__PURE__*/React__default.createElement("h3", {
        className: headingClassNames
      }, heading), /*#__PURE__*/React__default.createElement(SprkIcon, {
        iconName: "chevron-up-circle-two-color",
        additionalClasses: iconClasses
      })), /*#__PURE__*/React__default.createElement(AnimateHeight, {
        duration: 300,
        height: height
      }, /*#__PURE__*/React__default.createElement("div", {
        className: classnames('sprk-c-Accordion__content', contentAddClasses),
        id: id
      }, children)));
    }
  }]);

  return SprkAccordionItem;
}(React.Component);

SprkAccordionItem.defaultProps = {
  isDefaultOpen: false
};
SprkAccordionItem.propTypes = {
  /**
   * Children content for the item.
   */
  children: propTypes.node,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /** The text for the item heading. */
  heading: propTypes.string.isRequired,

  /**
   * Expects a space separated string
   * of classes to be added to the
   * heading.
   */
  headingAddClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Used to specify whether the item should be open by default.
   */
  isDefaultOpen: propTypes.bool,

  /**
   * Expects a space separated string
   * of classes to be added to the
   * icon.
   */
  iconAddClasses: propTypes.string,

  /**
   * Expects a space separated string
   * of classes to be added to the
   * toggle content.
   */
  contentAddClasses: propTypes.string
};

var SprkAccordion = /*#__PURE__*/function (_Component) {
  _inherits(SprkAccordion, _Component);

  var _super = _createSuper(SprkAccordion);

  function SprkAccordion(props) {
    var _this;

    _classCallCheck(this, SprkAccordion);

    _this = _super.call(this, props);
    _this.state = {
      items: props.children.map(function (item) {
        return _objectSpread2({
          id: uniqueId_1('accordion-item-')
        }, item);
      })
    };
    return _this;
  }

  _createClass(SprkAccordion, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          idString = _this$props.idString,
          additionalClasses = _this$props.additionalClasses,
          other = _objectWithoutProperties(_this$props, ["idString", "additionalClasses"]);

      var items = this.state.items;
      return /*#__PURE__*/React__default.createElement("ul", _extends({
        className: classnames('sprk-c-Accordion sprk-o-VerticalList', additionalClasses),
        "data-id": idString
      }, other), items.map(function (item) {
        if (item.type.name !== SprkAccordionItem.name) return null;
        return /*#__PURE__*/React__default.createElement(SprkAccordionItem, _extends({}, item.props, {
          key: item.id,
          id: item.id
        }));
      }));
    }
  }]);

  return SprkAccordion;
}(React.Component);

SprkAccordion.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Expects `SprkAccordionItem` as children.
   */
  children: propTypes.node.isRequired,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string
};

var SprkStack = function SprkStack(props) {
  var children = props.children,
      itemSpacing = props.itemSpacing,
      splitAt = props.splitAt,
      additionalClasses = props.additionalClasses,
      idString = props.idString,
      other = _objectWithoutProperties(props, ["children", "itemSpacing", "splitAt", "additionalClasses", "idString"]);

  var classNames = classnames('sprk-o-Stack', additionalClasses, {
    'sprk-o-Stack--tiny': itemSpacing === 'tiny',
    'sprk-o-Stack--small': itemSpacing === 'small',
    'sprk-o-Stack--medium': itemSpacing === 'medium',
    'sprk-o-Stack--large': itemSpacing === 'large',
    'sprk-o-Stack--huge': itemSpacing === 'huge',
    'sprk-o-Stack--misc-a': itemSpacing === 'miscA' || itemSpacing === 'misc-a',
    'sprk-o-Stack--misc-b': itemSpacing === 'miscB' || itemSpacing === 'misc-b',
    'sprk-o-Stack--misc-c': itemSpacing === 'miscC' || itemSpacing === 'misc-c',
    'sprk-o-Stack--misc-d': itemSpacing === 'miscD' || itemSpacing === 'misc-d',
    'sprk-o-Stack--split@xxs': splitAt === 'extraTiny',
    'sprk-o-Stack--split@xs': splitAt === 'tiny',
    'sprk-o-Stack--split@s': splitAt === 'small',
    'sprk-o-Stack--split@m': splitAt === 'medium',
    'sprk-o-Stack--split@l': splitAt === 'large',
    'sprk-o-Stack--split@xl': splitAt === 'huge'
  });
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classNames,
    "data-id": idString
  }, other), children);
};

SprkStack.defaultProps = {
  children: '',
  splitAt: '',
  itemSpacing: '',
  idString: '',
  additionalClasses: ''
};
SprkStack.propTypes = {
  children: propTypes.node,

  /**
   * Determines when the layout will switch
   * `flex-direction` from `column` to `row` based on
   * breakpoint.
   */
  splitAt: propTypes.oneOf(['extraTiny', 'tiny', 'small', 'medium', 'large', 'huge', '']),

  /**
   * Determines spacing between items.
   */
  itemSpacing: propTypes.oneOf(['tiny', 'small', 'medium', 'large', 'huge', 'misc-a', 'misc-b', 'misc-c', 'misc-d', 'miscA', 'miscB', 'miscC', 'miscD', '']),

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkStackItem = function SprkStackItem(props) {
  var children = props.children,
      additionalClasses = props.additionalClasses,
      idString = props.idString,
      other = _objectWithoutProperties(props, ["children", "additionalClasses", "idString"]);

  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classnames('sprk-o-Stack__item', additionalClasses),
    "data-id": idString
  }, other), children);
};

SprkStackItem.defaultProps = {
  children: '',
  idString: '',
  additionalClasses: ''
};
SprkStackItem.propTypes = {
  /**  Content to render inside of of SprkStackItem. */
  children: propTypes.node,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkAward = function SprkAward(props) {
  var idString = props.idString,
      additionalClasses = props.additionalClasses,
      heading = props.heading,
      disclaimerTitle = props.disclaimerTitle,
      disclaimerText = props.disclaimerText,
      disclaimerAnalytics = props.disclaimerAnalytics,
      images = props.images,
      splitAt = props.splitAt,
      itemSpacing = props.itemSpacing;
  var classNames = classnames('sprk-o-CenteredColumn', additionalClasses);
  return /*#__PURE__*/React__default.createElement(SprkStack, {
    additionalClasses: classNames,
    idString: idString,
    itemSpacing: itemSpacing
  }, /*#__PURE__*/React__default.createElement("h2", {
    className: "sprk-o-Stack__item sprk-o-Stack__item--center-column sprk-b-TypeDisplayFive sprk-b-Measure sprk-b-Measure--narrow sprk-u-TextAlign--center"
  }, heading), /*#__PURE__*/React__default.createElement(SprkStack, {
    additionalClasses: "sprk-o-Stack__item sprk-o-Stack__item--center-column",
    splitAt: splitAt,
    itemSpacing: itemSpacing
  }, images.map(function (image) {
    var analyticsString = image.analyticsString,
        href = image.href,
        linkAddClasses = image.linkAddClasses,
        addClasses = image.addClasses,
        alt = image.alt,
        src = image.src,
        element = image.element,
        rest = _objectWithoutProperties(image, ["analyticsString", "href", "linkAddClasses", "addClasses", "alt", "src", "element"]);

    var TagName = element || 'a';
    return /*#__PURE__*/React__default.createElement(TagName, _extends({
      className: classnames('sprk-o-Stack__item sprk-o-Stack__item--flex@s sprk-o-Stack', linkAddClasses),
      href: TagName === 'a' ? href || '#nogo' : undefined,
      "data-analytics": analyticsString,
      key: uniqueId_1('award-img-')
    }, rest), /*#__PURE__*/React__default.createElement("img", {
      className: classnames('sprk-o-Stack__item sprk-o-Stack__item--center-column', addClasses),
      alt: alt,
      src: src
    }));
  })), /*#__PURE__*/React__default.createElement(SprkToggle, {
    title: disclaimerTitle,
    analyticsString: disclaimerAnalytics,
    additionalClasses: "sprk-o-Stack__item"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "sprk-b-TypeBodyFour sprk-u-pts sprk-u-pbs"
  }, disclaimerText)));
};

SprkAward.defaultProps = {
  splitAt: 'small',
  itemSpacing: 'medium',
  additionalClasses: '',
  idString: '',
  heading: '',
  disclaimerText: '',
  disclaimerAnalytics: '',
  disclaimerTitle: ''
};
SprkAward.propTypes = {
  /** Determines the spacing between the items. */
  itemSpacing: propTypes.string,

  /**
   * Determines when the flex-direction should
   * change to row from column for the images.
   */
  splitAt: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /** Heading text. */
  heading: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /** The image data. */
  images: propTypes.arrayOf(propTypes.shape({
    /** The link href for the image. */
    href: propTypes.string,

    /** Element to render, can be 'a' or Link. */
    element: propTypes.oneOfType([propTypes.string, propTypes.func]),

    /** The image src. */
    src: propTypes.string.isRequired,

    /** The alt text for the image, icon, or SprkIcon. */
    alt: propTypes.string.isRequired,

    /** Additional classes for the image. */
    addClasses: propTypes.string,

    /** Additional classes for the link wrapping the image. */
    linkAddClasses: propTypes.string,

    /**
     * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
     */
    analyticsString: propTypes.string
  })).isRequired,

  /** The text rendered in the disclaimer. */
  disclaimerText: propTypes.string,

  /** Used for the data-analytics value on the title. */
  disclaimerAnalytics: propTypes.string,

  /** The title text rendered in the disclaimer. */
  disclaimerTitle: propTypes.string
};

var SprkCardHighlightedHeader = function SprkCardHighlightedHeader(props) {
  var highlightedHeaderConfig = props.highlightedHeaderConfig;
  var description = highlightedHeaderConfig.description,
      title = highlightedHeaderConfig.title,
      bodyText = highlightedHeaderConfig.bodyText;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    className: " sprk-o-Stack__item sprk-c-Card__header sprk-o-Stack sprk-o-Stack--medium "
  }, /*#__PURE__*/React__default.createElement("h3", {
    className: " sprk-b-TypeDisplaySeven sprk-o-Stack__item sprk-u-Color--white "
  }, description), /*#__PURE__*/React__default.createElement("h4", {
    className: " sprk-b-TypeDisplayFive sprk-o-Stack__item sprk-u-Color--white "
  }, title)), /*#__PURE__*/React__default.createElement("div", {
    className: " sprk-o-Stack__item sprk-o-Stack sprk-o-Stack--medium sprk-c-Card__content "
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "sprk-b-TypeBodyTwo sprk-o-Stack__item"
  }, bodyText)));
};

SprkCardHighlightedHeader.propTypes = {
  highlightedHeaderConfig: propTypes.shape({
    /** Headline of the Highlighted Header Card. */
    title: propTypes.string,

    /**
     * Text inside of Highlighted Header Card.
     */
    bodyText: propTypes.string,

    /** Sub-headline text of the Highlighted Header Card. */
    description: propTypes.string
  })
};

var SprkCardTeaser = function SprkCardTeaser(props) {
  var teaserConfig = props.teaserConfig;
  var bodyText = teaserConfig.bodyText,
      cta = teaserConfig.cta,
      media = teaserConfig.media,
      title = teaserConfig.title,
      titleFirst = teaserConfig.titleFirst;

  var BodyText = function BodyText() {
    return /*#__PURE__*/React__default.createElement("p", {
      className: "sprk-b-TypeBodyTwo sprk-o-Stack__item"
    }, bodyText);
  };

  var Title = function Title() {
    return /*#__PURE__*/React__default.createElement("h3", {
      className: classnames('sprk-b-TypeDisplayFive sprk-o-Stack__item', {
        'sprk-c-Card__content': titleFirst,
        'sprk-u-TextAlign--center': media.mediaVariant === 'icon'
      })
    }, title);
  };

  var Media = function Media() {
    var additionalMediaIconClasses = media.additionalMediaIconClasses,
        href = media.href,
        mediaLinkElement = media.mediaLinkElement,
        iconName = media.iconName,
        imgAlt = media.imgAlt,
        imgSrc = media.imgSrc,
        mediaAnalyticsString = media.mediaAnalyticsString,
        mediaVariant = media.mediaVariant,
        rest = _objectWithoutProperties(media, ["additionalMediaIconClasses", "href", "mediaLinkElement", "iconName", "imgAlt", "imgSrc", "mediaAnalyticsString", "mediaVariant"]);

    var TagName = mediaLinkElement || 'a';
    return /*#__PURE__*/React__default.createElement(TagName, _extends({
      href: href,
      "data-analytics": mediaAnalyticsString,
      className: classnames('sprk-o-Stack__item', {
        'sprk-u-AbsoluteCenter': mediaVariant === 'icon'
      })
    }, rest), mediaVariant === 'icon' ? /*#__PURE__*/React__default.createElement(SprkIcon, {
      iconName: iconName,
      additionalClasses: additionalMediaIconClasses
    }) : /*#__PURE__*/React__default.createElement("img", {
      className: classnames({
        'sprk-c-Card__media': !titleFirst
      }),
      alt: imgAlt,
      src: imgSrc
    }));
  };

  var CtaLink = function CtaLink() {
    var additionalCtaIconClasses = cta.additionalCtaIconClasses,
        ctaAnalytics = cta.ctaAnalytics,
        ctaIcon = cta.ctaIcon,
        ctaLinkElement = cta.ctaLinkElement,
        ctaVariant = cta.ctaVariant,
        href = cta.href,
        text = cta.text,
        rest = _objectWithoutProperties(cta, ["additionalCtaIconClasses", "ctaAnalytics", "ctaIcon", "ctaLinkElement", "ctaVariant", "href", "text"]);

    var TagName = ctaLinkElement || 'a';
    return /*#__PURE__*/React__default.createElement(TagName, _extends({
      className: classnames('sprk-b-Link', {
        'sprk-b-Link--simple sprk-b-Link--has-icon': ctaIcon
      }),
      "data-analytics": ctaAnalytics,
      href: href
    }, rest), text, ctaIcon && /*#__PURE__*/React__default.createElement(SprkIcon, {
      iconName: ctaIcon,
      additionalClasses: additionalCtaIconClasses
    }));
  };

  var CtaButton = function CtaButton() {
    var _extends2;

    var ctaAnalytics = cta.ctaAnalytics,
        ctaIcon = cta.ctaIcon,
        ctaLinkElement = cta.ctaLinkElement,
        ctaVariant = cta.ctaVariant,
        href = cta.href,
        buttonVariant = cta.buttonVariant,
        text = cta.text,
        rest = _objectWithoutProperties(cta, ["ctaAnalytics", "ctaIcon", "ctaLinkElement", "ctaVariant", "href", "buttonVariant", "text"]);

    var TagName = ctaLinkElement || SprkButton;
    return /*#__PURE__*/React__default.createElement(TagName, _extends((_extends2 = {
      "data-analytics": ctaAnalytics,
      className: "sprk-c-Button"
    }, _defineProperty(_extends2, "className", classnames('sprk-c-Button', {
      'sprk-c-Button--secondary': buttonVariant === 'secondary',
      'sprk-c-Button--tertiary': buttonVariant === 'tertiary'
    })), _defineProperty(_extends2, "href", href), _defineProperty(_extends2, "element", "a"), _extends2), rest), text);
  };

  var CallToAction = function CallToAction() {
    return /*#__PURE__*/React__default.createElement("div", {
      className: "sprk-o-Stack__item"
    }, cta.ctaVariant === 'link' ? /*#__PURE__*/React__default.createElement(CtaLink, null) : /*#__PURE__*/React__default.createElement(CtaButton, null));
  };

  var GetTeaserContentOrder = function GetTeaserContentOrder() {
    // Title at top
    if (titleFirst) {
      // with image
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Title, null), /*#__PURE__*/React__default.createElement(Media, null), /*#__PURE__*/React__default.createElement("div", {
        className: classnames('sprk-o-Stack__item', 'sprk-c-Card__content', 'sprk-o-Stack', 'sprk-o-Stack--large', {
          'sprk-u-TextAlign--center': media.mediaVariant === 'icon'
        })
      }, /*#__PURE__*/React__default.createElement(BodyText, null), /*#__PURE__*/React__default.createElement(CallToAction, null)));
    } // Icon at top


    if (media.mediaVariant === 'icon') {
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
        className: " sprk-o-Stack__item sprk-c-Card__content sprk-o-Stack sprk-o-Stack--large sprk-u-TextAlign--center"
      }, /*#__PURE__*/React__default.createElement(Media, null), /*#__PURE__*/React__default.createElement(Title, null), /*#__PURE__*/React__default.createElement(BodyText, null), /*#__PURE__*/React__default.createElement(CallToAction, null)));
    } // Image at top


    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Media, null), /*#__PURE__*/React__default.createElement("div", {
      className: " sprk-o-Stack__item sprk-c-Card__content sprk-o-Stack sprk-o-Stack--large"
    }, /*#__PURE__*/React__default.createElement(Title, null), /*#__PURE__*/React__default.createElement(BodyText, null), /*#__PURE__*/React__default.createElement(CallToAction, null)));
  };

  return /*#__PURE__*/React__default.createElement(GetTeaserContentOrder, null);
};

SprkCardTeaser.propTypes = {
  /**
   * Configuration data for the Teaser.
   * Accepts data for the body text, the calls to action,
   * the media, and the title of the Card.
   */
  teaserConfig: propTypes.shape({
    /**
     * Teaser Card's body text.
     */
    bodyText: propTypes.string,

    /**
     * Configures the call to action of a Teaser Card.
     */
    cta: propTypes.shape({
      /**
       * A space-separated string of classes to add to the call-to-action icon.
       */
      additionalCtaIconClasses: propTypes.string,

      /**
       * Value assigned to the
       * `data-analytics` attribute on the Call to Action.
       * Intended for an outside
       * library to capture data.
       */
      ctaAnalytics: propTypes.string,

      /**
       * Determines what icon `SprkIcon` renders next to the Call to Action.
       */
      ctaIcon: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      ctaLinkElement: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

      /**
       * Determines if the call to action is a link or a button.
       * Will default to `link` if none provided.
       */
      ctaVariant: propTypes.oneOf(['link', 'button']),

      /**
       * Determines the `href` of the media.
       */
      href: propTypes.string,

      /** Text of the call to action. */
      text: propTypes.string,

      /**
       * The variant to use for the call-to-action button.
       */
      buttonVariant: propTypes.oneOf(['primary', 'secondary', 'tertiary'])
    }),

    /**
     * Configures the main media of the Teaser Card.
     */
    media: propTypes.shape({
      /**
       * A space-separated string of classes to add to the media icon.
       */
      additionalMediaIconClasses: propTypes.string,

      /**
       * Determines the href of the media.
       */
      href: propTypes.string,

      /**
       * Determines if link renders as an Anchor tag, or router link.
       */
      mediaLinkElement: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

      /**
       * Determines what icon `SprkIcon` renders
       * as the main media of the Teaser Card.
       */
      iconName: propTypes.string,

      /** Alternative text for the main media of Teaser Card. */
      imgAlt: propTypes.string,

      /** The source link for the media. */
      imgSrc: propTypes.string,

      /**
       * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
       */
      mediaAnalyticsString: propTypes.string,

      /**
       * Determines which type of media renders. Defaults to `img` if none provided.
       */
      mediaVariant: propTypes.oneOf(['img', 'icon'])
    }),

    /**
     * Text that will show as as
     * the main headline of the Teaser Card.
     */
    title: propTypes.string,

    /**
     * Determines if the Teaser Card's
     * title is at the top or below the main media.
     */
    titleFirst: propTypes.bool
  })
};
SprkCardTeaser.defaultProps = {
  cta: {
    ctaVariant: 'link',
    ctaLinkElement: 'a'
  },
  media: {
    mediaVariant: 'img',
    mediaLinkElement: 'a'
  }
};

var SprkCard = function SprkCard(props) {
  var additionalClasses = props.additionalClasses,
      additionalContentClasses = props.additionalContentClasses,
      children = props.children,
      highlightedHeaderConfig = props.highlightedHeaderConfig,
      idString = props.idString,
      isStandout = props.isStandout,
      teaserConfig = props.teaserConfig,
      variant = props.variant;

  var GetCardContent = function GetCardContent() {
    if (variant === 'highlightedHeader') {
      return /*#__PURE__*/React__default.createElement(SprkCardHighlightedHeader, {
        highlightedHeaderConfig: highlightedHeaderConfig
      });
    }

    if (variant === 'teaser') {
      return /*#__PURE__*/React__default.createElement(SprkCardTeaser, {
        teaserConfig: teaserConfig
      });
    }

    return /*#__PURE__*/React__default.createElement("div", {
      className: classnames('sprk-c-Card__content sprk-o-Stack__item', additionalContentClasses)
    }, children);
  };

  return /*#__PURE__*/React__default.createElement("div", {
    className: classnames('sprk-c-Card sprk-o-Stack', additionalClasses, {
      'sprk-c-Card--standout': isStandout,
      'sprk-u-TextAlign--center': teaserConfig.media.mediaVariant === 'icon'
    }),
    "data-id": idString
  }, /*#__PURE__*/React__default.createElement(GetCardContent, null));
};

SprkCard.propTypes = {
  /**
   * A space-separated string of classes to
   * add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * A space-separated string of classes to add to the card content container.
   */
  additionalContentClasses: propTypes.string,

  /** Content to render inside of SprkCard. */
  children: propTypes.node,

  /**
   * Assigned to the `data-id` attribute serving
   * as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Determines if card style has a deeper shadow.
   */
  isStandout: propTypes.bool,
  // TODO: Turn this prop into a oneOf type and include
  // the possible possibilities.It could also need a
  // default/base variant style. Issue #2496

  /**
   * Determines the type of card.
   * If none provided, it defaults to
   * the base card style.
   */
  variant: propTypes.oneOf(['highlightedHeader', 'teaser']),

  /**
   * Configurations that
   * populate the content of SprkCard
   * with a highlighted Header.
   */
  highlightedHeaderConfig: propTypes.shape({
    /**
     * The Highlighted Header Card's main body text.
     */
    bodyText: propTypes.string,

    /**
     * The Highlighted Header Card's description.
     */
    description: propTypes.string,

    /**
     * The Card's title.
     */
    title: propTypes.string
  }),

  /**
   * Configuration that populate the content of SprkCard teaser.
   */
  teaserConfig: propTypes.shape({
    /**
     * Teaser Card's body text.
     */
    bodyText: propTypes.string,

    /**
     * Configures the call to action of a Teaser Card.
     */
    cta: propTypes.shape({
      /**
       * A space-separated string of classes to add to the call-to-action icon.
       */
      additionalCtaIconClasses: propTypes.string,

      /**
       * Value assigned to the
       * `data-analytics` attribute on the Call to Action.
       * Intended for an outside
       * library to capture data.
       */
      ctaAnalytics: propTypes.string,

      /**
       * Determines what icon `SprkIcon` renders next to the Call to Action.
       */
      ctaIcon: propTypes.string,

      /**
       * Determines if link renders as an anchor tag, or router link.
       */
      ctaLinkElement: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

      /**
       * Determinds if the CTA is a link or a button.
       * Will default to `link` if none provided.
       */
      ctaVariant: propTypes.oneOf(['link', 'button']),

      /**
       * Determines the href of the media.
       */
      href: propTypes.string,

      /** Text of the CTA. */
      text: propTypes.string,

      /**
       * The button variant to use for the call to action.
       */
      buttonVariant: propTypes.oneOf(['primary', 'secondary', 'tertiary'])
    }),

    /**
     * Configures the main media of the Teaser Card.
     */
    media: propTypes.shape({
      /**
       * A space-separated string of classes to add to the media icon.
       */
      additionalMediaIconClasses: propTypes.string,

      /**
       * Determines the href of the media.
       */
      href: propTypes.string,

      /**
       * Determines if link renders as an Anchor tag, or router link.
       */
      mediaLinkElement: propTypes.oneOfType([propTypes.string, propTypes.func]),

      /**
       * Determines what icon `SprkIcon` renders
       * as the main media of the Teaser Card.
       */
      iconName: propTypes.string,

      /** Alternative text for the main media of Teaser Card. */
      imgAlt: propTypes.string,

      /** The source link for the media. */
      imgSrc: propTypes.string,

      /**
       * Assigned to the `data-analytics` attribute serving
       * as a unique selector for outside libraries to capture data.
       */
      mediaAnalyticsString: propTypes.string,

      /**
       * Determines which type of media renders.
       * Defaults to `img` if none provided.
       */
      mediaVariant: propTypes.oneOf(['img', 'icon'])
    }),

    /**
     * Text that will show as as
     * the main headline of the Teaser Card.
     */
    title: propTypes.string,

    /**
     * Determines if the Teaser Card's
     * title is at the top or below the main media.
     */
    titleFirst: propTypes.bool
  })
};
SprkCard.defaultProps = {
  isStandout: false,
  teaserConfig: {
    cta: {
      ctaVariant: 'link',
      ctaLinkElement: 'SprkLink'
    },
    media: {
      mediaVariant: 'img',
      mediaLinkElement: 'a'
    }
  }
};

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {// No operation performed.
}

var noop_1 = noop;

var CloseButton = /*#__PURE__*/function (_Component) {
  _inherits(CloseButton, _Component);

  var _super = _createSuper(CloseButton);

  function CloseButton(props) {
    var _this;

    _classCallCheck(this, CloseButton);

    _this = _super.call(this, props);
    _this.buttonRef = /*#__PURE__*/React__default.createRef();
    _this.focusButton = _this.focusButton.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(CloseButton, [{
    key: "focusButton",
    value: function focusButton() {
      // Apply focus to the button element. The button should receive focus
      // when the modal becomes visible (not necessarily when it
      // renders or updates), and only in the info variant.
      this.buttonRef.current.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          clickAction = _this$props.clickAction,
          iconName = _this$props.iconName,
          analyticsString = _this$props.analyticsString;
      return /*#__PURE__*/React__default.createElement("button", {
        className: "sprk-c-Modal__icon",
        type: "button",
        "aria-label": "Click to close this modal",
        onClick: clickAction,
        ref: this.buttonRef,
        "data-analytics": analyticsString
      }, /*#__PURE__*/React__default.createElement(SprkIcon, {
        icontype: "close",
        iconName: iconName,
        additionalClasses: "sprk-c-Icon--stroke-current-color"
      }));
    }
  }]);

  return CloseButton;
}(React.Component);

CloseButton.propTypes = {
  /**
   * Function to call when button is clicked
   */
  clickAction: propTypes.func,

  /**
   * The icon name to represent the close action
   */
  iconName: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string
};
CloseButton.defaultProps = {
  clickAction: noop_1,
  iconName: 'close'
};

var ModalFooter = /*#__PURE__*/function (_Component) {
  _inherits(ModalFooter, _Component);

  var _super = _createSuper(ModalFooter);

  function ModalFooter(props) {
    var _this;

    _classCallCheck(this, ModalFooter);

    _this = _super.call(this, props);
    _this.confirmButtonRef = /*#__PURE__*/React__default.createRef();
    _this.focusConfirm = _this.focusConfirm.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ModalFooter, [{
    key: "focusConfirm",
    value: function focusConfirm() {
      // Apply focus to the confirm button. The button should receive focus when the
      // modal becomes visible (not necessarily when it renders or updates), and
      // only in the default variant.
      this.confirmButtonRef.current.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          confirmClick = _this$props.confirmClick,
          cancelClick = _this$props.cancelClick,
          confirmText = _this$props.confirmText,
          cancelText = _this$props.cancelText,
          cancelAnalyticsString = _this$props.cancelAnalyticsString,
          confirmAnalyticsString = _this$props.confirmAnalyticsString;
      return /*#__PURE__*/React__default.createElement("footer", {
        className: "sprk-o-Stack__item"
      }, /*#__PURE__*/React__default.createElement("p", null, "\xA0"), /*#__PURE__*/React__default.createElement("button", {
        className: "sprk-c-Button sprk-u-mrm",
        onClick: confirmClick,
        type: "button",
        ref: this.confirmButtonRef,
        "data-analytics": confirmAnalyticsString
      }, confirmText), /*#__PURE__*/React__default.createElement("button", {
        className: "sprk-c-Button sprk-c-Button--tertiary",
        "data-sprk-modal-cancel": "exampleChoiceModal",
        onClick: cancelClick,
        type: "button",
        "data-analytics": cancelAnalyticsString
      }, cancelText));
    }
  }]);

  return ModalFooter;
}(React.Component);

ModalFooter.propTypes = {
  /**
   * The function that runs when confirm choice is clicked.
  */
  confirmClick: propTypes.func,

  /**
   * The function that runs when cancel choice, the mask, or Esc is pressed.
  */
  cancelClick: propTypes.func,

  /** Text to render on the confirmation button. */
  confirmText: propTypes.string,

  /** Text to render on the cancel button. */
  cancelText: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  confirmAnalyticsString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  cancelAnalyticsString: propTypes.string
};
ModalFooter.defaultProps = {
  confirmClick: noop_1,
  cancelClick: noop_1,
  confirmText: 'Confirm',
  cancelText: 'Cancel'
};

function ModalMask(_ref) {
  var clicked = _ref.clicked,
      analyticsString = _ref.analyticsString;
  return (
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events
    // key events are handled by the parent component
    React__default.createElement("div", {
      "data-sprk-modal-mask": "true",
      onClick: clicked,
      className: "sprk-c-ModalMask",
      tabIndex: "-1" // this component is only visual and has no semantic meaning
      ,
      role: "presentation",
      "data-analytics": analyticsString
    })
  );
}

ModalMask.propTypes = {
  /**
   * Function to call when mask is clicked
   */
  clicked: propTypes.func,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string
};
ModalMask.defaultProps = {
  clicked: noop_1
};

var SprkModal = /*#__PURE__*/function (_Component) {
  _inherits(SprkModal, _Component);

  var _super = _createSuper(SprkModal);

  function SprkModal(props) {
    var _this;

    _classCallCheck(this, SprkModal);

    _this = _super.call(this, props);
    _this.aria_id = uniqueId_1();
    _this.closeButtonRef = /*#__PURE__*/React__default.createRef();
    _this.footerRef = /*#__PURE__*/React__default.createRef();
    _this.containerRef = /*#__PURE__*/React__default.createRef();
    _this.cancel = _this.cancel.bind(_assertThisInitialized(_this));
    _this.removeListeners = _this.removeListeners.bind(_assertThisInitialized(_this));
    _this.attachListeners = _this.attachListeners.bind(_assertThisInitialized(_this));
    _this.setInternalFocus = _this.setInternalFocus.bind(_assertThisInitialized(_this));
    _this.setExternalFocus = _this.setExternalFocus.bind(_assertThisInitialized(_this));
    _this.handleKeyEvents = _this.handleKeyEvents.bind(_assertThisInitialized(_this));
    _this.isTabPressed = _this.isTabPressed.bind(_assertThisInitialized(_this));
    _this.isEscPressed = _this.isEscPressed.bind(_assertThisInitialized(_this));
    _this.getFocusableEls = _this.getFocusableEls.bind(_assertThisInitialized(_this));
    _this.isActiveElement = _this.isActiveElement.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SprkModal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // set focus in case the modal is open by default
      this.setInternalFocus();
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var isVisible = this.props.isVisible; // if it's closed now and going to be open

      if (!isVisible && nextProps.isVisible) {
        // save the element with focus so we can apply it later.
        this.focusTarget = document.activeElement;
      }

      return true;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var isVisible = this.props.isVisible; // if it was closed and now its open, set the internal focus

      if (isVisible && !prevProps.isVisible) {
        this.setInternalFocus();
      } // if it was open and now its closed, set the external focus


      if (prevProps.isVisible && !isVisible) {
        this.setExternalFocus();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeListeners();
    }
  }, {
    key: "isTabPressed",
    value: function isTabPressed(e) {
      e.key === 'Tab' || e.keyCode === 9;
    }
  }, {
    key: "isEscPressed",
    value: function isEscPressed(e) {
      e.key === 'Escape' || e.keyCode === 27;
    }
  }, {
    key: "getFocusableEls",
    value: function getFocusableEls(containerRef) {
      var focusEls = containerRef.querySelectorAll('a[href], area[href],' + 'input:not([disabled]),' + 'select:not([disabled]),' + 'textarea:not([disabled]),' + 'button:not([disabled]), [tabindex="0"]');
      return focusEls;
    }
  }, {
    key: "isActiveElement",
    value: function isActiveElement(elementRef) {
    }
  }, {
    key: "setExternalFocus",
    value: function setExternalFocus() {
      var _this$props = this.props,
          isVisible = _this$props.isVisible,
          shouldReturnFocusOnClose = _this$props.shouldReturnFocusOnClose; // only if the modal is closed

      if (!isVisible) {
        // only if the flag says to do it
        if (shouldReturnFocusOnClose && this.focusTarget) {
          this.focusTarget.focus();
        }
      }
    }
  }, {
    key: "setInternalFocus",
    value: function setInternalFocus() {
      var _this$props2 = this.props,
          isVisible = _this$props2.isVisible,
          variant = _this$props2.variant;

      if (isVisible) {
        switch (variant) {
          case 'choice':
            // focus the confirm button
            if (this.footerRef.current) {
              this.footerRef.current.focusConfirm();
            }

            break;

          case 'info':
            // focus the close button
            if (this.closeButtonRef.current) {
              this.closeButtonRef.current.focusButton();
            }

            break;

          case 'wait':
            // focus the whole modal
            if (this.containerRef.current) {
              this.containerRef.current.focus();
            }

            break;

          default:
            // focus the whole modal
            if (this.containerRef.current) {
              this.containerRef.current.focus();
            }

            break;
        }
      }
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var _this$props3 = this.props,
          variant = _this$props3.variant,
          cancelClick = _this$props3.cancelClick;

      if (variant !== 'wait') {
        cancelClick();
      }

      this.removeListeners();
    }
  }, {
    key: "handleKeyEvents",
    value: function handleKeyEvents(e) {
      var _this$props4 = this.props,
          isVisible = _this$props4.isVisible,
          variant = _this$props4.variant; // Return if there is no open modal

      if (!isVisible) {
        return;
      }

      var focusableEls = this.getFocusableEls(this.containerRef.current);
      var firstFocusableEl = focusableEls[0];
      var lastFocusableEl = focusableEls[focusableEls.length - 1];

      if (this.isEscPressed(e)) {
        // Cannot use Esc to close Wait Modals
        if (variant !== 'wait') {
          e.preventDefault();
          this.cancel();
        }
      }

      if (this.isTabPressed(e)) {
        if (variant === 'wait') {
          e.preventDefault(); // Wait modals only ever focus the modal container

          this.containerRef.current.focus();
        } else if (e.shiftKey) {
          if (this.isActiveElement(firstFocusableEl)) {
            // underflow to the end
            e.preventDefault();
            lastFocusableEl.focus();
          }
        } else if (this.isActiveElement(lastFocusableEl)) {
          // overflow to the beginning
          e.preventDefault();
          firstFocusableEl.focus();
        }
      }
    }
  }, {
    key: "attachListeners",
    value: function attachListeners() {
      window.addEventListener('keydown', this.handleKeyEvents);
    }
  }, {
    key: "removeListeners",
    value: function removeListeners() {
      window.removeEventListener('keydown', this.handleKeyEvents);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          additionalClasses = _this$props5.additionalClasses,
          analyticsString = _this$props5.analyticsString,
          children = _this$props5.children,
          title = _this$props5.title,
          variant = _this$props5.variant,
          confirmText = _this$props5.confirmText,
          cancelText = _this$props5.cancelText,
          idString = _this$props5.idString,
          isVisible = _this$props5.isVisible,
          confirmClick = _this$props5.confirmClick,
          cancelClick = _this$props5.cancelClick,
          shouldReturnFocusOnClose = _this$props5.shouldReturnFocusOnClose,
          closeIcon = _this$props5.closeIcon,
          closeAnalyticsString = _this$props5.closeAnalyticsString,
          maskAnalyticsString = _this$props5.maskAnalyticsString,
          confirmAnalyticsString = _this$props5.confirmAnalyticsString,
          cancelAnalyticsString = _this$props5.cancelAnalyticsString,
          rest = _objectWithoutProperties(_this$props5, ["additionalClasses", "analyticsString", "children", "title", "variant", "confirmText", "cancelText", "idString", "isVisible", "confirmClick", "cancelClick", "shouldReturnFocusOnClose", "closeIcon", "closeAnalyticsString", "maskAnalyticsString", "confirmAnalyticsString", "cancelAnalyticsString"]);

      if (!isVisible) {
        return null;
      }

      var isWait = variant === 'wait';
      var isChoice = variant === 'choice';
      this.attachListeners();
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", _extends({
        className: classnames('sprk-c-Modal', isWait ? 'sprk-c-Modal--wait' : '', additionalClasses),
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": 'modalHeading_' + this.aria_id,
        "aria-describedby": 'modalContent_' + this.aria_id,
        "data-analytics": analyticsString,
        "data-id": idString,
        ref: this.containerRef // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
        ,
        tabIndex: "0"
      }, rest), /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack sprk-o-Stack--large"
      }, /*#__PURE__*/React__default.createElement("header", {
        className: "sprk-o-Stack__item sprk-c-Modal__header"
      }, /*#__PURE__*/React__default.createElement("h2", {
        className: "sprk-c-Modal__heading sprk-b-TypeDisplayFour",
        id: 'modalHeading_' + this.aria_id
      }, title), !isWait && /*#__PURE__*/React__default.createElement(CloseButton, {
        clickAction: this.cancel,
        ref: this.closeButtonRef,
        iconName: closeIcon,
        analyticsString: closeAnalyticsString
      })), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-o-Stack__item sprk-c-Modal__body sprk-o-Stack sprk-o-Stack--medium",
        id: 'modalContent_' + this.aria_id
      }, isWait && /*#__PURE__*/React__default.createElement(SprkSpinner, {
        size: "large",
        lightness: "dark",
        additionalClasses: "sprk-o-Stack__item"
      }), /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-b-TypeBodyTwo sprk-c-Modal__content"
      }, children)), isChoice && /*#__PURE__*/React__default.createElement(ModalFooter, {
        confirmClick: confirmClick,
        cancelClick: this.cancel,
        confirmText: confirmText,
        cancelText: cancelText,
        ref: this.footerRef,
        confirmAnalyticsString: confirmAnalyticsString,
        cancelAnalyticsString: cancelAnalyticsString
      })))), /*#__PURE__*/React__default.createElement(ModalMask, {
        clicked: this.cancel,
        analyticsString: maskAnalyticsString
      }));
    }
  }]);

  return SprkModal;
}(React.Component);

SprkModal.propTypes = {
  /** Content to render inside modal. */
  children: propTypes.node,

  /** The modal heading text. */
  title: propTypes.string,

  /** Determines style of modal to render. */
  variant: propTypes.oneOf(['wait', 'info', 'choice']),

  /** Text to render on the confirmation button. */
  confirmText: propTypes.string,

  /** Text to render on the cancel button. */
  cancelText: propTypes.string,

  /** Sets whether the modal is displayed. */
  isVisible: propTypes.bool,

  /** The function that runs when confirm choice is clicked. */
  confirmClick: propTypes.func,

  /**
   * The function that runs when the cancel choice is clicked.
   * Cancel choices include clicking the x icon, Mask, or pressing Esc.
  */
  cancelClick: propTypes.func,

  /**
   * 	If true, focus will automatically be returned to the last-focused item when the modal is closed.
   */
  shouldReturnFocusOnClose: propTypes.bool,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,
  // TODO: Actually give this a default

  /**
   * The icon name to use for the close button in the modal. Defaults to "close".
   */
  closeIcon: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  closeAnalyticsString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  maskAnalyticsString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  confirmAnalyticsString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  cancelAnalyticsString: propTypes.string
};
SprkModal.defaultProps = {
  variant: 'choice',
  confirmText: 'Confirm',
  cancelText: 'Cancel',

  /** Sets whether the modal is displayed. */
  isVisible: false,
  confirmClick: noop_1,
  cancelClick: noop_1,
  shouldReturnFocusOnClose: true
};

var SprkStepperStep = /*#__PURE__*/function (_Component) {
  _inherits(SprkStepperStep, _Component);

  var _super = _createSuper(SprkStepperStep);

  function SprkStepperStep() {
    _classCallCheck(this, SprkStepperStep);

    return _super.apply(this, arguments);
  }

  _createClass(SprkStepperStep, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          renderCallback = _this$props.renderCallback,
          isSelected = _this$props.isSelected;

      if (isSelected) {
        var top = ReactDOM.findDOMNode(this).offsetTop; // call our parent and let them know what our top is so they can pass that
        // to the slider component

        renderCallback(top);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this$props2 = this.props,
          renderCallback = _this$props2.renderCallback,
          isSelected = _this$props2.isSelected;

      if (isSelected && !prevProps.isSelected) {
        var top = ReactDOM.findDOMNode(this).offsetTop; // call our parent and let them know what our top is so they can pass that
        // to the slider component

        renderCallback(top);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          additionalClasses = _this$props3.additionalClasses,
          hasDescription = _this$props3.hasDescription,
          hasDarkBackground = _this$props3.hasDarkBackground,
          idString = _this$props3.idString,
          analyticsString = _this$props3.analyticsString,
          title = _this$props3.title,
          isSelected = _this$props3.isSelected,
          onClick = _this$props3.onClick,
          children = _this$props3.children,
          renderCallback = _this$props3.renderCallback,
          other = _objectWithoutProperties(_this$props3, ["additionalClasses", "hasDescription", "hasDarkBackground", "idString", "analyticsString", "title", "isSelected", "onClick", "children", "renderCallback"]);

      return (
        /*#__PURE__*/
        // eslint-disable-next-line jsx-a11y/click-events-have-key-events
        React__default.createElement("li", _extends({
          role: "tab",
          className: classnames('sprk-c-Stepper__step', isSelected ? 'sprk-c-Stepper__step--selected' : '', additionalClasses),
          "aria-selected": isSelected ? 'true' : 'false',
          "data-id": idString,
          "data-analytics": analyticsString,
          onClick: onClick
        }, other), /*#__PURE__*/React__default.createElement("div", {
          className: classnames('sprk-c-Stepper__step-content', hasDescription ? 'sprk-c-Stepper__step-content--has-description' : '', isSelected ? 'sprk-c-Stepper__step-content--hidden' : '')
        }, /*#__PURE__*/React__default.createElement("span", {
          className: " sprk-c-Stepper__step-header sprk-b-Link sprk-b-Link--plain"
        }, /*#__PURE__*/React__default.createElement("span", {
          className: "sprk-c-Stepper__step-icon"
        }), /*#__PURE__*/React__default.createElement("h3", {
          className: classnames("sprk-c-Stepper__step-heading", hasDescription && isSelected ? 'sprk-u-Visibility--hidden' : '')
        }, title)), hasDescription && /*#__PURE__*/React__default.createElement("div", {
          className: classnames("sprk-c-Stepper__step-description", isSelected ? 'sprk-u-Visibility--hidden' : 'sprk-u-Display--none')
        }, /*#__PURE__*/React__default.createElement("p", {
          className: "sprk-b-TypeBodyTwo"
        }, children))))
      );
    }
  }]);

  return SprkStepperStep;
}(React.Component);
SprkStepperStep.propTypes = {
  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Assigned to the `data-analytics` attribute serving as a unique selector for outside libraries to capture data.
   */
  analyticsString: propTypes.string,

  /*
   * Text for the headline of the step
   */
  title: propTypes.string,

  /**
   * 	If true, this step will be selected when the component mounts. This property is changed automatically by the Stepper component when the keyboard is used to change the active step or when a step is clicked. Only one step can be selected at a time.
   */
  isSelected: propTypes.bool,

  /**
   * This callback function will be called when the StepperStep is clicked. Note that this function is called before the Stepper state is updated.
   */
  onClick: propTypes.func,

  /**
   * If true, the StepperStep will render with lighter text appropriate for displaying on a dark background.
   */
  // Internal prop
  hasDarkBackground: propTypes.bool,

  /**
   * If true, the StepperStep will render in a way that is suitable for use with a Slider component
   */
  // Internal prop
  hasDescription: propTypes.bool,

  /**
   * A function to call when the component finishes rendering. Used to move the slider to the appropriate position.
   */
  // Internal prop
  renderCallback: propTypes.func
};
SprkStepperStep.defaultProps = {
  onClick: function onClick() {},
  renderCallback: function renderCallback() {}
};

var SprkStepperSlider = /*#__PURE__*/function (_Component) {
  _inherits(SprkStepperSlider, _Component);

  var _super = _createSuper(SprkStepperSlider);

  function SprkStepperSlider(props) {
    var _this;

    _classCallCheck(this, SprkStepperSlider);

    _this = _super.call(this, props);
    _this.sliderRef = /*#__PURE__*/React__default.createRef(); // prevProps is not available in getDerivedStateFromProps,
    // so we cache these in state.

    _this.state = {
      cachedTop: props.sliderStyle ? props.sliderStyle.top : undefined,
      cachedSliderRef: _this.sliderRef
    };
    return _this;
  }

  _createClass(SprkStepperSlider, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      if (prevProps.sliderStyle.top != this.props.sliderStyle.top) {
        setTimeout(function () {
          window.requestAnimationFrame(function () {
            _this2.sliderRef.current.classList.add('sprk-c-Stepper__slider--active');
          });
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          contents = _this$props.contents,
          sliderStyle = _this$props.sliderStyle;
      return /*#__PURE__*/React__default.createElement("li", {
        className: classnames('sprk-c-Stepper__slider', 'sprk-c-Stepper__slider--active'),
        style: sliderStyle,
        ref: this.sliderRef
      }, /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-c-Stepper__step-content sprk-c-Stepper__step-content--has-description"
      }, /*#__PURE__*/React__default.createElement("span", {
        className: "sprk-c-Stepper__step-header sprk-b-Link sprk-b-Link--plain"
      }, /*#__PURE__*/React__default.createElement("span", {
        className: "sprk-c-Stepper__step-icon sprk-u-Visibility--hidden"
      }), /*#__PURE__*/React__default.createElement("h3", {
        className: "sprk-c-Stepper__step-heading"
      }, title)), /*#__PURE__*/React__default.createElement("div", {
        className: "sprk-c-Stepper__step-description"
      }, /*#__PURE__*/React__default.createElement("p", {
        className: "sprk-b-TypeBodyTwo"
      }, contents))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.sliderStyle && nextProps.sliderStyle.top != prevState.cachedTop) {
        prevState.cachedSliderRef.current.classList.remove('sprk-c-Stepper__slider--active');
      }

      return null;
    }
  }]);

  return SprkStepperSlider;
}(React.Component);

SprkStepperSlider.propTypes = {
  /**
   * The title of the item.
   */
  title: propTypes.string,

  /** Additional description text to accompany the item's title. */
  contents: propTypes.string,

  /**
   * An object representing the style properties of this component.
   */
  sliderStyle: propTypes.shape({
    top: propTypes.number
  })
};

var SprkStepper = /*#__PURE__*/function (_Component) {
  _inherits(SprkStepper, _Component);

  var _super = _createSuper(SprkStepper);

  function SprkStepper(props) {
    var _this;

    _classCallCheck(this, SprkStepper);

    _this = _super.call(this, props);
    _this.handleStepClick = _this.handleStepClick.bind(_assertThisInitialized(_this));
    _this.handleKeyEvents = _this.handleKeyEvents.bind(_assertThisInitialized(_this));
    _this.retreatTab = _this.retreatTab.bind(_assertThisInitialized(_this));
    _this.advanceTab = _this.advanceTab.bind(_assertThisInitialized(_this));
    _this.jumpToFirstTab = _this.jumpToFirstTab.bind(_assertThisInitialized(_this));
    _this.jumpToLastTab = _this.jumpToLastTab.bind(_assertThisInitialized(_this));
    _this.getInitialActiveStep = _this.getInitialActiveStep.bind(_assertThisInitialized(_this));
    _this.setNewActiveStep = _this.setNewActiveStep.bind(_assertThisInitialized(_this));
    _this.updateSliderPosition = _this.updateSliderPosition.bind(_assertThisInitialized(_this));
    _this.state = {
      activeStepIndex: _this.getInitialActiveStep(),
      sliderStyle: {
        top: 0
      }
    };
    return _this;
  }

  _createClass(SprkStepper, [{
    key: "handleStepClick",
    value: function handleStepClick(e, indexOfStep) {
      this.setNewActiveStep(indexOfStep);
    }
  }, {
    key: "handleKeyEvents",
    value: function handleKeyEvents(event) {
      var keys = {
        end: 35,
        home: 36,
        left: 37,
        right: 39,
        up: 38,
        down: 40
      };

      if (event.keyCode === keys.left || event.keyCode === keys.up) {
        event.preventDefault();
        this.retreatTab();
      } else if (event.keyCode === keys.right || event.keyCode === keys.down) {
        event.preventDefault();
        this.advanceTab();
      } else if (event.keyCode === keys.home) {
        event.preventDefault();
        this.jumpToFirstTab();
      } else if (event.keyCode === keys.end) {
        event.preventDefault();
        this.jumpToLastTab();
      }
    }
  }, {
    key: "retreatTab",
    value: function retreatTab() {
      var activeStepIndex = this.state.activeStepIndex;
      var children = this.props.children;
      var newIndex = activeStepIndex - 1;

      if (newIndex < 0) {
        newIndex = children.length - 1;
      }

      this.setNewActiveStep(newIndex);
    }
  }, {
    key: "advanceTab",
    value: function advanceTab() {
      var activeStepIndex = this.state.activeStepIndex;
      var children = this.props.children;
      var newIndex = activeStepIndex + 1;

      if (newIndex >= children.length) {
        newIndex = 0;
      }

      this.setNewActiveStep(newIndex);
    }
  }, {
    key: "jumpToFirstTab",
    value: function jumpToFirstTab() {
      this.setNewActiveStep(0);
    }
  }, {
    key: "jumpToLastTab",
    value: function jumpToLastTab() {
      var children = this.props.children;
      this.setNewActiveStep(children.length - 1);
    }
  }, {
    key: "getInitialActiveStep",
    value: function getInitialActiveStep() {
      var children = this.props.children; // the first step is active by default

      var initialIndex = 0;
      children.forEach(function (child, index) {
        if (child.props.isSelected) {
          initialIndex = index;
        }
      });
      return initialIndex;
    }
  }, {
    key: "setNewActiveStep",
    value: function setNewActiveStep(stepIndex) {
      this.setState({
        activeStepIndex: stepIndex
      });
    }
  }, {
    key: "updateSliderPosition",
    value: function updateSliderPosition(position) {
      this.setState({
        sliderStyle: {
          top: position
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          additionalClasses = _this$props.additionalClasses,
          children = _this$props.children,
          idString = _this$props.idString,
          hasDarkBackground = _this$props.hasDarkBackground,
          other = _objectWithoutProperties(_this$props, ["additionalClasses", "children", "idString", "hasDarkBackground"]);

      var _this$state = this.state,
          activeStepIndex = _this$state.activeStepIndex,
          sliderStyle = _this$state.sliderStyle;
      var hasDesc = false;
      var descCount = 0; // count the number of Step children with descriptions. If that doesn't match the total number of children,
      // warn the user

      children.forEach(function (child, index) {
        if (child.type.name === SprkStepperStep.name && child.props.children) {
          descCount++;
        }
      });

      if (descCount === children.length) {
        hasDesc = true;
      } else if (descCount > 0) {
        console.warn('SprkStepper: If any step has a description, they all must have a description.');
      }

      var stepper = /*#__PURE__*/React__default.createElement("ol", _extends({
        className: classnames('sprk-c-Stepper', hasDarkBackground ? 'sprk-c-Stepper--has-dark-bg' : '', !hasDarkBackground ? additionalClasses : ''),
        role: "tablist",
        "aria-orientation": "vertical" // todo change based on window width
        ,
        "data-id": idString
      }, other), hasDesc && /*#__PURE__*/React__default.createElement(SprkStepperSlider, {
        title: children[activeStepIndex].props.title // active title
        ,
        contents: children[activeStepIndex].props.children // active contents
        ,
        sliderStyle: sliderStyle
      }), children.map(function (childNode, index) {
        // Ignore all child nodes that are not SprkStepperSteps
        if (childNode.type.name !== SprkStepperStep.name) return null;
        return /*#__PURE__*/React__default.createElement(SprkStepperStep, _extends({}, childNode.props, {
          key: childNode.props.id || index,
          isSelected: activeStepIndex === index,
          tabIndex: 0,
          additionalClasses: classnames(index === 0 ? 'sprk-c-Stepper__step--first' : '', index === children.length - 1 ? 'sprk-c-Stepper__step--last' : '', childNode.props.additionalClasses),
          onKeyDown: _this2.handleKeyEvents,
          onClick: function onClick(event) {
            childNode.props.onClick();

            _this2.handleStepClick(event, index);
          },
          renderCallback: _this2.updateSliderPosition,
          hasDescription: hasDesc,
          hasDarkBackground: hasDarkBackground
        }));
      }));

      if (hasDarkBackground) {
        return /*#__PURE__*/React__default.createElement("div", {
          className: classnames('sprk-u-BackgroundColor--blue sprk-o-Box sprk-o-Box--large', additionalClasses)
        }, stepper);
      }

      return stepper;
    }
  }]);

  return SprkStepper;
}(React.Component);

SprkStepper.propTypes = {
  /**
   * If true, the Stepper will be
   * rendered on a dark background.
   * `($sprk-blue)`
  */
  hasDarkBackground: propTypes.bool,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string
};

var SprkBox = function SprkBox(props) {
  var children = props.children,
      spacing = props.spacing,
      additionalClasses = props.additionalClasses,
      idString = props.idString,
      other = _objectWithoutProperties(props, ["children", "spacing", "additionalClasses", "idString"]);

  var classNames = classnames('sprk-o-Box', additionalClasses, {
    'sprk-o-Box--flush': spacing === 'flush',
    'sprk-o-Box--tiny': spacing === 'tiny',
    'sprk-o-Box--small': spacing === 'small',
    'sprk-o-Box--large': spacing === 'large',
    'sprk-o-Box--huge': spacing === 'huge',
    'sprk-o-Box--misc-a': spacing === 'miscA',
    'sprk-o-Box--misc-b': spacing === 'miscB',
    'sprk-o-Box--misc-c': spacing === 'miscC',
    'sprk-o-Box--misc-d': spacing === 'miscD',
    'sprk-o-Box--inset-short-tiny': spacing === 'insetShortTiny',
    'sprk-o-Box--inset-short-small': spacing === 'insetShortSmall',
    'sprk-o-Box--inset-short-medium': spacing === 'insetShortMedium',
    'sprk-o-Box--inset-short-large': spacing === 'insetShortLarge',
    'sprk-o-Box--inset-short-huge': spacing === 'insetShortHuge',
    'sprk-o-Box--inset-tall-tiny': spacing === 'insetTallTiny',
    'sprk-o-Box--inset-tall-small': spacing === 'insetTallSmall',
    'sprk-o-Box--inset-tall-medium': spacing === 'insetTallMedium',
    'sprk-o-Box--inset-tall-large': spacing === 'insetTallLarge',
    'sprk-o-Box--inset-tall-huge': spacing === 'insetTallHuge'
  });
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classNames,
    "data-id": idString
  }, other), children);
};

SprkBox.propTypes = {
  children: propTypes.node,

  /**
   * Determines the padding size.
   */
  spacing: propTypes.oneOf(['flush', 'tiny', 'small', 'large', 'huge', 'insetShortTiny', 'insetShortSmall', 'insetShortMedium', 'insetShortLarge', 'insetShortHuge', 'insetTallTiny', 'insetTallSmall', 'insetTallMedium', 'insetTallLarge', 'insetTallHuge', 'miscA', 'miscB', 'miscC', 'miscD']),

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkText = function SprkText(_ref) {
  var children = _ref.children,
      element = _ref.element,
      variant = _ref.variant,
      idString = _ref.idString,
      isPageTitle = _ref.isPageTitle,
      additionalClasses = _ref.additionalClasses,
      other = _objectWithoutProperties(_ref, ["children", "element", "variant", "idString", "isPageTitle", "additionalClasses"]);

  var classNames = classnames(additionalClasses, {
    'sprk-b-TypeBodyOne': variant === 'bodyOne',
    'sprk-b-TypeBodyTwo': variant === 'bodyTwo',
    'sprk-b-TypeBodyThree': variant === 'bodyThree',
    'sprk-b-TypeBodyFour': variant === 'bodyFour'
  });
  var TagName = element;
  return /*#__PURE__*/React__default.createElement(TagName, _extends({
    className: classNames,
    "data-id": idString
  }, other), children);
};

SprkText.defaultProps = {
  element: 'p'
};
SprkText.propTypes = {
  /**
   * The incoming children.
   */
  children: propTypes.node,

  /**
   * Determines what element to render.
   */
  element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

  /**
   * The text style to render.
   * See [Typography](https://www.sparkdesignsystem.com/using-spark/foundations/typography)
   * for more information on the design styles.
   */
  variant: propTypes.oneOf(['bodyOne', 'bodyTwo', 'bodyThree', 'bodyFour']),

  /**
   * Assigned to the `data-id` attribute
   * serving as a unique selector for
   * automated tools.
   */
  idString: propTypes.string,

  /**
   * A space-separated string of classes to add to the
   * outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkHeading = function SprkHeading(_ref) {
  var children = _ref.children,
      element = _ref.element,
      variant = _ref.variant,
      idString = _ref.idString,
      isPageTitle = _ref.isPageTitle,
      additionalClasses = _ref.additionalClasses,
      other = _objectWithoutProperties(_ref, ["children", "element", "variant", "idString", "isPageTitle", "additionalClasses"]);

  var classNames = classnames(additionalClasses, {
    'sprk-b-TypeDisplayOne': variant === 'displayOne',
    'sprk-b-TypeDisplayTwo': variant === 'displayTwo',
    'sprk-b-TypeDisplayThree': variant === 'displayThree',
    'sprk-b-TypeDisplayFour': variant === 'displayFour',
    'sprk-b-TypeDisplayFive': variant === 'displayFive',
    'sprk-b-TypeDisplaySix': variant === 'displaySix',
    'sprk-b-TypeDisplaySeven': variant === 'displaySeven',
    'sprk-b-PageTitle': isPageTitle
  });
  var TagName = element;
  return /*#__PURE__*/React__default.createElement(TagName, _extends({
    className: classNames,
    "data-id": idString
  }, other), children);
};

SprkHeading.defaultProps = {
  /**
   * If `false`, the heading will not have Page Title styles.
   * If `true`, the heading will have Page Title stles.
   */
  isPageTitle: false,

  /**
   * Determines what element to render.
   */
  element: 'h1'
};
SprkHeading.propTypes = {
  /**
   * The incoming children.
   */
  children: propTypes.node,

  /**
   * Determines what element to render.
   */
  element: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.elementType]),

  /**
   * The heading style to render.
   * See [Typography](https://www.sparkdesignsystem.com/using-spark/foundations/typography)
   * for more information on the design styles.
   */
  variant: propTypes.oneOf(['displayOne', 'displayTwo', 'displayThree', 'displayFour', 'displayFive', 'displaySix', 'displaySeven']),

  /**
   * Assigned to the `data-id` attribute
   * serving as a unique selector for
   * automated tools.
   */
  idString: propTypes.string,

  /**
   * If `false`, the heading will not have Page Title styles.
   * If `true`, the heading will have Page Title stles.
   */
  isPageTitle: propTypes.bool,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string
};

var SprkCenteredColumn = function SprkCenteredColumn(props) {
  var children = props.children,
      additionalClasses = props.additionalClasses,
      idString = props.idString,
      element = props.element,
      other = _objectWithoutProperties(props, ["children", "additionalClasses", "idString", "element"]);

  var classNames = classnames('sprk-o-CenteredColumn', additionalClasses);
  var TagName = element;
  return /*#__PURE__*/React__default.createElement(TagName, _extends({
    className: classNames
  }, other, {
    "data-id": idString
  }), children);
};

SprkCenteredColumn.propTypes = {
  children: propTypes.node,

  /**
   * A space-separated string of classes to add to the outermost container of the component.
   */
  additionalClasses: propTypes.string,

  /**
   * Assigned to the `data-id` attribute serving as a unique selector for automated tools.
   */
  idString: propTypes.string,

  /**
   * Determines what element to render.
   */
  element: propTypes.string
};
SprkCenteredColumn.defaultProps = {
  /**
   * Determines what element to render.
   */
  element: 'div'
};

exports.SprkAccordion = SprkAccordion;
exports.SprkAccordionItem = SprkAccordionItem;
exports.SprkAlert = SprkAlert;
exports.SprkAward = SprkAward;
exports.SprkBox = SprkBox;
exports.SprkButton = SprkButton;
exports.SprkCard = SprkCard;
exports.SprkCenteredColumn = SprkCenteredColumn;
exports.SprkCheckboxGroup = SprkCheckboxGroup;
exports.SprkCheckboxItem = SprkCheckboxItem;
exports.SprkDatePickerInput = SprkDatePickerInput;
exports.SprkDictionary = SprkDictionary;
exports.SprkDivider = SprkDivider;
exports.SprkDropdown = SprkDropdown;
exports.SprkErrorContainer = SprkErrorContainer;
exports.SprkFieldset = SprkFieldset;
exports.SprkFlag = SprkFlag;
exports.SprkFooter = SprkFooter;
exports.SprkHeading = SprkHeading;
exports.SprkHelperText = SprkHelperText;
exports.SprkHighlightBoard = SprkHighlightBoard;
exports.SprkIcon = SprkIcon;
exports.SprkLegend = SprkLegend;
exports.SprkLink = SprkLink;
exports.SprkList = SprkList;
exports.SprkListItem = SprkListItem;
exports.SprkMasthead = SprkMasthead;
exports.SprkModal = SprkModal;
exports.SprkPagination = SprkPagination;
exports.SprkPromo = SprkPromo;
exports.SprkRadioGroup = SprkRadioGroup;
exports.SprkRadioItem = SprkRadioItem;
exports.SprkRevealInput = SprkRevealInput;
exports.SprkSelectionInput = SprkSelectionInput;
exports.SprkSpinner = SprkSpinner;
exports.SprkStack = SprkStack;
exports.SprkStackItem = SprkStackItem;
exports.SprkStepper = SprkStepper;
exports.SprkStepperStep = SprkStepperStep;
exports.SprkTable = SprkTable;
exports.SprkTabs = SprkTabs;
exports.SprkTabsPanel = SprkTabsPanel;
exports.SprkText = SprkText;
exports.SprkTextInput = SprkTextInput;
exports.SprkToggle = SprkToggle;
exports.SprkTooltip = SprkTooltip;
